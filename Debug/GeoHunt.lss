
GeoHunt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00003aac  00003b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000373  00800208  00800208  00003c48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003ca4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006b8  00000000  00000000  00003ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001c946  00000000  00000000  0000439c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035ee  00000000  00000000  00020ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027f5  00000000  00000000  000242d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001998  00000000  00000000  00026ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003eb0  00000000  00000000  00028460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000868a  00000000  00000000  0002c310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000800  00000000  00000000  0003499a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__dtors_end>
       4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
       8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
       c:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__vector_3>
      10:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__vector_3>
      14:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__vector_3>
      18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      40:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__vector_16>
      44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      48:	0c 94 f1 06 	jmp	0xde2	; 0xde2 <__vector_18>
      4c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_19>
      50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00 00 40 7a 10 f3 5a     ....$.'.*..@z..Z
      c8:	00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48     ..rN..........vH
      d8:	17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1     .....T.....;....
      e8:	f5 05 00 00 80 96 98 00 00 00 40 42 0f 00 00 00     ..........@B....
      f8:	a0 86 01 00 00 00 10 27 00 00 00 00 e8 03 00 00     .......'........
     108:	00 00 64 00 00 00 00 00 0a 00 00 00 00 00 01 00     ..d.............
     118:	00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df     ....,v...gO.#...
     128:	ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76     .Y.......S.:.Q.v
     138:	96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc     .....&....b.@|o.
     148:	ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7     ....@...o....Z*.
     158:	5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5     \.kl.gm......G..
     168:	20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80      ..........5w...
     178:	84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33     ..... N......333
     188:	33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55     3..n...A..!..;.U
     198:	16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d     ........K8..|...
     1a8:	a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec     ...$ 2.r^"....$.
     1b8:	a1 e5 3d 27                                         ..='

000001bc <__ctors_start>:
     1bc:	5d 04       	cpc	r5, r13
     1be:	59 07       	cpc	r21, r25
     1c0:	54 0d       	add	r21, r4

000001c2 <__ctors_end>:
     1c2:	69 04       	cpc	r6, r9

000001c4 <__dtors_end>:
     1c4:	11 24       	eor	r1, r1
     1c6:	1f be       	out	0x3f, r1	; 63
     1c8:	cf ef       	ldi	r28, 0xFF	; 255
     1ca:	d8 e0       	ldi	r29, 0x08	; 8
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
     1d0:	12 e0       	ldi	r17, 0x02	; 2
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b1 e0       	ldi	r27, 0x01	; 1
     1d6:	ec ea       	ldi	r30, 0xAC	; 172
     1d8:	fa e3       	ldi	r31, 0x3A	; 58
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__do_copy_data+0x10>
     1dc:	05 90       	lpm	r0, Z+
     1de:	0d 92       	st	X+, r0
     1e0:	a8 30       	cpi	r26, 0x08	; 8
     1e2:	b1 07       	cpc	r27, r17
     1e4:	d9 f7       	brne	.-10     	; 0x1dc <__do_copy_data+0xc>

000001e6 <__do_clear_bss>:
     1e6:	25 e0       	ldi	r18, 0x05	; 5
     1e8:	a8 e0       	ldi	r26, 0x08	; 8
     1ea:	b2 e0       	ldi	r27, 0x02	; 2
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
     1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
     1f0:	ab 37       	cpi	r26, 0x7B	; 123
     1f2:	b2 07       	cpc	r27, r18
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>

000001f6 <__do_global_ctors>:
     1f6:	10 e0       	ldi	r17, 0x00	; 0
     1f8:	c1 ee       	ldi	r28, 0xE1	; 225
     1fa:	d0 e0       	ldi	r29, 0x00	; 0
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__do_global_ctors+0x10>
     1fe:	21 97       	sbiw	r28, 0x01	; 1
     200:	fe 01       	movw	r30, r28
     202:	0e 94 05 13 	call	0x260a	; 0x260a <__tablejump2__>
     206:	ce 3d       	cpi	r28, 0xDE	; 222
     208:	d1 07       	cpc	r29, r17
     20a:	c9 f7       	brne	.-14     	; 0x1fe <__do_global_ctors+0x8>
     20c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <main>
     210:	0c 94 49 1d 	jmp	0x3a92	; 0x3a92 <__do_global_dtors>

00000214 <__bad_interrupt>:
     214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <_Z17CalculateDistanceffff>:
char* NSInd;
char* EWInd;
char PrintInfo[256];

float CalculateDistance(float Long, float Lat, float EndLong, float EndLat)
{
     218:	4f 92       	push	r4
     21a:	5f 92       	push	r5
     21c:	6f 92       	push	r6
     21e:	7f 92       	push	r7
     220:	8f 92       	push	r8
     222:	9f 92       	push	r9
     224:	af 92       	push	r10
     226:	bf 92       	push	r11
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	00 d0       	rcall	.+0      	; 0x23a <_Z17CalculateDistanceffff+0x22>
     23a:	00 d0       	rcall	.+0      	; 0x23c <_Z17CalculateDistanceffff+0x24>
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	29 01       	movw	r4, r18
     242:	3a 01       	movw	r6, r20
	float result;
	result = pow(EndLong - Long,2)+ pow(EndLat - Lat,2);
     244:	9b 01       	movw	r18, r22
     246:	ac 01       	movw	r20, r24
     248:	c8 01       	movw	r24, r16
     24a:	b7 01       	movw	r22, r14
     24c:	0e 94 0b 13 	call	0x2616	; 0x2616 <__subsf3>
     250:	69 83       	std	Y+1, r22	; 0x01
     252:	7a 83       	std	Y+2, r23	; 0x02
     254:	8b 83       	std	Y+3, r24	; 0x03
     256:	9c 83       	std	Y+4, r25	; 0x04
     258:	a3 01       	movw	r20, r6
     25a:	92 01       	movw	r18, r4
     25c:	c6 01       	movw	r24, r12
     25e:	b5 01       	movw	r22, r10
     260:	0e 94 0b 13 	call	0x2616	; 0x2616 <__subsf3>
     264:	6b 01       	movw	r12, r22
     266:	7c 01       	movw	r14, r24
     268:	29 81       	ldd	r18, Y+1	; 0x01
     26a:	3a 81       	ldd	r19, Y+2	; 0x02
     26c:	4b 81       	ldd	r20, Y+3	; 0x03
     26e:	5c 81       	ldd	r21, Y+4	; 0x04
     270:	ca 01       	movw	r24, r20
     272:	b9 01       	movw	r22, r18
     274:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     278:	4b 01       	movw	r8, r22
     27a:	5c 01       	movw	r10, r24
     27c:	a7 01       	movw	r20, r14
     27e:	96 01       	movw	r18, r12
     280:	c7 01       	movw	r24, r14
     282:	b6 01       	movw	r22, r12
     284:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     288:	9b 01       	movw	r18, r22
     28a:	ac 01       	movw	r20, r24
     28c:	c5 01       	movw	r24, r10
     28e:	b4 01       	movw	r22, r8
     290:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
	result = sqrt(result);
     294:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <sqrt>
	
	result *= 100;
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	48 ec       	ldi	r20, 0xC8	; 200
     29e:	52 e4       	ldi	r21, 0x42	; 66
     2a0:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
	result  *= 3280.8f;
     2a4:	2d ec       	ldi	r18, 0xCD	; 205
     2a6:	3c e0       	ldi	r19, 0x0C	; 12
     2a8:	4d e4       	ldi	r20, 0x4D	; 77
     2aa:	55 e4       	ldi	r21, 0x45	; 69
     2ac:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
	return result;
}
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	bf 90       	pop	r11
     2ca:	af 90       	pop	r10
     2cc:	9f 90       	pop	r9
     2ce:	8f 90       	pop	r8
     2d0:	7f 90       	pop	r7
     2d2:	6f 90       	pop	r6
     2d4:	5f 90       	pop	r5
     2d6:	4f 90       	pop	r4
     2d8:	08 95       	ret

000002da <_Z9ParseDataPc>:


void ParseData(char* theData)
{
     2da:	4f 92       	push	r4
     2dc:	5f 92       	push	r5
     2de:	6f 92       	push	r6
     2e0:	7f 92       	push	r7
     2e2:	8f 92       	push	r8
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	2a 97       	sbiw	r28, 0x0a	; 10
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
	char* parsed;
	const char s[2] = ",";
     30a:	2c e2       	ldi	r18, 0x2C	; 44
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	3a 83       	std	Y+2, r19	; 0x02
     310:	29 83       	std	Y+1, r18	; 0x01
	
	//$GPRMC
	parsed = strtok(theData, s);
     312:	be 01       	movw	r22, r28
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <strtok>
	//Date/Time
	parsed = strtok(NULL, s);
     31c:	be 01       	movw	r22, r28
     31e:	6f 5f       	subi	r22, 0xFF	; 255
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <strtok>
	//Valid data Indicator
	parsed = strtok(NULL, s);
     32a:	be 01       	movw	r22, r28
     32c:	6f 5f       	subi	r22, 0xFF	; 255
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <strtok>
	//Latitude
	parsed = strtok(NULL, s);
     338:	be 01       	movw	r22, r28
     33a:	6f 5f       	subi	r22, 0xFF	; 255
     33c:	7f 4f       	sbci	r23, 0xFF	; 255
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <strtok>
     346:	8c 01       	movw	r16, r24
	float x = parsed[0] - '0';
     348:	fc 01       	movw	r30, r24
     34a:	60 81       	ld	r22, Z
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	60 53       	subi	r22, 0x30	; 48
     350:	71 09       	sbc	r23, r1
     352:	07 2e       	mov	r0, r23
     354:	00 0c       	add	r0, r0
     356:	88 0b       	sbc	r24, r24
     358:	99 0b       	sbc	r25, r25
     35a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
	x *= 10;
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	40 e2       	ldi	r20, 0x20	; 32
     364:	51 e4       	ldi	r21, 0x41	; 65
     366:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     36a:	6b 83       	std	Y+3, r22	; 0x03
     36c:	7c 83       	std	Y+4, r23	; 0x04
     36e:	8d 83       	std	Y+5, r24	; 0x05
     370:	9e 83       	std	Y+6, r25	; 0x06
	float y = parsed[1] - '0';
	x += y;
	
	
	float j = parsed[2] - '0';
     372:	f8 01       	movw	r30, r16
     374:	62 81       	ldd	r22, Z+2	; 0x02
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	60 53       	subi	r22, 0x30	; 48
     37a:	71 09       	sbc	r23, r1
     37c:	07 2e       	mov	r0, r23
     37e:	00 0c       	add	r0, r0
     380:	88 0b       	sbc	r24, r24
     382:	99 0b       	sbc	r25, r25
     384:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
	j *= 10;
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	40 e2       	ldi	r20, 0x20	; 32
     38e:	51 e4       	ldi	r21, 0x41	; 65
     390:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     394:	6b 01       	movw	r12, r22
     396:	7c 01       	movw	r14, r24
	float k = parsed[3] - '0';
	j += k;
	
	float xx = parsed[5] - '0';
     398:	f8 01       	movw	r30, r16
     39a:	65 81       	ldd	r22, Z+5	; 0x05
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	60 53       	subi	r22, 0x30	; 48
     3a0:	71 09       	sbc	r23, r1
     3a2:	07 2e       	mov	r0, r23
     3a4:	00 0c       	add	r0, r0
     3a6:	88 0b       	sbc	r24, r24
     3a8:	99 0b       	sbc	r25, r25
     3aa:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
	xx *= 10;
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e2       	ldi	r20, 0x20	; 32
     3b4:	51 e4       	ldi	r21, 0x41	; 65
     3b6:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     3ba:	4b 01       	movw	r8, r22
     3bc:	5c 01       	movw	r10, r24
	float yy = parsed[6] - '0';
     3be:	f8 01       	movw	r30, r16
     3c0:	66 81       	ldd	r22, Z+6	; 0x06
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	60 53       	subi	r22, 0x30	; 48
     3c6:	71 09       	sbc	r23, r1
     3c8:	07 2e       	mov	r0, r23
     3ca:	00 0c       	add	r0, r0
     3cc:	88 0b       	sbc	r24, r24
     3ce:	99 0b       	sbc	r25, r25
     3d0:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     3d4:	9b 01       	movw	r18, r22
     3d6:	ac 01       	movw	r20, r24
	xx += yy;
     3d8:	c5 01       	movw	r24, r10
     3da:	b4 01       	movw	r22, r8
     3dc:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     3e0:	4b 01       	movw	r8, r22
     3e2:	5c 01       	movw	r10, r24
	
	float jj = parsed[7] - '0';
     3e4:	f8 01       	movw	r30, r16
     3e6:	67 81       	ldd	r22, Z+7	; 0x07
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	60 53       	subi	r22, 0x30	; 48
     3ec:	71 09       	sbc	r23, r1
     3ee:	07 2e       	mov	r0, r23
     3f0:	00 0c       	add	r0, r0
     3f2:	88 0b       	sbc	r24, r24
     3f4:	99 0b       	sbc	r25, r25
     3f6:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
	jj *= 10;
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	40 e2       	ldi	r20, 0x20	; 32
     400:	51 e4       	ldi	r21, 0x41	; 65
     402:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     406:	2b 01       	movw	r4, r22
     408:	3c 01       	movw	r6, r24
	float kk = parsed[8] - '0';
	jj += kk;
	
	xx *= 100; 
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	48 ec       	ldi	r20, 0xC8	; 200
     410:	52 e4       	ldi	r21, 0x42	; 66
     412:	c5 01       	movw	r24, r10
     414:	b4 01       	movw	r22, r8
     416:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     41a:	4b 01       	movw	r8, r22
     41c:	5c 01       	movw	r10, r24
	float yy = parsed[6] - '0';
	xx += yy;
	
	float jj = parsed[7] - '0';
	jj *= 10;
	float kk = parsed[8] - '0';
     41e:	f8 01       	movw	r30, r16
     420:	60 85       	ldd	r22, Z+8	; 0x08
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	60 53       	subi	r22, 0x30	; 48
     426:	71 09       	sbc	r23, r1
     428:	07 2e       	mov	r0, r23
     42a:	00 0c       	add	r0, r0
     42c:	88 0b       	sbc	r24, r24
     42e:	99 0b       	sbc	r25, r25
     430:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     434:	9b 01       	movw	r18, r22
     436:	ac 01       	movw	r20, r24
	jj += kk;
     438:	c3 01       	movw	r24, r6
     43a:	b2 01       	movw	r22, r4
     43c:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     440:	9b 01       	movw	r18, r22
     442:	ac 01       	movw	r20, r24
	
	xx *= 100; 
	xx += jj;
     444:	c5 01       	movw	r24, r10
     446:	b4 01       	movw	r22, r8
     448:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     44c:	4b 01       	movw	r8, r22
     44e:	5c 01       	movw	r10, r24
	x += y;
	
	
	float j = parsed[2] - '0';
	j *= 10;
	float k = parsed[3] - '0';
     450:	f8 01       	movw	r30, r16
     452:	63 81       	ldd	r22, Z+3	; 0x03
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	60 53       	subi	r22, 0x30	; 48
     458:	71 09       	sbc	r23, r1
     45a:	07 2e       	mov	r0, r23
     45c:	00 0c       	add	r0, r0
     45e:	88 0b       	sbc	r24, r24
     460:	99 0b       	sbc	r25, r25
     462:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     466:	9b 01       	movw	r18, r22
     468:	ac 01       	movw	r20, r24
	j += k;
     46a:	c7 01       	movw	r24, r14
     46c:	b6 01       	movw	r22, r12
     46e:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     472:	6b 01       	movw	r12, r22
     474:	7c 01       	movw	r14, r24
	float kk = parsed[8] - '0';
	jj += kk;
	
	xx *= 100; 
	xx += jj;
	xx *= .0001;
     476:	27 e1       	ldi	r18, 0x17	; 23
     478:	37 eb       	ldi	r19, 0xB7	; 183
     47a:	41 ed       	ldi	r20, 0xD1	; 209
     47c:	58 e3       	ldi	r21, 0x38	; 56
     47e:	c5 01       	movw	r24, r10
     480:	b4 01       	movw	r22, r8
     482:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     486:	9b 01       	movw	r18, r22
     488:	ac 01       	movw	r20, r24
	DegLat = x + ((j+xx) / 60);
     48a:	c7 01       	movw	r24, r14
     48c:	b6 01       	movw	r22, r12
     48e:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e7       	ldi	r20, 0x70	; 112
     498:	52 e4       	ldi	r21, 0x42	; 66
     49a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__divsf3>
     49e:	6b 01       	movw	r12, r22
     4a0:	7c 01       	movw	r14, r24
	parsed = strtok(NULL, s);
	//Latitude
	parsed = strtok(NULL, s);
	float x = parsed[0] - '0';
	x *= 10;
	float y = parsed[1] - '0';
     4a2:	f8 01       	movw	r30, r16
     4a4:	81 81       	ldd	r24, Z+1	; 0x01
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	c0 97       	sbiw	r24, 0x30	; 48
     4aa:	bc 01       	movw	r22, r24
     4ac:	99 0f       	add	r25, r25
     4ae:	88 0b       	sbc	r24, r24
     4b0:	99 0b       	sbc	r25, r25
     4b2:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     4b6:	9b 01       	movw	r18, r22
     4b8:	ac 01       	movw	r20, r24
	x += y;
     4ba:	6b 81       	ldd	r22, Y+3	; 0x03
     4bc:	7c 81       	ldd	r23, Y+4	; 0x04
     4be:	8d 81       	ldd	r24, Y+5	; 0x05
     4c0:	9e 81       	ldd	r25, Y+6	; 0x06
     4c2:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     4c6:	9b 01       	movw	r18, r22
     4c8:	ac 01       	movw	r20, r24
	jj += kk;
	
	xx *= 100; 
	xx += jj;
	xx *= .0001;
	DegLat = x + ((j+xx) / 60);
     4ca:	c7 01       	movw	r24, r14
     4cc:	b6 01       	movw	r22, r12
     4ce:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     4d2:	60 93 06 04 	sts	0x0406, r22
     4d6:	70 93 07 04 	sts	0x0407, r23
     4da:	80 93 08 04 	sts	0x0408, r24
     4de:	90 93 09 04 	sts	0x0409, r25
	
	//NorthSouth Indicator
	NSInd = strtok(NULL, s);
     4e2:	be 01       	movw	r22, r28
     4e4:	6f 5f       	subi	r22, 0xFF	; 255
     4e6:	7f 4f       	sbci	r23, 0xFF	; 255
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <strtok>
     4f0:	90 93 fd 03 	sts	0x03FD, r25
     4f4:	80 93 fc 03 	sts	0x03FC, r24
	
		if(EWInd[0] == 'S' || EWInd[0] == 's' )		
     4f8:	e0 91 fa 03 	lds	r30, 0x03FA
     4fc:	f0 91 fb 03 	lds	r31, 0x03FB
     500:	80 81       	ld	r24, Z
     502:	8f 7d       	andi	r24, 0xDF	; 223
     504:	83 35       	cpi	r24, 0x53	; 83
     506:	89 f4       	brne	.+34     	; 0x52a <_Z9ParseDataPc+0x250>
		DegLat *= -1;
     508:	80 91 06 04 	lds	r24, 0x0406
     50c:	90 91 07 04 	lds	r25, 0x0407
     510:	a0 91 08 04 	lds	r26, 0x0408
     514:	b0 91 09 04 	lds	r27, 0x0409
     518:	b0 58       	subi	r27, 0x80	; 128
     51a:	80 93 06 04 	sts	0x0406, r24
     51e:	90 93 07 04 	sts	0x0407, r25
     522:	a0 93 08 04 	sts	0x0408, r26
     526:	b0 93 09 04 	sts	0x0409, r27
		
	//Longitude
	parsed = strtok(NULL, s);
     52a:	be 01       	movw	r22, r28
     52c:	6f 5f       	subi	r22, 0xFF	; 255
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <strtok>
     538:	8c 01       	movw	r16, r24
		float z = parsed[0] - '0';
     53a:	fc 01       	movw	r30, r24
     53c:	60 81       	ld	r22, Z
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	60 53       	subi	r22, 0x30	; 48
     542:	71 09       	sbc	r23, r1
     544:	07 2e       	mov	r0, r23
     546:	00 0c       	add	r0, r0
     548:	88 0b       	sbc	r24, r24
     54a:	99 0b       	sbc	r25, r25
     54c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     550:	6b 83       	std	Y+3, r22	; 0x03
     552:	7c 83       	std	Y+4, r23	; 0x04
     554:	8d 83       	std	Y+5, r24	; 0x05
     556:	9e 83       	std	Y+6, r25	; 0x06
		z *= 100;
		x = parsed[1] - '0';
     558:	f8 01       	movw	r30, r16
     55a:	61 81       	ldd	r22, Z+1	; 0x01
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	60 53       	subi	r22, 0x30	; 48
     560:	71 09       	sbc	r23, r1
     562:	07 2e       	mov	r0, r23
     564:	00 0c       	add	r0, r0
     566:	88 0b       	sbc	r24, r24
     568:	99 0b       	sbc	r25, r25
     56a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
		x *= 10;
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e2       	ldi	r20, 0x20	; 32
     574:	51 e4       	ldi	r21, 0x41	; 65
     576:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     57a:	6b 01       	movw	r12, r22
     57c:	7c 01       	movw	r14, r24
		y = parsed[2] - '0';
     57e:	f8 01       	movw	r30, r16
     580:	82 81       	ldd	r24, Z+2	; 0x02
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	c0 97       	sbiw	r24, 0x30	; 48
     586:	bc 01       	movw	r22, r24
     588:	99 0f       	add	r25, r25
     58a:	88 0b       	sbc	r24, r24
     58c:	99 0b       	sbc	r25, r25
     58e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     592:	9b 01       	movw	r18, r22
     594:	ac 01       	movw	r20, r24
		x += y;
     596:	c7 01       	movw	r24, r14
     598:	b6 01       	movw	r22, r12
     59a:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     59e:	6f 83       	std	Y+7, r22	; 0x07
     5a0:	78 87       	std	Y+8, r23	; 0x08
     5a2:	89 87       	std	Y+9, r24	; 0x09
     5a4:	9a 87       	std	Y+10, r25	; 0x0a
		x += z;
		
		
		j = parsed[3] - '0';
     5a6:	f8 01       	movw	r30, r16
     5a8:	63 81       	ldd	r22, Z+3	; 0x03
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	60 53       	subi	r22, 0x30	; 48
     5ae:	71 09       	sbc	r23, r1
     5b0:	07 2e       	mov	r0, r23
     5b2:	00 0c       	add	r0, r0
     5b4:	88 0b       	sbc	r24, r24
     5b6:	99 0b       	sbc	r25, r25
     5b8:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
		j *= 10;
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	40 e2       	ldi	r20, 0x20	; 32
     5c2:	51 e4       	ldi	r21, 0x41	; 65
     5c4:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     5c8:	6b 01       	movw	r12, r22
     5ca:	7c 01       	movw	r14, r24
		k = parsed[4] - '0';
		j += k;
		
		xx = parsed[6] - '0';
     5cc:	f8 01       	movw	r30, r16
     5ce:	66 81       	ldd	r22, Z+6	; 0x06
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	60 53       	subi	r22, 0x30	; 48
     5d4:	71 09       	sbc	r23, r1
     5d6:	07 2e       	mov	r0, r23
     5d8:	00 0c       	add	r0, r0
     5da:	88 0b       	sbc	r24, r24
     5dc:	99 0b       	sbc	r25, r25
     5de:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
		xx *= 10;
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e2       	ldi	r20, 0x20	; 32
     5e8:	51 e4       	ldi	r21, 0x41	; 65
     5ea:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     5ee:	4b 01       	movw	r8, r22
     5f0:	5c 01       	movw	r10, r24
		yy = parsed[7] - '0';
     5f2:	f8 01       	movw	r30, r16
     5f4:	67 81       	ldd	r22, Z+7	; 0x07
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	60 53       	subi	r22, 0x30	; 48
     5fa:	71 09       	sbc	r23, r1
     5fc:	07 2e       	mov	r0, r23
     5fe:	00 0c       	add	r0, r0
     600:	88 0b       	sbc	r24, r24
     602:	99 0b       	sbc	r25, r25
     604:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     608:	9b 01       	movw	r18, r22
     60a:	ac 01       	movw	r20, r24
		xx += yy;
     60c:	c5 01       	movw	r24, r10
     60e:	b4 01       	movw	r22, r8
     610:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     614:	4b 01       	movw	r8, r22
     616:	5c 01       	movw	r10, r24
		
		jj = parsed[8] - '0';
     618:	f8 01       	movw	r30, r16
     61a:	60 85       	ldd	r22, Z+8	; 0x08
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	60 53       	subi	r22, 0x30	; 48
     620:	71 09       	sbc	r23, r1
     622:	07 2e       	mov	r0, r23
     624:	00 0c       	add	r0, r0
     626:	88 0b       	sbc	r24, r24
     628:	99 0b       	sbc	r25, r25
     62a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
		jj *= 10;
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 e2       	ldi	r20, 0x20	; 32
     634:	51 e4       	ldi	r21, 0x41	; 65
     636:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     63a:	2b 01       	movw	r4, r22
     63c:	3c 01       	movw	r6, r24
		kk = parsed[9] - '0';
		jj += kk;
		
		xx *= 100;
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	48 ec       	ldi	r20, 0xC8	; 200
     644:	52 e4       	ldi	r21, 0x42	; 66
     646:	c5 01       	movw	r24, r10
     648:	b4 01       	movw	r22, r8
     64a:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     64e:	4b 01       	movw	r8, r22
     650:	5c 01       	movw	r10, r24
		yy = parsed[7] - '0';
		xx += yy;
		
		jj = parsed[8] - '0';
		jj *= 10;
		kk = parsed[9] - '0';
     652:	f8 01       	movw	r30, r16
     654:	61 85       	ldd	r22, Z+9	; 0x09
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	60 53       	subi	r22, 0x30	; 48
     65a:	71 09       	sbc	r23, r1
     65c:	07 2e       	mov	r0, r23
     65e:	00 0c       	add	r0, r0
     660:	88 0b       	sbc	r24, r24
     662:	99 0b       	sbc	r25, r25
     664:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     668:	9b 01       	movw	r18, r22
     66a:	ac 01       	movw	r20, r24
		jj += kk;
     66c:	c3 01       	movw	r24, r6
     66e:	b2 01       	movw	r22, r4
     670:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     674:	9b 01       	movw	r18, r22
     676:	ac 01       	movw	r20, r24
		
		xx *= 100;
		xx += jj;
     678:	c5 01       	movw	r24, r10
     67a:	b4 01       	movw	r22, r8
     67c:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     680:	4b 01       	movw	r8, r22
     682:	5c 01       	movw	r10, r24
		x += z;
		
		
		j = parsed[3] - '0';
		j *= 10;
		k = parsed[4] - '0';
     684:	f8 01       	movw	r30, r16
     686:	64 81       	ldd	r22, Z+4	; 0x04
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	60 53       	subi	r22, 0x30	; 48
     68c:	71 09       	sbc	r23, r1
     68e:	07 2e       	mov	r0, r23
     690:	00 0c       	add	r0, r0
     692:	88 0b       	sbc	r24, r24
     694:	99 0b       	sbc	r25, r25
     696:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
		j += k;
     69e:	c7 01       	movw	r24, r14
     6a0:	b6 01       	movw	r22, r12
     6a2:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     6a6:	6b 01       	movw	r12, r22
     6a8:	7c 01       	movw	r14, r24
		jj += kk;
		
		xx *= 100;
		xx += jj;
		
		xx *= .0001;
     6aa:	27 e1       	ldi	r18, 0x17	; 23
     6ac:	37 eb       	ldi	r19, 0xB7	; 183
     6ae:	41 ed       	ldi	r20, 0xD1	; 209
     6b0:	58 e3       	ldi	r21, 0x38	; 56
     6b2:	c5 01       	movw	r24, r10
     6b4:	b4 01       	movw	r22, r8
     6b6:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     6ba:	9b 01       	movw	r18, r22
     6bc:	ac 01       	movw	r20, r24
		
		DegLong = x + ((j+xx) / 60);
     6be:	c7 01       	movw	r24, r14
     6c0:	b6 01       	movw	r22, r12
     6c2:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e7       	ldi	r20, 0x70	; 112
     6cc:	52 e4       	ldi	r21, 0x42	; 66
     6ce:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__divsf3>
     6d2:	6b 01       	movw	r12, r22
     6d4:	7c 01       	movw	r14, r24
		DegLat *= -1;
		
	//Longitude
	parsed = strtok(NULL, s);
		float z = parsed[0] - '0';
		z *= 100;
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	48 ec       	ldi	r20, 0xC8	; 200
     6dc:	52 e4       	ldi	r21, 0x42	; 66
     6de:	6b 81       	ldd	r22, Y+3	; 0x03
     6e0:	7c 81       	ldd	r23, Y+4	; 0x04
     6e2:	8d 81       	ldd	r24, Y+5	; 0x05
     6e4:	9e 81       	ldd	r25, Y+6	; 0x06
     6e6:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     6ea:	9b 01       	movw	r18, r22
     6ec:	ac 01       	movw	r20, r24
		x = parsed[1] - '0';
		x *= 10;
		y = parsed[2] - '0';
		x += y;
		x += z;
     6ee:	6f 81       	ldd	r22, Y+7	; 0x07
     6f0:	78 85       	ldd	r23, Y+8	; 0x08
     6f2:	89 85       	ldd	r24, Y+9	; 0x09
     6f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f6:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     6fa:	9b 01       	movw	r18, r22
     6fc:	ac 01       	movw	r20, r24
		xx *= 100;
		xx += jj;
		
		xx *= .0001;
		
		DegLong = x + ((j+xx) / 60);
     6fe:	c7 01       	movw	r24, r14
     700:	b6 01       	movw	r22, r12
     702:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     706:	60 93 02 04 	sts	0x0402, r22
     70a:	70 93 03 04 	sts	0x0403, r23
     70e:	80 93 04 04 	sts	0x0404, r24
     712:	90 93 05 04 	sts	0x0405, r25
	
	
	//EastWest Indicator
	EWInd = strtok(NULL, s);
     716:	be 01       	movw	r22, r28
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <strtok>
     724:	90 93 fb 03 	sts	0x03FB, r25
     728:	80 93 fa 03 	sts	0x03FA, r24
	
	
	if(EWInd[0] == 'W' || EWInd[0] == 'w' )
     72c:	fc 01       	movw	r30, r24
     72e:	80 81       	ld	r24, Z
     730:	8f 7d       	andi	r24, 0xDF	; 223
     732:	87 35       	cpi	r24, 0x57	; 87
     734:	89 f4       	brne	.+34     	; 0x758 <_Z9ParseDataPc+0x47e>
	DegLong *= -1;
     736:	80 91 02 04 	lds	r24, 0x0402
     73a:	90 91 03 04 	lds	r25, 0x0403
     73e:	a0 91 04 04 	lds	r26, 0x0404
     742:	b0 91 05 04 	lds	r27, 0x0405
     746:	b0 58       	subi	r27, 0x80	; 128
     748:	80 93 02 04 	sts	0x0402, r24
     74c:	90 93 03 04 	sts	0x0403, r25
     750:	a0 93 04 04 	sts	0x0404, r26
     754:	b0 93 05 04 	sts	0x0405, r27
	
		parsed = strtok(NULL, s);
     758:	be 01       	movw	r22, r28
     75a:	6f 5f       	subi	r22, 0xFF	; 255
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <strtok>
		
		parsed = strtok(NULL, s);
     766:	be 01       	movw	r22, r28
     768:	6f 5f       	subi	r22, 0xFF	; 255
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <strtok>
     774:	8c 01       	movw	r16, r24
		
		x = parsed[0] - '0';
     776:	fc 01       	movw	r30, r24
     778:	60 81       	ld	r22, Z
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	60 53       	subi	r22, 0x30	; 48
     77e:	71 09       	sbc	r23, r1
     780:	07 2e       	mov	r0, r23
     782:	00 0c       	add	r0, r0
     784:	88 0b       	sbc	r24, r24
     786:	99 0b       	sbc	r25, r25
     788:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     78c:	4b 01       	movw	r8, r22
     78e:	5c 01       	movw	r10, r24
		x *= 100;
		y = parsed[1] - '0';
     790:	f8 01       	movw	r30, r16
     792:	61 81       	ldd	r22, Z+1	; 0x01
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	60 53       	subi	r22, 0x30	; 48
     798:	71 09       	sbc	r23, r1
     79a:	07 2e       	mov	r0, r23
     79c:	00 0c       	add	r0, r0
     79e:	88 0b       	sbc	r24, r24
     7a0:	99 0b       	sbc	r25, r25
     7a2:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     7a6:	2b 01       	movw	r4, r22
     7a8:	3c 01       	movw	r6, r24
		y *= 10;
		j = parsed[2] - '0';
		k = parsed[4] - '0';
     7aa:	f8 01       	movw	r30, r16
     7ac:	64 81       	ldd	r22, Z+4	; 0x04
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	60 53       	subi	r22, 0x30	; 48
     7b2:	71 09       	sbc	r23, r1
     7b4:	07 2e       	mov	r0, r23
     7b6:	00 0c       	add	r0, r0
     7b8:	88 0b       	sbc	r24, r24
     7ba:	99 0b       	sbc	r25, r25
     7bc:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     7c0:	6b 01       	movw	r12, r22
     7c2:	7c 01       	movw	r14, r24
		k*= 0.1f;
		z = parsed[5] - '0';
     7c4:	f8 01       	movw	r30, r16
     7c6:	65 81       	ldd	r22, Z+5	; 0x05
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	60 53       	subi	r22, 0x30	; 48
     7cc:	71 09       	sbc	r23, r1
     7ce:	07 2e       	mov	r0, r23
     7d0:	00 0c       	add	r0, r0
     7d2:	88 0b       	sbc	r24, r24
     7d4:	99 0b       	sbc	r25, r25
     7d6:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     7da:	6b 83       	std	Y+3, r22	; 0x03
     7dc:	7c 83       	std	Y+4, r23	; 0x04
     7de:	8d 83       	std	Y+5, r24	; 0x05
     7e0:	9e 83       	std	Y+6, r25	; 0x06
		parsed = strtok(NULL, s);
		
		parsed = strtok(NULL, s);
		
		x = parsed[0] - '0';
		x *= 100;
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	48 ec       	ldi	r20, 0xC8	; 200
     7e8:	52 e4       	ldi	r21, 0x42	; 66
     7ea:	c5 01       	movw	r24, r10
     7ec:	b4 01       	movw	r22, r8
     7ee:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     7f2:	4b 01       	movw	r8, r22
     7f4:	5c 01       	movw	r10, r24
		y = parsed[1] - '0';
		y *= 10;
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e2       	ldi	r20, 0x20	; 32
     7fc:	51 e4       	ldi	r21, 0x41	; 65
     7fe:	c3 01       	movw	r24, r6
     800:	b2 01       	movw	r22, r4
     802:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
		k = parsed[4] - '0';
		k*= 0.1f;
		z = parsed[5] - '0';
		z*= 0.01f;
		
		x = x + y + j + k + z;
     80a:	c5 01       	movw	r24, r10
     80c:	b4 01       	movw	r22, r8
     80e:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     812:	4b 01       	movw	r8, r22
     814:	5c 01       	movw	r10, r24
		
		x = parsed[0] - '0';
		x *= 100;
		y = parsed[1] - '0';
		y *= 10;
		j = parsed[2] - '0';
     816:	f8 01       	movw	r30, r16
     818:	62 81       	ldd	r22, Z+2	; 0x02
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	60 53       	subi	r22, 0x30	; 48
     81e:	71 09       	sbc	r23, r1
     820:	07 2e       	mov	r0, r23
     822:	00 0c       	add	r0, r0
     824:	88 0b       	sbc	r24, r24
     826:	99 0b       	sbc	r25, r25
     828:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <__floatsisf>
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
		k = parsed[4] - '0';
		k*= 0.1f;
		z = parsed[5] - '0';
		z*= 0.01f;
		
		x = x + y + j + k + z;
     830:	c5 01       	movw	r24, r10
     832:	b4 01       	movw	r22, r8
     834:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     838:	4b 01       	movw	r8, r22
     83a:	5c 01       	movw	r10, r24
		x *= 100;
		y = parsed[1] - '0';
		y *= 10;
		j = parsed[2] - '0';
		k = parsed[4] - '0';
		k*= 0.1f;
     83c:	2d ec       	ldi	r18, 0xCD	; 205
     83e:	3c ec       	ldi	r19, 0xCC	; 204
     840:	4c ec       	ldi	r20, 0xCC	; 204
     842:	5d e3       	ldi	r21, 0x3D	; 61
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     84c:	9b 01       	movw	r18, r22
     84e:	ac 01       	movw	r20, r24
		z = parsed[5] - '0';
		z*= 0.01f;
		
		x = x + y + j + k + z;
     850:	c5 01       	movw	r24, r10
     852:	b4 01       	movw	r22, r8
     854:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
     858:	6b 01       	movw	r12, r22
     85a:	7c 01       	movw	r14, r24
		y *= 10;
		j = parsed[2] - '0';
		k = parsed[4] - '0';
		k*= 0.1f;
		z = parsed[5] - '0';
		z*= 0.01f;
     85c:	2a e0       	ldi	r18, 0x0A	; 10
     85e:	37 ed       	ldi	r19, 0xD7	; 215
     860:	43 e2       	ldi	r20, 0x23	; 35
     862:	5c e3       	ldi	r21, 0x3C	; 60
     864:	6b 81       	ldd	r22, Y+3	; 0x03
     866:	7c 81       	ldd	r23, Y+4	; 0x04
     868:	8d 81       	ldd	r24, Y+5	; 0x05
     86a:	9e 81       	ldd	r25, Y+6	; 0x06
     86c:	0e 94 86 14 	call	0x290c	; 0x290c <__mulsf3>
     870:	9b 01       	movw	r18, r22
     872:	ac 01       	movw	r20, r24
		
		x = x + y + j + k + z;
     874:	c7 01       	movw	r24, r14
     876:	b6 01       	movw	r22, r12
     878:	0e 94 0c 13 	call	0x2618	; 0x2618 <__addsf3>
		
		COG = x;
     87c:	60 93 fe 03 	sts	0x03FE, r22
     880:	70 93 ff 03 	sts	0x03FF, r23
     884:	80 93 00 04 	sts	0x0400, r24
     888:	90 93 01 04 	sts	0x0401, r25
		
		
	
}
     88c:	2a 96       	adiw	r28, 0x0a	; 10
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	df 90       	pop	r13
     8a6:	cf 90       	pop	r12
     8a8:	bf 90       	pop	r11
     8aa:	af 90       	pop	r10
     8ac:	9f 90       	pop	r9
     8ae:	8f 90       	pop	r8
     8b0:	7f 90       	pop	r7
     8b2:	6f 90       	pop	r6
     8b4:	5f 90       	pop	r5
     8b6:	4f 90       	pop	r4
     8b8:	08 95       	ret

000008ba <_GLOBAL__sub_I_DegLat>:
#define GPS_RX_BUFSIZ	128
char cstr[GPS_RX_BUFSIZ];

#if GPS_ON
#include "SoftwareSerial.h"
SoftwareSerial gps(GPS_RX, GPS_TX);
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	47 e0       	ldi	r20, 0x07	; 7
     8be:	68 e0       	ldi	r22, 0x08	; 8
     8c0:	8b e5       	ldi	r24, 0x5B	; 91
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN14SoftwareSerialC1Ehhb>
#ifdef INCLUDE_TEMPERATURE_SENSOR_SHIELD
EXTERN TemperatureSensorShield TemperatureSensor;
#endif

#ifdef INCLUDE_TERMINAL_SHIELD
EXTERN TerminalShield Terminal;
     8c8:	8a e0       	ldi	r24, 0x0A	; 10
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN14TerminalShieldC1Ev>
     8d0:	08 95       	ret

000008d2 <_GLOBAL__sub_D_DegLat>:
     8d2:	8b e5       	ldi	r24, 0x5B	; 91
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN14SoftwareSerialD1Ev>
     8da:	08 95       	ret

000008dc <_Z13getGPSMessagev>:
Return:
none

*/
void getGPSMessage(void)
{
     8dc:	9f 92       	push	r9
     8de:	af 92       	push	r10
     8e0:	bf 92       	push	r11
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
	uint8_t x=0, y=0, isum=0;

	memset(cstr, 0, sizeof(cstr));
     8f0:	80 e8       	ldi	r24, 0x80	; 128
     8f2:	ea e7       	ldi	r30, 0x7A	; 122
     8f4:	f2 e0       	ldi	r31, 0x02	; 2
     8f6:	df 01       	movw	r26, r30
     8f8:	1d 92       	st	X+, r1
     8fa:	8a 95       	dec	r24
     8fc:	e9 f7       	brne	.-6      	; 0x8f8 <_Z13getGPSMessagev+0x1c>
				x = 0;
				cstr[x] = '$';
			}
			
			// if complete message
			if ((cstr[0] == '$') && (cstr[x++] == '\n'))
     8fe:	8f 01       	movw	r16, r30
			
			// if multiple inline messages, then restart
			if ((x != 0) && (cstr[x] == '$'))
			{
				x = 0;
				cstr[x] = '$';
     900:	0f 2e       	mov	r0, r31
     902:	f4 e2       	ldi	r31, 0x24	; 36
     904:	ff 2e       	mov	r15, r31
     906:	f0 2d       	mov	r31, r0
			}
			
			// if complete message
			if ((cstr[0] == '$') && (cstr[x++] == '\n'))
     908:	99 24       	eor	r9, r9
     90a:	93 94       	inc	r9
     90c:	e1 2c       	mov	r14, r1
     90e:	d9 2c       	mov	r13, r9
				
				// convert hex checksum to binary
				isum = strtol(&cstr[x-4], NULL, 16);
				
				// reverse checksum
				for (y=1; y < (x-5); y++) isum ^= cstr[y];
     910:	aa 24       	eor	r10, r10
     912:	a3 94       	inc	r10
     914:	b1 2c       	mov	r11, r1
				x = 0;
				cstr[x] = '$';
			}
			
			// if complete message
			if ((cstr[0] == '$') && (cstr[x++] == '\n'))
     916:	ce 2d       	mov	r28, r14
     918:	01 c0       	rjmp	.+2      	; 0x91c <__stack+0x1d>
     91a:	c8 2f       	mov	r28, r24
	memset(cstr, 0, sizeof(cstr));
	
	// get nmea string
	while (true)
	{
		if (gps.peek() != -1)
     91c:	8b e5       	ldi	r24, 0x5B	; 91
     91e:	92 e0       	ldi	r25, 0x02	; 2
     920:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <_ZN14SoftwareSerial4peekEv>
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	d1 f3       	breq	.-12     	; 0x91c <__stack+0x1d>
		{
			cstr[x] = gps.read();
     928:	8b e5       	ldi	r24, 0x5B	; 91
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <_ZN14SoftwareSerial4readEv>
     930:	ec 2f       	mov	r30, r28
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	e6 58       	subi	r30, 0x86	; 134
     936:	fd 4f       	sbci	r31, 0xFD	; 253
     938:	80 83       	st	Z, r24
			
			// if multiple inline messages, then restart
			if ((x != 0) && (cstr[x] == '$'))
     93a:	cc 23       	and	r28, r28
     93c:	31 f0       	breq	.+12     	; 0x94a <__stack+0x4b>
     93e:	84 32       	cpi	r24, 0x24	; 36
     940:	21 f4       	brne	.+8      	; 0x94a <__stack+0x4b>
			{
				x = 0;
				cstr[x] = '$';
     942:	f8 01       	movw	r30, r16
     944:	f0 82       	st	Z, r15
			}
			
			// if complete message
			if ((cstr[0] == '$') && (cstr[x++] == '\n'))
     946:	cd 2d       	mov	r28, r13
     948:	e9 cf       	rjmp	.-46     	; 0x91c <__stack+0x1d>
     94a:	d8 01       	movw	r26, r16
     94c:	8c 91       	ld	r24, X
     94e:	84 32       	cpi	r24, 0x24	; 36
     950:	29 f7       	brne	.-54     	; 0x91c <__stack+0x1d>
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	8c 0f       	add	r24, r28
     956:	ec 2f       	mov	r30, r28
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	e6 58       	subi	r30, 0x86	; 134
     95c:	fd 4f       	sbci	r31, 0xFD	; 253
     95e:	90 81       	ld	r25, Z
     960:	9a 30       	cpi	r25, 0x0A	; 10
     962:	d9 f6       	brne	.-74     	; 0x91a <__stack+0x1b>
			{
				// nul terminate string before /r/n
				cstr[x-2] = 0;
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	fc 01       	movw	r30, r24
     968:	e8 58       	subi	r30, 0x88	; 136
     96a:	fd 4f       	sbci	r31, 0xFD	; 253
     96c:	10 82       	st	Z, r1

				// if checksum not found
				if (cstr[x-5] != '*')
     96e:	ec 01       	movw	r28, r24
     970:	25 97       	sbiw	r28, 0x05	; 5
     972:	fe 01       	movw	r30, r28
     974:	e6 58       	subi	r30, 0x86	; 134
     976:	fd 4f       	sbci	r31, 0xFD	; 253
     978:	20 81       	ld	r18, Z
     97a:	2a 32       	cpi	r18, 0x2A	; 42
     97c:	61 f6       	brne	.-104    	; 0x916 <__stack+0x17>
					x = 0;
					continue;
				}
				
				// convert hex checksum to binary
				isum = strtol(&cstr[x-4], NULL, 16);
     97e:	40 e1       	ldi	r20, 0x10	; 16
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	8a 58       	subi	r24, 0x8A	; 138
     988:	9d 4f       	sbci	r25, 0xFD	; 253
     98a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <strtol>
				
				// reverse checksum
				for (y=1; y < (x-5); y++) isum ^= cstr[y];
     98e:	c2 30       	cpi	r28, 0x02	; 2
     990:	d1 05       	cpc	r29, r1
     992:	74 f0       	brlt	.+28     	; 0x9b0 <__stack+0xb1>
     994:	8a 2d       	mov	r24, r10
     996:	9b 2d       	mov	r25, r11
     998:	29 2d       	mov	r18, r9
     99a:	fc 01       	movw	r30, r24
     99c:	e6 58       	subi	r30, 0x86	; 134
     99e:	fd 4f       	sbci	r31, 0xFD	; 253
     9a0:	80 81       	ld	r24, Z
     9a2:	68 27       	eor	r22, r24
     9a4:	2f 5f       	subi	r18, 0xFF	; 255
     9a6:	82 2f       	mov	r24, r18
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	8c 17       	cp	r24, r28
     9ac:	9d 07       	cpc	r25, r29
     9ae:	ac f3       	brlt	.-22     	; 0x99a <__stack+0x9b>
				
				// if invalid checksum
				if (isum != 0)
     9b0:	61 11       	cpse	r22, r1
     9b2:	b1 cf       	rjmp	.-158    	; 0x916 <__stack+0x17>
				// else valid message
				break;
			}
		}
	}
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	bf 90       	pop	r11
     9c4:	af 90       	pop	r10
     9c6:	9f 90       	pop	r9
     9c8:	08 95       	ret

000009ca <main>:
Return:
false

*/
int main(void)
{
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	e2 97       	sbiw	r28, 0x32	; 50
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
	// variables
	
	init();
     9de:	0e 94 3d 08 	call	0x107a	; 0x107a <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     9e2:	26 e0       	ldi	r18, 0x06	; 6
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	52 ec       	ldi	r21, 0xC2	; 194
     9e8:	61 e0       	ldi	r22, 0x01	; 1
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	8a e0       	ldi	r24, 0x0A	; 10
     9ee:	94 e0       	ldi	r25, 0x04	; 4
     9f0:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN14HardwareSerial5beginEmh>
	#if TRM_ON
	Serial.begin(115200);
	#endif
	
	#if ONE_ON
	OneSheeld.begin();
     9f4:	80 eb       	ldi	r24, 0xB0	; 176
     9f6:	94 e0       	ldi	r25, 0x04	; 4
     9f8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN14OneSheeldClass5beginEv>
	*/
	#endif
	
	// enable GPS sending GPRMC message
	#if GPS_ON
	gps.begin(9600);
     9fc:	40 e8       	ldi	r20, 0x80	; 128
     9fe:	55 e2       	ldi	r21, 0x25	; 37
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	8b e5       	ldi	r24, 0x5B	; 91
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	0e 94 8d 11 	call	0x231a	; 0x231a <_ZN14SoftwareSerial5beginEl>
	gps.println(PMTK_SET_NMEA_UPDATE_1HZ);
     a0c:	66 e0       	ldi	r22, 0x06	; 6
     a0e:	71 e0       	ldi	r23, 0x01	; 1
     a10:	8b e5       	ldi	r24, 0x5B	; 91
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN5Print7printlnEPKc>
	gps.println(PMTK_API_SET_FIX_CTL_1HZ);
     a18:	67 e1       	ldi	r22, 0x17	; 23
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	8b e5       	ldi	r24, 0x5B	; 91
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN5Print7printlnEPKc>
	gps.println(PMTK_SET_NMEA_OUTPUT_RMC);
     a24:	60 e3       	ldi	r22, 0x30	; 48
     a26:	71 e0       	ldi	r23, 0x01	; 1
     a28:	8b e5       	ldi	r24, 0x5B	; 91
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN5Print7printlnEPKc>
		//Serial.println(cstr);
		ParseData(cstr);
		float theDist = CalculateDistance(DegLong, DegLat, -81.3056f ,28.5953f);
		
		char lat[12];
		dtostrf(DegLat, 4,4,lat);
     a30:	3e 01       	movw	r6, r28
     a32:	85 e2       	ldi	r24, 0x25	; 37
     a34:	68 0e       	add	r6, r24
     a36:	71 1c       	adc	r7, r1
		char lon[12];
		dtostrf(DegLong, 4,4,lon);
     a38:	4e 01       	movw	r8, r28
     a3a:	99 e1       	ldi	r25, 0x19	; 25
     a3c:	89 0e       	add	r8, r25
     a3e:	91 1c       	adc	r9, r1
				char co[12];
				dtostrf(COG, 3,2,co);
     a40:	de 01       	movw	r26, r28
     a42:	1d 96       	adiw	r26, 0x0d	; 13
     a44:	ba ab       	std	Y+50, r27	; 0x32
     a46:	a9 ab       	std	Y+49, r26	; 0x31
	#endif
	
	while (true)
	{
		// returns with message once a second
		getGPSMessage();
     a48:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z13getGPSMessagev>
		#endif

		#if TRM_ON
		// print debug information to Serial Terminal
		//Serial.println(cstr);
		ParseData(cstr);
     a4c:	8a e7       	ldi	r24, 0x7A	; 122
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z9ParseDataPc>
		float theDist = CalculateDistance(DegLong, DegLat, -81.3056f ,28.5953f);
     a54:	20 90 06 04 	lds	r2, 0x0406
     a58:	30 90 07 04 	lds	r3, 0x0407
     a5c:	40 90 08 04 	lds	r4, 0x0408
     a60:	50 90 09 04 	lds	r5, 0x0409
     a64:	60 91 02 04 	lds	r22, 0x0402
     a68:	70 91 03 04 	lds	r23, 0x0403
     a6c:	80 91 04 04 	lds	r24, 0x0404
     a70:	90 91 05 04 	lds	r25, 0x0405
     a74:	0f 2e       	mov	r0, r31
     a76:	fd e2       	ldi	r31, 0x2D	; 45
     a78:	af 2e       	mov	r10, r31
     a7a:	f3 ec       	ldi	r31, 0xC3	; 195
     a7c:	bf 2e       	mov	r11, r31
     a7e:	f4 ee       	ldi	r31, 0xE4	; 228
     a80:	cf 2e       	mov	r12, r31
     a82:	f1 e4       	ldi	r31, 0x41	; 65
     a84:	df 2e       	mov	r13, r31
     a86:	f0 2d       	mov	r31, r0
     a88:	18 e7       	ldi	r17, 0x78	; 120
     a8a:	e1 2e       	mov	r14, r17
     a8c:	1c e9       	ldi	r17, 0x9C	; 156
     a8e:	f1 2e       	mov	r15, r17
     a90:	02 ea       	ldi	r16, 0xA2	; 162
     a92:	12 ec       	ldi	r17, 0xC2	; 194
     a94:	a2 01       	movw	r20, r4
     a96:	91 01       	movw	r18, r2
     a98:	0e 94 0c 01 	call	0x218	; 0x218 <_Z17CalculateDistanceffff>
     a9c:	6b 01       	movw	r12, r22
     a9e:	7c 01       	movw	r14, r24
		
		char lat[12];
		dtostrf(DegLat, 4,4,lat);
     aa0:	83 01       	movw	r16, r6
     aa2:	24 e0       	ldi	r18, 0x04	; 4
     aa4:	44 e0       	ldi	r20, 0x04	; 4
     aa6:	c2 01       	movw	r24, r4
     aa8:	b1 01       	movw	r22, r2
     aaa:	0e 94 40 15 	call	0x2a80	; 0x2a80 <dtostrf>
		char lon[12];
		dtostrf(DegLong, 4,4,lon);
     aae:	60 91 02 04 	lds	r22, 0x0402
     ab2:	70 91 03 04 	lds	r23, 0x0403
     ab6:	80 91 04 04 	lds	r24, 0x0404
     aba:	90 91 05 04 	lds	r25, 0x0405
     abe:	84 01       	movw	r16, r8
     ac0:	24 e0       	ldi	r18, 0x04	; 4
     ac2:	44 e0       	ldi	r20, 0x04	; 4
     ac4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <dtostrf>
				char co[12];
				dtostrf(COG, 3,2,co);
     ac8:	60 91 fe 03 	lds	r22, 0x03FE
     acc:	70 91 ff 03 	lds	r23, 0x03FF
     ad0:	80 91 00 04 	lds	r24, 0x0400
     ad4:	90 91 01 04 	lds	r25, 0x0401
     ad8:	8e 01       	movw	r16, r28
     ada:	03 5f       	subi	r16, 0xF3	; 243
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
     ade:	22 e0       	ldi	r18, 0x02	; 2
     ae0:	43 e0       	ldi	r20, 0x03	; 3
     ae2:	0e 94 40 15 	call	0x2a80	; 0x2a80 <dtostrf>
		sprintf(PrintInfo, "Latitude: %s %s Longitude: %s %s COG: %s", lat, NSInd, lon, EWInd, co);
     ae6:	ba a9       	ldd	r27, Y+50	; 0x32
     ae8:	bf 93       	push	r27
     aea:	89 a9       	ldd	r24, Y+49	; 0x31
     aec:	8f 93       	push	r24
     aee:	80 91 fb 03 	lds	r24, 0x03FB
     af2:	8f 93       	push	r24
     af4:	80 91 fa 03 	lds	r24, 0x03FA
     af8:	8f 93       	push	r24
     afa:	9f 92       	push	r9
     afc:	8f 92       	push	r8
     afe:	80 91 fd 03 	lds	r24, 0x03FD
     b02:	8f 93       	push	r24
     b04:	80 91 fc 03 	lds	r24, 0x03FC
     b08:	8f 93       	push	r24
     b0a:	7f 92       	push	r7
     b0c:	6f 92       	push	r6
     b0e:	a2 e6       	ldi	r26, 0x62	; 98
     b10:	b1 e0       	ldi	r27, 0x01	; 1
     b12:	bf 93       	push	r27
     b14:	af 93       	push	r26
     b16:	aa ef       	ldi	r26, 0xFA	; 250
     b18:	b2 e0       	ldi	r27, 0x02	; 2
     b1a:	bf 93       	push	r27
     b1c:	af 93       	push	r26
     b1e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <sprintf>
		//Serial.println(PrintInfo);
		//Serial.println(theDist);
		
		Terminal.println(PrintInfo);
     b22:	6a ef       	ldi	r22, 0xFA	; 250
     b24:	72 e0       	ldi	r23, 0x02	; 2
     b26:	80 e1       	ldi	r24, 0x10	; 16
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN12PrintlnClass7printlnEPKc>
		
		char dis[12];
		dtostrf(theDist, 4,4,dis);
     b2e:	0c 50       	subi	r16, 0x0C	; 12
     b30:	11 09       	sbc	r17, r1
     b32:	24 e0       	ldi	r18, 0x04	; 4
     b34:	44 e0       	ldi	r20, 0x04	; 4
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <dtostrf>
		Terminal.println(dis);
     b3e:	b8 01       	movw	r22, r16
     b40:	80 e1       	ldi	r24, 0x10	; 16
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 66 0d 	call	0x1acc	; 0x1acc <_ZN12PrintlnClass7printlnEPKc>
	
		#endif
		
		// if button pressed, set new target

		if (serialEventRun) serialEventRun();
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	8f ed       	ldi	r24, 0xDF	; 223
     b54:	95 e0       	ldi	r25, 0x05	; 5
     b56:	89 2b       	or	r24, r25
     b58:	09 f4       	brne	.+2      	; 0xb5c <main+0x192>
     b5a:	76 cf       	rjmp	.-276    	; 0xa48 <main+0x7e>
     b5c:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z14serialEventRunv>
	}
	
	return(false);
     b60:	73 cf       	rjmp	.-282    	; 0xa48 <main+0x7e>

00000b62 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     b62:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     b64:	91 8d       	ldd	r25, Z+25	; 0x19
     b66:	22 8d       	ldd	r18, Z+26	; 0x1a
     b68:	89 2f       	mov	r24, r25
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	80 5c       	subi	r24, 0xC0	; 192
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	82 1b       	sub	r24, r18
     b72:	91 09       	sbc	r25, r1
}
     b74:	8f 73       	andi	r24, 0x3F	; 63
     b76:	99 27       	eor	r25, r25
     b78:	08 95       	ret

00000b7a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     b7a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     b7c:	91 8d       	ldd	r25, Z+25	; 0x19
     b7e:	82 8d       	ldd	r24, Z+26	; 0x1a
     b80:	98 17       	cp	r25, r24
     b82:	31 f0       	breq	.+12     	; 0xb90 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     b84:	82 8d       	ldd	r24, Z+26	; 0x1a
     b86:	e8 0f       	add	r30, r24
     b88:	f1 1d       	adc	r31, r1
     b8a:	85 8d       	ldd	r24, Z+29	; 0x1d
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b90:	8f ef       	ldi	r24, 0xFF	; 255
     b92:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     b94:	08 95       	ret

00000b96 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     b96:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     b98:	91 8d       	ldd	r25, Z+25	; 0x19
     b9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     b9c:	98 17       	cp	r25, r24
     b9e:	61 f0       	breq	.+24     	; 0xbb8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     ba0:	82 8d       	ldd	r24, Z+26	; 0x1a
     ba2:	df 01       	movw	r26, r30
     ba4:	a8 0f       	add	r26, r24
     ba6:	b1 1d       	adc	r27, r1
     ba8:	5d 96       	adiw	r26, 0x1d	; 29
     baa:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     bac:	92 8d       	ldd	r25, Z+26	; 0x1a
     bae:	9f 5f       	subi	r25, 0xFF	; 255
     bb0:	9f 73       	andi	r25, 0x3F	; 63
     bb2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     bbc:	08 95       	ret

00000bbe <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     bbe:	8f e4       	ldi	r24, 0x4F	; 79
     bc0:	97 e0       	ldi	r25, 0x07	; 7
     bc2:	89 2b       	or	r24, r25
     bc4:	49 f0       	breq	.+18     	; 0xbd8 <_Z14serialEventRunv+0x1a>
     bc6:	8f e4       	ldi	r24, 0x4F	; 79
     bc8:	9d e0       	ldi	r25, 0x0D	; 13
     bca:	89 2b       	or	r24, r25
     bcc:	29 f0       	breq	.+10     	; 0xbd8 <_Z14serialEventRunv+0x1a>
     bce:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z17Serial0_availablev>
     bd2:	81 11       	cpse	r24, r1
     bd4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_Z11serialEventv>
     bd8:	08 95       	ret

00000bda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     bda:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     bdc:	84 8d       	ldd	r24, Z+28	; 0x1c
     bde:	df 01       	movw	r26, r30
     be0:	a8 0f       	add	r26, r24
     be2:	b1 1d       	adc	r27, r1
     be4:	a3 5a       	subi	r26, 0xA3	; 163
     be6:	bf 4f       	sbci	r27, 0xFF	; 255
     be8:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     bea:	24 8d       	ldd	r18, Z+28	; 0x1c
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	2f 5f       	subi	r18, 0xFF	; 255
     bf0:	3f 4f       	sbci	r19, 0xFF	; 255
     bf2:	2f 73       	andi	r18, 0x3F	; 63
     bf4:	30 78       	andi	r19, 0x80	; 128
     bf6:	33 23       	and	r19, r19
     bf8:	34 f4       	brge	.+12     	; 0xc06 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     bfa:	21 50       	subi	r18, 0x01	; 1
     bfc:	31 09       	sbc	r19, r1
     bfe:	20 6c       	ori	r18, 0xC0	; 192
     c00:	3f 6f       	ori	r19, 0xFF	; 255
     c02:	2f 5f       	subi	r18, 0xFF	; 255
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
     c06:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     c08:	a6 89       	ldd	r26, Z+22	; 0x16
     c0a:	b7 89       	ldd	r27, Z+23	; 0x17
     c0c:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     c0e:	a0 89       	ldd	r26, Z+16	; 0x10
     c10:	b1 89       	ldd	r27, Z+17	; 0x11
     c12:	8c 91       	ld	r24, X
     c14:	80 64       	ori	r24, 0x40	; 64
     c16:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     c18:	93 8d       	ldd	r25, Z+27	; 0x1b
     c1a:	84 8d       	ldd	r24, Z+28	; 0x1c
     c1c:	98 13       	cpse	r25, r24
     c1e:	06 c0       	rjmp	.+12     	; 0xc2c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     c20:	02 88       	ldd	r0, Z+18	; 0x12
     c22:	f3 89       	ldd	r31, Z+19	; 0x13
     c24:	e0 2d       	mov	r30, r0
     c26:	80 81       	ld	r24, Z
     c28:	8f 7d       	andi	r24, 0xDF	; 223
     c2a:	80 83       	st	Z, r24
     c2c:	08 95       	ret

00000c2e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     c34:	88 8d       	ldd	r24, Y+24	; 0x18
     c36:	81 11       	cpse	r24, r1
     c38:	0f c0       	rjmp	.+30     	; 0xc58 <_ZN14HardwareSerial5flushEv+0x2a>
     c3a:	18 c0       	rjmp	.+48     	; 0xc6c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	07 fc       	sbrc	r0, 7
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <_ZN14HardwareSerial5flushEv+0x2e>
     c42:	90 81       	ld	r25, Z
     c44:	95 ff       	sbrs	r25, 5
     c46:	0a c0       	rjmp	.+20     	; 0xc5c <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     c48:	a8 89       	ldd	r26, Y+16	; 0x10
     c4a:	b9 89       	ldd	r27, Y+17	; 0x11
     c4c:	8c 91       	ld	r24, X
     c4e:	85 ff       	sbrs	r24, 5
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
     c52:	ce 01       	movw	r24, r28
     c54:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     c58:	ea 89       	ldd	r30, Y+18	; 0x12
     c5a:	fb 89       	ldd	r31, Y+19	; 0x13
     c5c:	90 81       	ld	r25, Z
     c5e:	95 fd       	sbrc	r25, 5
     c60:	ed cf       	rjmp	.-38     	; 0xc3c <_ZN14HardwareSerial5flushEv+0xe>
     c62:	a8 89       	ldd	r26, Y+16	; 0x10
     c64:	b9 89       	ldd	r27, Y+17	; 0x11
     c66:	8c 91       	ld	r24, X
     c68:	86 ff       	sbrs	r24, 6
     c6a:	e8 cf       	rjmp	.-48     	; 0xc3c <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	fc 01       	movw	r30, r24
  _written = true;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     c80:	93 8d       	ldd	r25, Z+27	; 0x1b
     c82:	84 8d       	ldd	r24, Z+28	; 0x1c
     c84:	98 13       	cpse	r25, r24
     c86:	22 c0       	rjmp	.+68     	; 0xccc <_ZN14HardwareSerial5writeEh+0x5a>
     c88:	a0 89       	ldd	r26, Z+16	; 0x10
     c8a:	b1 89       	ldd	r27, Z+17	; 0x11
     c8c:	8c 91       	ld	r24, X
     c8e:	85 fd       	sbrc	r24, 5
     c90:	2f c0       	rjmp	.+94     	; 0xcf0 <_ZN14HardwareSerial5writeEh+0x7e>
     c92:	1c c0       	rjmp	.+56     	; 0xccc <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	07 fc       	sbrc	r0, 7
     c98:	08 c0       	rjmp	.+16     	; 0xcaa <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     c9a:	e8 89       	ldd	r30, Y+16	; 0x10
     c9c:	f9 89       	ldd	r31, Y+17	; 0x11
     c9e:	80 81       	ld	r24, Z
     ca0:	85 ff       	sbrs	r24, 5
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
     ca4:	ce 01       	movw	r24, r28
     ca6:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cac:	09 17       	cp	r16, r25
     cae:	91 f3       	breq	.-28     	; 0xc94 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb2:	fe 01       	movw	r30, r28
     cb4:	e8 0f       	add	r30, r24
     cb6:	f1 1d       	adc	r31, r1
     cb8:	e3 5a       	subi	r30, 0xA3	; 163
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     cbe:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     cc0:	ea 89       	ldd	r30, Y+18	; 0x12
     cc2:	fb 89       	ldd	r31, Y+19	; 0x13
     cc4:	80 81       	ld	r24, Z
     cc6:	80 62       	ori	r24, 0x20	; 32
     cc8:	80 83       	st	Z, r24
  
  return 1;
     cca:	1b c0       	rjmp	.+54     	; 0xd02 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     ccc:	23 8d       	ldd	r18, Z+27	; 0x1b
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	2f 5f       	subi	r18, 0xFF	; 255
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	2f 73       	andi	r18, 0x3F	; 63
     cd6:	30 78       	andi	r19, 0x80	; 128
     cd8:	33 23       	and	r19, r19
     cda:	34 f4       	brge	.+12     	; 0xce8 <_ZN14HardwareSerial5writeEh+0x76>
     cdc:	21 50       	subi	r18, 0x01	; 1
     cde:	31 09       	sbc	r19, r1
     ce0:	20 6c       	ori	r18, 0xC0	; 192
     ce2:	3f 6f       	ori	r19, 0xFF	; 255
     ce4:	2f 5f       	subi	r18, 0xFF	; 255
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
     ce8:	16 2f       	mov	r17, r22
     cea:	ef 01       	movw	r28, r30
     cec:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     cee:	dd cf       	rjmp	.-70     	; 0xcaa <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     cf0:	a6 89       	ldd	r26, Z+22	; 0x16
     cf2:	b7 89       	ldd	r27, Z+23	; 0x17
     cf4:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     cf6:	00 88       	ldd	r0, Z+16	; 0x10
     cf8:	f1 89       	ldd	r31, Z+17	; 0x11
     cfa:	e0 2d       	mov	r30, r0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret

00000d10 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     d10:	bf 92       	push	r11
     d12:	cf 92       	push	r12
     d14:	df 92       	push	r13
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	ec 01       	movw	r28, r24
     d24:	6a 01       	movw	r12, r20
     d26:	7b 01       	movw	r14, r22
     d28:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     d2a:	e8 89       	ldd	r30, Y+16	; 0x10
     d2c:	f9 89       	ldd	r31, Y+17	; 0x11
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d32:	41 15       	cp	r20, r1
     d34:	51 4e       	sbci	r21, 0xE1	; 225
     d36:	61 05       	cpc	r22, r1
     d38:	71 05       	cpc	r23, r1
     d3a:	b1 f0       	breq	.+44     	; 0xd68 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	79 e0       	ldi	r23, 0x09	; 9
     d40:	8d e3       	ldi	r24, 0x3D	; 61
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a7 01       	movw	r20, r14
     d46:	96 01       	movw	r18, r12
     d48:	0e 94 c4 12 	call	0x2588	; 0x2588 <__udivmodsi4>
     d4c:	89 01       	movw	r16, r18
     d4e:	9a 01       	movw	r18, r20
     d50:	01 50       	subi	r16, 0x01	; 1
     d52:	11 09       	sbc	r17, r1
     d54:	21 09       	sbc	r18, r1
     d56:	31 09       	sbc	r19, r1
     d58:	36 95       	lsr	r19
     d5a:	27 95       	ror	r18
     d5c:	17 95       	ror	r17
     d5e:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d60:	01 15       	cp	r16, r1
     d62:	80 e1       	ldi	r24, 0x10	; 16
     d64:	18 07       	cpc	r17, r24
     d66:	a8 f0       	brcs	.+42     	; 0xd92 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
     d68:	e8 89       	ldd	r30, Y+16	; 0x10
     d6a:	f9 89       	ldd	r31, Y+17	; 0x11
     d6c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     d6e:	60 e8       	ldi	r22, 0x80	; 128
     d70:	74 e8       	ldi	r23, 0x84	; 132
     d72:	8e e1       	ldi	r24, 0x1E	; 30
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	a7 01       	movw	r20, r14
     d78:	96 01       	movw	r18, r12
     d7a:	0e 94 c4 12 	call	0x2588	; 0x2588 <__udivmodsi4>
     d7e:	da 01       	movw	r26, r20
     d80:	c9 01       	movw	r24, r18
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	a1 09       	sbc	r26, r1
     d86:	b1 09       	sbc	r27, r1
     d88:	b6 95       	lsr	r27
     d8a:	a7 95       	ror	r26
     d8c:	97 95       	ror	r25
     d8e:	87 95       	ror	r24
     d90:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     d92:	ec 85       	ldd	r30, Y+12	; 0x0c
     d94:	fd 85       	ldd	r31, Y+13	; 0x0d
     d96:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
     d98:	ee 85       	ldd	r30, Y+14	; 0x0e
     d9a:	ff 85       	ldd	r31, Y+15	; 0x0f
     d9c:	00 83       	st	Z, r16

  _written = false;
     d9e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     da0:	ec 89       	ldd	r30, Y+20	; 0x14
     da2:	fd 89       	ldd	r31, Y+21	; 0x15
     da4:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     da6:	ea 89       	ldd	r30, Y+18	; 0x12
     da8:	fb 89       	ldd	r31, Y+19	; 0x13
     daa:	80 81       	ld	r24, Z
     dac:	80 61       	ori	r24, 0x10	; 16
     dae:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     db0:	ea 89       	ldd	r30, Y+18	; 0x12
     db2:	fb 89       	ldd	r31, Y+19	; 0x13
     db4:	80 81       	ld	r24, Z
     db6:	88 60       	ori	r24, 0x08	; 8
     db8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     dba:	ea 89       	ldd	r30, Y+18	; 0x12
     dbc:	fb 89       	ldd	r31, Y+19	; 0x13
     dbe:	80 81       	ld	r24, Z
     dc0:	80 68       	ori	r24, 0x80	; 128
     dc2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     dc4:	ea 89       	ldd	r30, Y+18	; 0x12
     dc6:	fb 89       	ldd	r31, Y+19	; 0x13
     dc8:	80 81       	ld	r24, Z
     dca:	8f 7d       	andi	r24, 0xDF	; 223
     dcc:	80 83       	st	Z, r24
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	08 95       	ret

00000de2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     de2:	1f 92       	push	r1
     de4:	0f 92       	push	r0
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	2f 93       	push	r18
     dee:	8f 93       	push	r24
     df0:	9f 93       	push	r25
     df2:	af 93       	push	r26
     df4:	bf 93       	push	r27
     df6:	ef 93       	push	r30
     df8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     dfa:	e0 91 1a 04 	lds	r30, 0x041A
     dfe:	f0 91 1b 04 	lds	r31, 0x041B
     e02:	80 81       	ld	r24, Z
     e04:	82 fd       	sbrc	r24, 2
     e06:	14 c0       	rjmp	.+40     	; 0xe30 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     e08:	ea e0       	ldi	r30, 0x0A	; 10
     e0a:	f4 e0       	ldi	r31, 0x04	; 4
     e0c:	a6 89       	ldd	r26, Z+22	; 0x16
     e0e:	b7 89       	ldd	r27, Z+23	; 0x17
     e10:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     e12:	81 8d       	ldd	r24, Z+25	; 0x19
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     e18:	92 8d       	ldd	r25, Z+26	; 0x1a
     e1a:	89 17       	cp	r24, r25
     e1c:	71 f0       	breq	.+28     	; 0xe3a <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     e1e:	df 01       	movw	r26, r30
     e20:	e1 8d       	ldd	r30, Z+25	; 0x19
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	e6 5f       	subi	r30, 0xF6	; 246
     e26:	fb 4f       	sbci	r31, 0xFB	; 251
     e28:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     e2a:	59 96       	adiw	r26, 0x19	; 25
     e2c:	8c 93       	st	X, r24
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     e30:	e0 91 20 04 	lds	r30, 0x0420
     e34:	f0 91 21 04 	lds	r31, 0x0421
     e38:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	2f 91       	pop	r18
     e48:	0f 90       	pop	r0
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	0f 90       	pop	r0
     e4e:	1f 90       	pop	r1
     e50:	18 95       	reti

00000e52 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     e74:	8a e0       	ldi	r24, 0x0A	; 10
     e76:	94 e0       	ldi	r25, 0x04	; 4
     e78:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     e7c:	ff 91       	pop	r31
     e7e:	ef 91       	pop	r30
     e80:	bf 91       	pop	r27
     e82:	af 91       	pop	r26
     e84:	9f 91       	pop	r25
     e86:	8f 91       	pop	r24
     e88:	7f 91       	pop	r23
     e8a:	6f 91       	pop	r22
     e8c:	5f 91       	pop	r21
     e8e:	4f 91       	pop	r20
     e90:	3f 91       	pop	r19
     e92:	2f 91       	pop	r18
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     e9e:	8a e0       	ldi	r24, 0x0A	; 10
     ea0:	94 e0       	ldi	r25, 0x04	; 4
     ea2:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN14HardwareSerial9availableEv>
     ea6:	21 e0       	ldi	r18, 0x01	; 1
     ea8:	89 2b       	or	r24, r25
     eaa:	09 f4       	brne	.+2      	; 0xeae <_Z17Serial0_availablev+0x10>
     eac:	20 e0       	ldi	r18, 0x00	; 0
}
     eae:	82 2f       	mov	r24, r18
     eb0:	08 95       	ret

00000eb2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     eb2:	ea e0       	ldi	r30, 0x0A	; 10
     eb4:	f4 e0       	ldi	r31, 0x04	; 4
     eb6:	13 82       	std	Z+3, r1	; 0x03
     eb8:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     eba:	88 ee       	ldi	r24, 0xE8	; 232
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	a0 e0       	ldi	r26, 0x00	; 0
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	84 83       	std	Z+4, r24	; 0x04
     ec4:	95 83       	std	Z+5, r25	; 0x05
     ec6:	a6 83       	std	Z+6, r26	; 0x06
     ec8:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     eca:	8f e8       	ldi	r24, 0x8F	; 143
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	80 83       	st	Z, r24
     ed2:	85 ec       	ldi	r24, 0xC5	; 197
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	95 87       	std	Z+13, r25	; 0x0d
     ed8:	84 87       	std	Z+12, r24	; 0x0c
     eda:	84 ec       	ldi	r24, 0xC4	; 196
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	97 87       	std	Z+15, r25	; 0x0f
     ee0:	86 87       	std	Z+14, r24	; 0x0e
     ee2:	80 ec       	ldi	r24, 0xC0	; 192
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	91 8b       	std	Z+17, r25	; 0x11
     ee8:	80 8b       	std	Z+16, r24	; 0x10
     eea:	81 ec       	ldi	r24, 0xC1	; 193
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	93 8b       	std	Z+19, r25	; 0x13
     ef0:	82 8b       	std	Z+18, r24	; 0x12
     ef2:	82 ec       	ldi	r24, 0xC2	; 194
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	95 8b       	std	Z+21, r25	; 0x15
     ef8:	84 8b       	std	Z+20, r24	; 0x14
     efa:	86 ec       	ldi	r24, 0xC6	; 198
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	97 8b       	std	Z+23, r25	; 0x17
     f00:	86 8b       	std	Z+22, r24	; 0x16
     f02:	11 8e       	std	Z+25, r1	; 0x19
     f04:	12 8e       	std	Z+26, r1	; 0x1a
     f06:	13 8e       	std	Z+27, r1	; 0x1b
     f08:	14 8e       	std	Z+28, r1	; 0x1c
     f0a:	08 95       	ret

00000f0c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     f0c:	cf 92       	push	r12
     f0e:	df 92       	push	r13
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
     f1c:	41 15       	cp	r20, r1
     f1e:	51 05       	cpc	r21, r1
     f20:	b1 f0       	breq	.+44     	; 0xf4e <_ZN5Print5writeEPKhj+0x42>
     f22:	8c 01       	movw	r16, r24
     f24:	e6 2e       	mov	r14, r22
     f26:	f7 2e       	mov	r15, r23
     f28:	ea 01       	movw	r28, r20
     f2a:	c1 2c       	mov	r12, r1
     f2c:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
     f2e:	d7 01       	movw	r26, r14
     f30:	6d 91       	ld	r22, X+
     f32:	7d 01       	movw	r14, r26
     f34:	d8 01       	movw	r26, r16
     f36:	ed 91       	ld	r30, X+
     f38:	fc 91       	ld	r31, X
     f3a:	01 90       	ld	r0, Z+
     f3c:	f0 81       	ld	r31, Z
     f3e:	e0 2d       	mov	r30, r0
     f40:	c8 01       	movw	r24, r16
     f42:	09 95       	icall
     f44:	c8 0e       	add	r12, r24
     f46:	d9 1e       	adc	r13, r25
     f48:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     f4a:	89 f7       	brne	.-30     	; 0xf2e <_ZN5Print5writeEPKhj+0x22>
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     f4e:	c1 2c       	mov	r12, r1
     f50:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
     f52:	c6 01       	movw	r24, r12
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	df 90       	pop	r13
     f62:	cf 90       	pop	r12
     f64:	08 95       	ret

00000f66 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     f66:	61 15       	cp	r22, r1
     f68:	71 05       	cpc	r23, r1
     f6a:	81 f0       	breq	.+32     	; 0xf8c <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     f6c:	fb 01       	movw	r30, r22
     f6e:	01 90       	ld	r0, Z+
     f70:	00 20       	and	r0, r0
     f72:	e9 f7       	brne	.-6      	; 0xf6e <_ZN5Print5printEPKc+0x8>
     f74:	31 97       	sbiw	r30, 0x01	; 1
     f76:	af 01       	movw	r20, r30
     f78:	46 1b       	sub	r20, r22
     f7a:	57 0b       	sbc	r21, r23
     f7c:	dc 01       	movw	r26, r24
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	02 80       	ldd	r0, Z+2	; 0x02
     f84:	f3 81       	ldd	r31, Z+3	; 0x03
     f86:	e0 2d       	mov	r30, r0
     f88:	09 95       	icall
     f8a:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
     f90:	08 95       	ret

00000f92 <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
     f92:	dc 01       	movw	r26, r24
     f94:	ed 91       	ld	r30, X+
     f96:	fc 91       	ld	r31, X
     f98:	02 80       	ldd	r0, Z+2	; 0x02
     f9a:	f3 81       	ldd	r31, Z+3	; 0x03
     f9c:	e0 2d       	mov	r30, r0
     f9e:	42 e0       	ldi	r20, 0x02	; 2
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	6b e9       	ldi	r22, 0x9B	; 155
     fa4:	71 e0       	ldi	r23, 0x01	; 1
     fa6:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
     fa8:	08 95       	ret

00000faa <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	ec 01       	movw	r28, r24
  size_t n = print(c);
     fb4:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
     fb8:	8c 01       	movw	r16, r24
  n += println();
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN5Print7printlnEv>
  return n;
}
     fc0:	80 0f       	add	r24, r16
     fc2:	91 1f       	adc	r25, r17
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     fe4:	80 91 a8 04 	lds	r24, 0x04A8
     fe8:	90 91 a9 04 	lds	r25, 0x04A9
     fec:	a0 91 aa 04 	lds	r26, 0x04AA
     ff0:	b0 91 ab 04 	lds	r27, 0x04AB
	unsigned char f = timer0_fract;
     ff4:	30 91 a7 04 	lds	r19, 0x04A7

	m += MILLIS_INC;
	f += FRACT_INC;
     ff8:	23 e0       	ldi	r18, 0x03	; 3
     ffa:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     ffc:	2d 37       	cpi	r18, 0x7D	; 125
     ffe:	20 f4       	brcc	.+8      	; 0x1008 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	a1 1d       	adc	r26, r1
    1004:	b1 1d       	adc	r27, r1
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1008:	26 e8       	ldi	r18, 0x86	; 134
    100a:	23 0f       	add	r18, r19
		m += 1;
    100c:	02 96       	adiw	r24, 0x02	; 2
    100e:	a1 1d       	adc	r26, r1
    1010:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1012:	20 93 a7 04 	sts	0x04A7, r18
	timer0_millis = m;
    1016:	80 93 a8 04 	sts	0x04A8, r24
    101a:	90 93 a9 04 	sts	0x04A9, r25
    101e:	a0 93 aa 04 	sts	0x04AA, r26
    1022:	b0 93 ab 04 	sts	0x04AB, r27
	timer0_overflow_count++;
    1026:	80 91 ac 04 	lds	r24, 0x04AC
    102a:	90 91 ad 04 	lds	r25, 0x04AD
    102e:	a0 91 ae 04 	lds	r26, 0x04AE
    1032:	b0 91 af 04 	lds	r27, 0x04AF
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	a1 1d       	adc	r26, r1
    103a:	b1 1d       	adc	r27, r1
    103c:	80 93 ac 04 	sts	0x04AC, r24
    1040:	90 93 ad 04 	sts	0x04AD, r25
    1044:	a0 93 ae 04 	sts	0x04AE, r26
    1048:	b0 93 af 04 	sts	0x04AF, r27
}
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1062:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1064:	f8 94       	cli
	m = timer0_millis;
    1066:	60 91 a8 04 	lds	r22, 0x04A8
    106a:	70 91 a9 04 	lds	r23, 0x04A9
    106e:	80 91 aa 04 	lds	r24, 0x04AA
    1072:	90 91 ab 04 	lds	r25, 0x04AB
	SREG = oldSREG;
    1076:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1078:	08 95       	ret

0000107a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    107a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    107c:	84 b5       	in	r24, 0x24	; 36
    107e:	82 60       	ori	r24, 0x02	; 2
    1080:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1082:	84 b5       	in	r24, 0x24	; 36
    1084:	81 60       	ori	r24, 0x01	; 1
    1086:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1088:	85 b5       	in	r24, 0x25	; 37
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    108e:	85 b5       	in	r24, 0x25	; 37
    1090:	81 60       	ori	r24, 0x01	; 1
    1092:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1094:	ee e6       	ldi	r30, 0x6E	; 110
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	81 60       	ori	r24, 0x01	; 1
    109c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    109e:	e1 e8       	ldi	r30, 0x81	; 129
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    10a4:	80 81       	ld	r24, Z
    10a6:	82 60       	ori	r24, 0x02	; 2
    10a8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    10aa:	80 81       	ld	r24, Z
    10ac:	81 60       	ori	r24, 0x01	; 1
    10ae:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    10b0:	e0 e8       	ldi	r30, 0x80	; 128
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	81 60       	ori	r24, 0x01	; 1
    10b8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    10ba:	e1 eb       	ldi	r30, 0xB1	; 177
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	84 60       	ori	r24, 0x04	; 4
    10c2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    10c4:	e0 eb       	ldi	r30, 0xB0	; 176
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    10ce:	ea e7       	ldi	r30, 0x7A	; 122
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	84 60       	ori	r24, 0x04	; 4
    10d6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    10d8:	80 81       	ld	r24, Z
    10da:	82 60       	ori	r24, 0x02	; 2
    10dc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    10de:	80 81       	ld	r24, Z
    10e0:	81 60       	ori	r24, 0x01	; 1
    10e2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10e4:	80 81       	ld	r24, Z
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    10ea:	10 92 c1 00 	sts	0x00C1, r1
    10ee:	08 95       	ret

000010f0 <_ZN14OneSheeldClassC1ER6Stream>:
// #ifdef INTERNET_SHIELD
byte OneSheeldClass::requestsCounter=0;
HttpRequest ** OneSheeldClass::requestsArray=(HttpRequest**)malloc(sizeof(HttpRequest*)*MAX_NO_OF_REQUESTS);
// #endif
//Class Constructor
OneSheeldClass::OneSheeldClass(Stream &s) :OneSheeldSerial(s)
    10f0:	fc 01       	movw	r30, r24
    10f2:	71 83       	std	Z+1, r23	; 0x01
    10f4:	60 83       	st	Z, r22
{
      shield=0;
    10f6:	16 86       	std	Z+14, r1	; 0x0e
      instance=0;
    10f8:	17 86       	std	Z+15, r1	; 0x0f
      functions=0;
    10fa:	10 8a       	std	Z+16, r1	; 0x10
      counter=0;
    10fc:	11 8a       	std	Z+17, r1	; 0x11
      argumentcounter=0;
    10fe:	12 8a       	std	Z+18, r1	; 0x12
      datalengthcounter=0;
    1100:	13 8a       	std	Z+19, r1	; 0x13
      argumentnumber=0;
    1102:	14 8a       	std	Z+20, r1	; 0x14
      endFrame=0;
    1104:	11 8e       	std	Z+25, r1	; 0x19
      numberOfDataMalloced=0;
    1106:	15 86       	std	Z+13, r1	; 0x0d
      isArgumentsNumberMalloced=false;
    1108:	16 82       	std	Z+6, r1	; 0x06
      isArgumentLengthMalloced=false;
    110a:	17 82       	std	Z+7, r1	; 0x07
      callbacksInterrupts=false;
    110c:	10 92 26 05 	sts	0x0526, r1
      framestart =false;
    1110:	14 86       	std	Z+12, r1	; 0x0c
      isOneSheeldConnected =false;
    1112:	10 86       	std	Z+8, r1	; 0x08
      isAppConnectionCallBack = false;
    1114:	11 86       	std	Z+9, r1	; 0x09
      isShieldFrameCallback = false;
    1116:	12 86       	std	Z+10, r1	; 0x0a
      isSerialDataCallback = false;
    1118:	13 86       	std	Z+11, r1	; 0x0b
    111a:	08 95       	ret

0000111c <_ZN14OneSheeldClass5beginEl>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    111c:	26 e0       	ldi	r18, 0x06	; 6
    111e:	8a e0       	ldi	r24, 0x0A	; 10
    1120:	94 e0       	ldi	r25, 0x04	; 4
    1122:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN14HardwareSerial5beginEmh>
    1126:	08 95       	ret

00001128 <_ZN14OneSheeldClass17addToShieldsArrayEP12ShieldParent>:
  // #endif
}

void OneSheeldClass::addToShieldsArray(ShieldParent * shield)
{
  if(shieldsCounter==SHIELDS_NO) return;
    1128:	e0 91 2c 05 	lds	r30, 0x052C
    112c:	e9 32       	cpi	r30, 0x29	; 41
    112e:	59 f0       	breq	.+22     	; 0x1146 <_ZN14OneSheeldClass17addToShieldsArrayEP12ShieldParent+0x1e>
  shieldsArray[shieldsCounter++] = shield;  
    1130:	21 e0       	ldi	r18, 0x01	; 1
    1132:	2e 0f       	add	r18, r30
    1134:	20 93 2c 05 	sts	0x052C, r18
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	ed 52       	subi	r30, 0x2D	; 45
    1140:	fb 4f       	sbci	r31, 0xFB	; 251
    1142:	91 83       	std	Z+1, r25	; 0x01
    1144:	80 83       	st	Z, r24
    1146:	08 95       	ret

00001148 <_ZN14OneSheeldClass11getShieldIdEv>:
}
//Shield_ID Getter
byte OneSheeldClass::getShieldId()
{
  return shield;
} 
    1148:	fc 01       	movw	r30, r24
    114a:	86 85       	ldd	r24, Z+14	; 0x0e
    114c:	08 95       	ret

0000114e <_ZN14OneSheeldClass13getFunctionIdEv>:
} 
//Funtcion_ID Getter
byte OneSheeldClass::getFunctionId()
{
  return functions;
}
    114e:	fc 01       	movw	r30, r24
    1150:	80 89       	ldd	r24, Z+16	; 0x10
    1152:	08 95       	ret

00001154 <_ZN14OneSheeldClass17getArgumentLengthEh>:
  return argumentnumber;
} 
//ArgumentLength Getter
byte OneSheeldClass::getArgumentLength(byte x)
{
  return argumentL[x];
    1154:	dc 01       	movw	r26, r24
    1156:	57 96       	adiw	r26, 0x17	; 23
    1158:	ed 91       	ld	r30, X+
    115a:	fc 91       	ld	r31, X
    115c:	58 97       	sbiw	r26, 0x18	; 24
    115e:	e6 0f       	add	r30, r22
    1160:	f1 1d       	adc	r31, r1
}
    1162:	80 81       	ld	r24, Z
    1164:	08 95       	ret

00001166 <_ZN14OneSheeldClass15getArgumentDataEh>:
//Data Getter
byte * OneSheeldClass::getArgumentData(byte x)
{
  if(argumentL[x]!=0)
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	dc 01       	movw	r26, r24
    116a:	57 96       	adiw	r26, 0x17	; 23
    116c:	ed 91       	ld	r30, X+
    116e:	fc 91       	ld	r31, X
    1170:	58 97       	sbiw	r26, 0x18	; 24
    1172:	e6 0f       	add	r30, r22
    1174:	f7 1f       	adc	r31, r23
    1176:	20 81       	ld	r18, Z
    1178:	22 23       	and	r18, r18
    117a:	59 f0       	breq	.+22     	; 0x1192 <_ZN14OneSheeldClass15getArgumentDataEh+0x2c>
    return arguments[x];
    117c:	66 0f       	add	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	55 96       	adiw	r26, 0x15	; 21
    1182:	ed 91       	ld	r30, X+
    1184:	fc 91       	ld	r31, X
    1186:	56 97       	sbiw	r26, 0x16	; 22
    1188:	e6 0f       	add	r30, r22
    118a:	f7 1f       	adc	r31, r23
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	08 95       	ret
  else return NULL;
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
}
    1196:	08 95       	ret

00001198 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>:
    if(isSerialDataCallback)
      serialDataCallback(data);
  }
}

void OneSheeldClass::freeMemoryAllocated(){
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	8c 01       	movw	r16, r24
  framestart=false;
    11a2:	dc 01       	movw	r26, r24
    11a4:	1c 96       	adiw	r26, 0x0c	; 12
    11a6:	1c 92       	st	X, r1
    11a8:	1c 97       	sbiw	r26, 0x0c	; 12
  if(isArgumentsNumberMalloced){
    11aa:	16 96       	adiw	r26, 0x06	; 6
    11ac:	8c 91       	ld	r24, X
    11ae:	16 97       	sbiw	r26, 0x06	; 6
    11b0:	88 23       	and	r24, r24
    11b2:	a9 f1       	breq	.+106    	; 0x121e <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0x86>
          for(int i=0;i<numberOfDataMalloced;i++)
    11b4:	1d 96       	adiw	r26, 0x0d	; 13
    11b6:	8c 91       	ld	r24, X
    11b8:	88 23       	and	r24, r24
    11ba:	f9 f0       	breq	.+62     	; 0x11fa <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0x62>
    11bc:	c0 e0       	ldi	r28, 0x00	; 0
    11be:	d0 e0       	ldi	r29, 0x00	; 0
          {
            if(arguments[i]!=NULL)free(arguments[i]);
    11c0:	d8 01       	movw	r26, r16
    11c2:	55 96       	adiw	r26, 0x15	; 21
    11c4:	ed 91       	ld	r30, X+
    11c6:	fc 91       	ld	r31, X
    11c8:	56 97       	sbiw	r26, 0x16	; 22
    11ca:	9e 01       	movw	r18, r28
    11cc:	22 0f       	add	r18, r18
    11ce:	33 1f       	adc	r19, r19
    11d0:	e2 0f       	add	r30, r18
    11d2:	f3 1f       	adc	r31, r19
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	11 f0       	breq	.+4      	; 0x11e0 <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0x48>
    11dc:	0e 94 f5 15 	call	0x2bea	; 0x2bea <free>
            #ifdef DEBUG
            Serial.print("F3 ");
    11e0:	6c ea       	ldi	r22, 0xAC	; 172
    11e2:	71 e0       	ldi	r23, 0x01	; 1
    11e4:	8a e0       	ldi	r24, 0x0A	; 10
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
}

void OneSheeldClass::freeMemoryAllocated(){
  framestart=false;
  if(isArgumentsNumberMalloced){
          for(int i=0;i<numberOfDataMalloced;i++)
    11ec:	21 96       	adiw	r28, 0x01	; 1
    11ee:	f8 01       	movw	r30, r16
    11f0:	25 85       	ldd	r18, Z+13	; 0x0d
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	c2 17       	cp	r28, r18
    11f6:	d3 07       	cpc	r29, r19
    11f8:	1c f3       	brlt	.-58     	; 0x11c0 <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0x28>
            if(arguments[i]!=NULL)free(arguments[i]);
            #ifdef DEBUG
            Serial.print("F3 ");
            #endif
          }
          numberOfDataMalloced=0;
    11fa:	d8 01       	movw	r26, r16
    11fc:	1d 96       	adiw	r26, 0x0d	; 13
    11fe:	1c 92       	st	X, r1
    1200:	1d 97       	sbiw	r26, 0x0d	; 13
          free(arguments);
    1202:	55 96       	adiw	r26, 0x15	; 21
    1204:	8d 91       	ld	r24, X+
    1206:	9c 91       	ld	r25, X
    1208:	56 97       	sbiw	r26, 0x16	; 22
    120a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <free>
          #ifdef DEBUG
          Serial.print("F1 ");
    120e:	60 eb       	ldi	r22, 0xB0	; 176
    1210:	71 e0       	ldi	r23, 0x01	; 1
    1212:	8a e0       	ldi	r24, 0x0A	; 10
    1214:	94 e0       	ldi	r25, 0x04	; 4
    1216:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
          #endif
          isArgumentsNumberMalloced=false;
    121a:	f8 01       	movw	r30, r16
    121c:	16 82       	std	Z+6, r1	; 0x06
        }
        if(isArgumentLengthMalloced){
    121e:	d8 01       	movw	r26, r16
    1220:	17 96       	adiw	r26, 0x07	; 7
    1222:	8c 91       	ld	r24, X
    1224:	17 97       	sbiw	r26, 0x07	; 7
    1226:	88 23       	and	r24, r24
    1228:	71 f0       	breq	.+28     	; 0x1246 <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0xae>
          free(argumentL);
    122a:	57 96       	adiw	r26, 0x17	; 23
    122c:	8d 91       	ld	r24, X+
    122e:	9c 91       	ld	r25, X
    1230:	58 97       	sbiw	r26, 0x18	; 24
    1232:	0e 94 f5 15 	call	0x2bea	; 0x2bea <free>
          #ifdef DEBUG
          Serial.println("F2 ");
    1236:	64 eb       	ldi	r22, 0xB4	; 180
    1238:	71 e0       	ldi	r23, 0x01	; 1
    123a:	8a e0       	ldi	r24, 0x0A	; 10
    123c:	94 e0       	ldi	r25, 0x04	; 4
    123e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN5Print7printlnEPKc>
          #endif
          isArgumentLengthMalloced=false;
    1242:	f8 01       	movw	r30, r16
    1244:	17 82       	std	Z+7, r1	; 0x07
        }
}
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	08 95       	ret

00001250 <_ZN14OneSheeldClass12processFrameEv>:
      shieldsArray[i]->processFrame();
    }
  }
}

void OneSheeldClass::processFrame(){
    1250:	fc 01       	movw	r30, r24
  return instance;
} 
//Funtcion_ID Getter
byte OneSheeldClass::getFunctionId()
{
  return functions;
    1252:	80 89       	ldd	r24, Z+16	; 0x10
}

void OneSheeldClass::processFrame(){
  byte functionId = getFunctionId();
  //Check  the function ID 
  if(functionId == DISCONNECTION_CHECK_FUNCTION)
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	51 f4       	brne	.+20     	; 0x126c <_ZN14OneSheeldClass12processFrameEv+0x1c>
  {
      isOneSheeldConnected=false;
    1258:	10 86       	std	Z+8, r1	; 0x08
      if(isAppConnectionCallBack)(*isAppConnectedCallBack)(isOneSheeldConnected);
    125a:	81 85       	ldd	r24, Z+9	; 0x09
    125c:	88 23       	and	r24, r24
    125e:	19 f1       	breq	.+70     	; 0x12a6 <_ZN14OneSheeldClass12processFrameEv+0x56>
    1260:	02 8c       	ldd	r0, Z+26	; 0x1a
    1262:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1264:	e0 2d       	mov	r30, r0
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	09 95       	icall
    126a:	08 95       	ret
  }
  else if(functionId == CONNECTION_CHECK_FUNCTION)
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	51 f4       	brne	.+20     	; 0x1284 <_ZN14OneSheeldClass12processFrameEv+0x34>
  {
      isOneSheeldConnected=true;
    1270:	80 87       	std	Z+8, r24	; 0x08
      if(isAppConnectionCallBack)(*isAppConnectedCallBack)(isOneSheeldConnected);
    1272:	81 85       	ldd	r24, Z+9	; 0x09
    1274:	88 23       	and	r24, r24
    1276:	b9 f0       	breq	.+46     	; 0x12a6 <_ZN14OneSheeldClass12processFrameEv+0x56>
    1278:	02 8c       	ldd	r0, Z+26	; 0x1a
    127a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    127c:	e0 2d       	mov	r30, r0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	09 95       	icall
    1282:	08 95       	ret
  }
  else if(functionId == LIBRARY_VERSION_REQUEST)
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	79 f4       	brne	.+30     	; 0x12a6 <_ZN14OneSheeldClass12processFrameEv+0x56>
  {
    sendShieldFrame(ONESHEELD_ID,0,SEND_LIBRARY_VERSION,0);
    1288:	1f 92       	push	r1
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	8f 93       	push	r24
    128e:	1f 92       	push	r1
    1290:	1f 92       	push	r1
    1292:	ff 93       	push	r31
    1294:	ef 93       	push	r30
    1296:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	08 95       	ret

000012a8 <_ZN14OneSheeldClass13sendToShieldsEv>:
        }
}

//Data Sender to Input Shields
void OneSheeldClass::sendToShields()
{
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
  //Checking the Shield-ID    
  byte number_Of_Shield= OneSheeld.getShieldId();     
  switch (number_Of_Shield)
    12b0:	20 91 be 04 	lds	r18, 0x04BE
    12b4:	22 23       	and	r18, r18
    12b6:	29 f0       	breq	.+10     	; 0x12c2 <_ZN14OneSheeldClass13sendToShieldsEv+0x1a>
  {
    case ONESHEELD_ID            :processFrame();break;
    default:
    for(int i=0 ;i<shieldsCounter;i++)
    12b8:	80 91 2c 05 	lds	r24, 0x052C
    12bc:	81 11       	cpse	r24, r1
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <_ZN14OneSheeldClass13sendToShieldsEv+0x20>
    12c0:	19 c0       	rjmp	.+50     	; 0x12f4 <_ZN14OneSheeldClass13sendToShieldsEv+0x4c>
{
  //Checking the Shield-ID    
  byte number_Of_Shield= OneSheeld.getShieldId();     
  switch (number_Of_Shield)
  {
    case ONESHEELD_ID            :processFrame();break;
    12c2:	0e 94 28 09 	call	0x1250	; 0x1250 <_ZN14OneSheeldClass12processFrameEv>
    12c6:	16 c0       	rjmp	.+44     	; 0x12f4 <_ZN14OneSheeldClass13sendToShieldsEv+0x4c>
    12c8:	03 ed       	ldi	r16, 0xD3	; 211
    12ca:	14 e0       	ldi	r17, 0x04	; 4
    default:
    for(int i=0 ;i<shieldsCounter;i++)
    12cc:	c0 e0       	ldi	r28, 0x00	; 0
    12ce:	d0 e0       	ldi	r29, 0x00	; 0
    {
      shieldsArray[i]->processFrame();
    12d0:	d8 01       	movw	r26, r16
    12d2:	8d 91       	ld	r24, X+
    12d4:	9d 91       	ld	r25, X+
    12d6:	8d 01       	movw	r16, r26
    12d8:	dc 01       	movw	r26, r24
    12da:	ed 91       	ld	r30, X+
    12dc:	fc 91       	ld	r31, X
    12de:	01 90       	ld	r0, Z+
    12e0:	f0 81       	ld	r31, Z
    12e2:	e0 2d       	mov	r30, r0
    12e4:	09 95       	icall
  byte number_Of_Shield= OneSheeld.getShieldId();     
  switch (number_Of_Shield)
  {
    case ONESHEELD_ID            :processFrame();break;
    default:
    for(int i=0 ;i<shieldsCounter;i++)
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	80 91 2c 05 	lds	r24, 0x052C
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	c8 17       	cp	r28, r24
    12f0:	d9 07       	cpc	r29, r25
    12f2:	74 f3       	brlt	.-36     	; 0x12d0 <_ZN14OneSheeldClass13sendToShieldsEv+0x28>
    {
      shieldsArray[i]->processFrame();
    }
  }
}
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	08 95       	ret

000012fe <_ZN14OneSheeldClass12processInputEi>:
  return convertFloatUnion.number;
} 

//Incomming Frames processing 
void OneSheeldClass::processInput(int data) 
{
    12fe:	bf 92       	push	r11
    1300:	cf 92       	push	r12
    1302:	df 92       	push	r13
    1304:	ef 92       	push	r14
    1306:	ff 92       	push	r15
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	ec 01       	movw	r28, r24
    1312:	8b 01       	movw	r16, r22
    if(data==-1)return;
    1314:	6f 3f       	cpi	r22, 0xFF	; 255
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	78 07       	cpc	r23, r24
    131a:	09 f4       	brne	.+2      	; 0x131e <_ZN14OneSheeldClass12processInputEi+0x20>
    131c:	78 c1       	rjmp	.+752    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
     if(!framestart&&data==START_OF_FRAME)
    131e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1320:	91 11       	cpse	r25, r1
    1322:	69 c1       	rjmp	.+722    	; 0x15f6 <_ZN14OneSheeldClass12processInputEi+0x2f8>
    1324:	6f 3f       	cpi	r22, 0xFF	; 255
    1326:	71 05       	cpc	r23, r1
    1328:	89 f4       	brne	.+34     	; 0x134c <_ZN14OneSheeldClass12processInputEi+0x4e>
          {
              freeMemoryAllocated();
    132a:	ce 01       	movw	r24, r28
    132c:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
              counter=0;
              framestart=true;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	8c 87       	std	Y+12, r24	; 0x0c
              arguments=0;
    1334:	1e 8a       	std	Y+22, r1	; 0x16
    1336:	1d 8a       	std	Y+21, r1	; 0x15
              argumentL=0;
    1338:	18 8e       	std	Y+24, r1	; 0x18
    133a:	1f 8a       	std	Y+23, r1	; 0x17
              counter++;
    133c:	89 8b       	std	Y+17, r24	; 0x11
              #ifdef DEBUG
              Serial.print("C1 ");
    133e:	68 eb       	ldi	r22, 0xB8	; 184
    1340:	71 e0       	ldi	r23, 0x01	; 1
    1342:	8a e0       	ldi	r24, 0x0A	; 10
    1344:	94 e0       	ldi	r25, 0x04	; 4
    1346:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
    134a:	61 c1       	rjmp	.+706    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
              #endif
          }
          else if(counter==4&&framestart)                      //data is the no of arguments
    134c:	89 89       	ldd	r24, Y+17	; 0x11
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	09 f0       	breq	.+2      	; 0x1354 <_ZN14OneSheeldClass12processInputEi+0x56>
    1352:	55 c1       	rjmp	.+682    	; 0x15fe <_ZN14OneSheeldClass12processInputEi+0x300>
    1354:	5c c1       	rjmp	.+696    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
          {
              #ifdef DEBUG
              Serial.print("C4 ");
    1356:	6c eb       	ldi	r22, 0xBC	; 188
    1358:	71 e0       	ldi	r23, 0x01	; 1
    135a:	8a e0       	ldi	r24, 0x0A	; 10
    135c:	94 e0       	ldi	r25, 0x04	; 4
    135e:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
              #endif
              datalengthcounter=0;
    1362:	1b 8a       	std	Y+19, r1	; 0x13
              argumentcounter=0;
    1364:	1a 8a       	std	Y+18, r1	; 0x12
              argumentnumber=data;
    1366:	0c 8b       	std	Y+20, r16	; 0x14
              counter++;
    1368:	89 89       	ldd	r24, Y+17	; 0x11
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	89 8b       	std	Y+17, r24	; 0x11
    136e:	4f c1       	rjmp	.+670    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
          }
          else if(counter==5&&framestart)                      //data is the no of arguments
          {
              #ifdef DEBUG
              Serial.print("C5 ");
    1370:	60 ec       	ldi	r22, 0xC0	; 192
    1372:	71 e0       	ldi	r23, 0x01	; 1
    1374:	8a e0       	ldi	r24, 0x0A	; 10
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
              #endif
              if((255-argumentnumber)==data&&argumentnumber==0){
    137c:	2c 89       	ldd	r18, Y+20	; 0x14
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	82 1b       	sub	r24, r18
    1384:	91 09       	sbc	r25, r1
    1386:	80 17       	cp	r24, r16
    1388:	91 07       	cpc	r25, r17
    138a:	31 f5       	brne	.+76     	; 0x13d8 <_ZN14OneSheeldClass12processInputEi+0xda>
    138c:	21 11       	cpse	r18, r1
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <_ZN14OneSheeldClass12processInputEi+0x98>
                counter=9;
    1390:	89 e0       	ldi	r24, 0x09	; 9
    1392:	89 8b       	std	Y+17, r24	; 0x11
                return;
    1394:	3c c1       	rjmp	.+632    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
              }
              else if((255-argumentnumber)==data){
              arguments=(byte**)malloc(sizeof(byte*)*argumentnumber);//new byte*[argumentnumber];          //assigning the first dimension of the pointer (allocating dynamically space for 2d array)
    1396:	82 2f       	mov	r24, r18
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <malloc>
    13a2:	9e 8b       	std	Y+22, r25	; 0x16
    13a4:	8d 8b       	std	Y+21, r24	; 0x15
              #ifdef DEBUG
              Serial.print("M1 ");
    13a6:	64 ec       	ldi	r22, 0xC4	; 196
    13a8:	71 e0       	ldi	r23, 0x01	; 1
    13aa:	8a e0       	ldi	r24, 0x0A	; 10
    13ac:	94 e0       	ldi	r25, 0x04	; 4
    13ae:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
              #endif
              isArgumentsNumberMalloced=true;
    13b2:	11 e0       	ldi	r17, 0x01	; 1
    13b4:	1e 83       	std	Y+6, r17	; 0x06
              argumentL=(byte*)malloc(sizeof(byte)*argumentnumber);//new byte [argumentnumber];
    13b6:	8c 89       	ldd	r24, Y+20	; 0x14
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <malloc>
    13be:	98 8f       	std	Y+24, r25	; 0x18
    13c0:	8f 8b       	std	Y+23, r24	; 0x17
              #ifdef DEBUG
              Serial.print("M2 ");
    13c2:	68 ec       	ldi	r22, 0xC8	; 200
    13c4:	71 e0       	ldi	r23, 0x01	; 1
    13c6:	8a e0       	ldi	r24, 0x0A	; 10
    13c8:	94 e0       	ldi	r25, 0x04	; 4
    13ca:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
              #endif
              isArgumentLengthMalloced=true;
    13ce:	1f 83       	std	Y+7, r17	; 0x07
              counter++;
    13d0:	89 89       	ldd	r24, Y+17	; 0x11
    13d2:	8f 5f       	subi	r24, 0xFF	; 255
    13d4:	89 8b       	std	Y+17, r24	; 0x11
          else if(counter==5&&framestart)                      //data is the no of arguments
          {
              #ifdef DEBUG
              Serial.print("C5 ");
              #endif
              if((255-argumentnumber)==data&&argumentnumber==0){
    13d6:	1b c1       	rjmp	.+566    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
              #endif
              isArgumentLengthMalloced=true;
              counter++;
              }
              else{
                framestart=false;
    13d8:	1c 86       	std	Y+12, r1	; 0x0c
                freeMemoryAllocated();
    13da:	ce 01       	movw	r24, r28
    13dc:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
                return;
    13e0:	16 c1       	rjmp	.+556    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
              }


          }
          else if (counter==6&&framestart)                    // data is the first argument length
    13e2:	86 30       	cpi	r24, 0x06	; 6
    13e4:	99 f4       	brne	.+38     	; 0x140c <_ZN14OneSheeldClass12processInputEi+0x10e>
    13e6:	99 23       	and	r25, r25
    13e8:	09 f4       	brne	.+2      	; 0x13ec <_ZN14OneSheeldClass12processInputEi+0xee>
    13ea:	11 c1       	rjmp	.+546    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
          {
              #ifdef DEBUG
              Serial.print("C6 ");
    13ec:	6c ec       	ldi	r22, 0xCC	; 204
    13ee:	71 e0       	ldi	r23, 0x01	; 1
    13f0:	8a e0       	ldi	r24, 0x0A	; 10
    13f2:	94 e0       	ldi	r25, 0x04	; 4
    13f4:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
              #endif
              argumentL[argumentcounter]=data;
    13f8:	8a 89       	ldd	r24, Y+18	; 0x12
    13fa:	ef 89       	ldd	r30, Y+23	; 0x17
    13fc:	f8 8d       	ldd	r31, Y+24	; 0x18
    13fe:	e8 0f       	add	r30, r24
    1400:	f1 1d       	adc	r31, r1
    1402:	00 83       	st	Z, r16
              counter++;
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	8f 5f       	subi	r24, 0xFF	; 255
    1408:	89 8b       	std	Y+17, r24	; 0x11
    140a:	01 c1       	rjmp	.+514    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
          }
          else if (counter==7&&framestart)                    // data is the first argument Data information
    140c:	87 30       	cpi	r24, 0x07	; 7
    140e:	09 f0       	breq	.+2      	; 0x1412 <_ZN14OneSheeldClass12processInputEi+0x114>
    1410:	4c c0       	rjmp	.+152    	; 0x14aa <_ZN14OneSheeldClass12processInputEi+0x1ac>
    1412:	99 23       	and	r25, r25
    1414:	09 f4       	brne	.+2      	; 0x1418 <_ZN14OneSheeldClass12processInputEi+0x11a>
    1416:	fb c0       	rjmp	.+502    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
          {
            #ifdef DEBUG
            Serial.print("C7 ");
    1418:	60 ed       	ldi	r22, 0xD0	; 208
    141a:	71 e0       	ldi	r23, 0x01	; 1
    141c:	8a e0       	ldi	r24, 0x0A	; 10
    141e:	94 e0       	ldi	r25, 0x04	; 4
    1420:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
            #endif
            if((255-argumentL[argumentcounter])==data){
    1424:	2a 89       	ldd	r18, Y+18	; 0x12
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	ef 89       	ldd	r30, Y+23	; 0x17
    142a:	f8 8d       	ldd	r31, Y+24	; 0x18
    142c:	e2 0f       	add	r30, r18
    142e:	f3 1f       	adc	r31, r19
    1430:	80 81       	ld	r24, Z
    1432:	4f ef       	ldi	r20, 0xFF	; 255
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	48 1b       	sub	r20, r24
    1438:	51 09       	sbc	r21, r1
    143a:	40 17       	cp	r20, r16
    143c:	51 07       	cpc	r21, r17
    143e:	81 f5       	brne	.+96     	; 0x14a0 <_ZN14OneSheeldClass12processInputEi+0x1a2>
              if(argumentL[argumentcounter]!=0)
    1440:	88 23       	and	r24, r24
    1442:	b1 f0       	breq	.+44     	; 0x1470 <_ZN14OneSheeldClass12processInputEi+0x172>
              {
                arguments[argumentcounter]=(byte*)malloc(sizeof(byte)*argumentL[argumentcounter]); // assigning the second dimensional of the pointer
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	0d 89       	ldd	r16, Y+21	; 0x15
    144a:	1e 89       	ldd	r17, Y+22	; 0x16
    144c:	02 0f       	add	r16, r18
    144e:	13 1f       	adc	r17, r19
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <malloc>
    1456:	f8 01       	movw	r30, r16
    1458:	91 83       	std	Z+1, r25	; 0x01
    145a:	80 83       	st	Z, r24
                #ifdef DEBUG
                Serial.print("M3 ");
    145c:	64 ed       	ldi	r22, 0xD4	; 212
    145e:	71 e0       	ldi	r23, 0x01	; 1
    1460:	8a e0       	ldi	r24, 0x0A	; 10
    1462:	94 e0       	ldi	r25, 0x04	; 4
    1464:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
                #endif
                counter++;
    1468:	89 89       	ldd	r24, Y+17	; 0x11
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	89 8b       	std	Y+17, r24	; 0x11
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <_ZN14OneSheeldClass12processInputEi+0x19a>
              }
              else
              {
                arguments[argumentcounter]=NULL;
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	ed 89       	ldd	r30, Y+21	; 0x15
    1476:	fe 89       	ldd	r31, Y+22	; 0x16
    1478:	e2 0f       	add	r30, r18
    147a:	f3 1f       	adc	r31, r19
    147c:	11 82       	std	Z+1, r1	; 0x01
    147e:	10 82       	st	Z, r1
                datalengthcounter=0;
    1480:	1b 8a       	std	Y+19, r1	; 0x13
                argumentcounter++;
    1482:	8a 89       	ldd	r24, Y+18	; 0x12
    1484:	8f 5f       	subi	r24, 0xFF	; 255
    1486:	8a 8b       	std	Y+18, r24	; 0x12
                if(argumentcounter==argumentnumber)
    1488:	9c 89       	ldd	r25, Y+20	; 0x14
    148a:	89 13       	cpse	r24, r25
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <_ZN14OneSheeldClass12processInputEi+0x196>
                  counter=9;
    148e:	89 e0       	ldi	r24, 0x09	; 9
    1490:	89 8b       	std	Y+17, r24	; 0x11
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <_ZN14OneSheeldClass12processInputEi+0x19a>
                else
                  counter=6;
    1494:	86 e0       	ldi	r24, 0x06	; 6
    1496:	89 8b       	std	Y+17, r24	; 0x11
              }
              numberOfDataMalloced++;
    1498:	8d 85       	ldd	r24, Y+13	; 0x0d
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	8d 87       	std	Y+13, r24	; 0x0d
          else if (counter==7&&framestart)                    // data is the first argument Data information
          {
            #ifdef DEBUG
            Serial.print("C7 ");
            #endif
            if((255-argumentL[argumentcounter])==data){
    149e:	b7 c0       	rjmp	.+366    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
                  counter=6;
              }
              numberOfDataMalloced++;
            }
            else{
                framestart=false;
    14a0:	1c 86       	std	Y+12, r1	; 0x0c
                freeMemoryAllocated();
    14a2:	ce 01       	movw	r24, r28
    14a4:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
                return;
    14a8:	b2 c0       	rjmp	.+356    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
              }
          }
          else if (counter==8&&framestart)
    14aa:	88 30       	cpi	r24, 0x08	; 8
    14ac:	99 f5       	brne	.+102    	; 0x1514 <_ZN14OneSheeldClass12processInputEi+0x216>
    14ae:	99 23       	and	r25, r25
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <_ZN14OneSheeldClass12processInputEi+0x1b6>
    14b2:	ad c0       	rjmp	.+346    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
          {
              #ifdef DEBUG
              Serial.print("C8 ");
    14b4:	68 ed       	ldi	r22, 0xD8	; 216
    14b6:	71 e0       	ldi	r23, 0x01	; 1
    14b8:	8a e0       	ldi	r24, 0x0A	; 10
    14ba:	94 e0       	ldi	r25, 0x04	; 4
    14bc:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
              #endif
              if(arguments[argumentcounter]!=NULL)arguments[argumentcounter][datalengthcounter++]=data;
    14c0:	ea 89       	ldd	r30, Y+18	; 0x12
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	8d 89       	ldd	r24, Y+21	; 0x15
    14ca:	9e 89       	ldd	r25, Y+22	; 0x16
    14cc:	e8 0f       	add	r30, r24
    14ce:	f9 1f       	adc	r31, r25
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	41 f0       	breq	.+16     	; 0x14e8 <_ZN14OneSheeldClass12processInputEi+0x1ea>
    14d8:	2b 89       	ldd	r18, Y+19	; 0x13
    14da:	31 e0       	ldi	r19, 0x01	; 1
    14dc:	32 0f       	add	r19, r18
    14de:	3b 8b       	std	Y+19, r19	; 0x13
    14e0:	fc 01       	movw	r30, r24
    14e2:	e2 0f       	add	r30, r18
    14e4:	f1 1d       	adc	r31, r1
    14e6:	00 83       	st	Z, r16
              if (datalengthcounter==argumentL[argumentcounter])
    14e8:	8a 89       	ldd	r24, Y+18	; 0x12
    14ea:	ef 89       	ldd	r30, Y+23	; 0x17
    14ec:	f8 8d       	ldd	r31, Y+24	; 0x18
    14ee:	e8 0f       	add	r30, r24
    14f0:	f1 1d       	adc	r31, r1
    14f2:	2b 89       	ldd	r18, Y+19	; 0x13
    14f4:	90 81       	ld	r25, Z
    14f6:	29 13       	cpse	r18, r25
    14f8:	8a c0       	rjmp	.+276    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
              {
                  datalengthcounter=0;
    14fa:	1b 8a       	std	Y+19, r1	; 0x13
                  argumentcounter++;
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	8a 8b       	std	Y+18, r24	; 0x12
                  if(argumentcounter==argumentnumber)
    1500:	9c 89       	ldd	r25, Y+20	; 0x14
    1502:	89 13       	cpse	r24, r25
    1504:	04 c0       	rjmp	.+8      	; 0x150e <_ZN14OneSheeldClass12processInputEi+0x210>
                  {
                    counter++;                                    //increment the counter to take the last byte which is the end of the frame
    1506:	89 89       	ldd	r24, Y+17	; 0x11
    1508:	8f 5f       	subi	r24, 0xFF	; 255
    150a:	89 8b       	std	Y+17, r24	; 0x11
    150c:	80 c0       	rjmp	.+256    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>

                  }
                  else
                  {
                    counter=6;
    150e:	86 e0       	ldi	r24, 0x06	; 6
    1510:	89 8b       	std	Y+17, r24	; 0x11
    1512:	7d c0       	rjmp	.+250    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
                  }

              }

          }
          else if(counter==9&&framestart)
    1514:	89 30       	cpi	r24, 0x09	; 9
    1516:	29 f5       	brne	.+74     	; 0x1562 <_ZN14OneSheeldClass12processInputEi+0x264>
    1518:	99 23       	and	r25, r25
    151a:	09 f4       	brne	.+2      	; 0x151e <_ZN14OneSheeldClass12processInputEi+0x220>
    151c:	78 c0       	rjmp	.+240    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
          {
              #ifdef DEBUG
              Serial.print("C9 ");
    151e:	6c ed       	ldi	r22, 0xDC	; 220
    1520:	71 e0       	ldi	r23, 0x01	; 1
    1522:	8a e0       	ldi	r24, 0x0A	; 10
    1524:	94 e0       	ldi	r25, 0x04	; 4
    1526:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
              #endif
            endFrame=data;
    152a:	09 8f       	std	Y+25, r16	; 0x19
              if(endFrame==END_OF_FRAME)                                   //if the endframe is equal to zero send to shields and free memory
    152c:	01 11       	cpse	r16, r1
    152e:	15 c0       	rjmp	.+42     	; 0x155a <_ZN14OneSheeldClass12processInputEi+0x25c>
              {
                      sendToShields();
    1530:	ce 01       	movw	r24, r28
    1532:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN14OneSheeldClass13sendToShieldsEv>
                      if(isShieldFrameCallback)
    1536:	8a 85       	ldd	r24, Y+10	; 0x0a
    1538:	88 23       	and	r24, r24
    153a:	59 f0       	breq	.+22     	; 0x1552 <_ZN14OneSheeldClass12processInputEi+0x254>
                        shieldFrameCallback(shield,instance,functions,argumentnumber,argumentL,arguments);
    153c:	ed 88       	ldd	r14, Y+21	; 0x15
    153e:	fe 88       	ldd	r15, Y+22	; 0x16
    1540:	0f 89       	ldd	r16, Y+23	; 0x17
    1542:	18 8d       	ldd	r17, Y+24	; 0x18
    1544:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1546:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1548:	2c 89       	ldd	r18, Y+20	; 0x14
    154a:	48 89       	ldd	r20, Y+16	; 0x10
    154c:	6f 85       	ldd	r22, Y+15	; 0x0f
    154e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1550:	09 95       	icall
                      freeMemoryAllocated();
    1552:	ce 01       	movw	r24, r28
    1554:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
    1558:	5a c0       	rjmp	.+180    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
                      
              }
              else                                            //if endframe wasn't equal to zero make sure that the memory is free anyway
              {
                freeMemoryAllocated();
    155a:	ce 01       	movw	r24, r28
    155c:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
    1560:	56 c0       	rjmp	.+172    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
              }
          }
          else if(framestart){
    1562:	99 23       	and	r25, r25
    1564:	09 f4       	brne	.+2      	; 0x1568 <_ZN14OneSheeldClass12processInputEi+0x26a>
    1566:	53 c0       	rjmp	.+166    	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
                if(counter==1){
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	71 f5       	brne	.+92     	; 0x15c8 <_ZN14OneSheeldClass12processInputEi+0x2ca>
                  shield=data;
    156c:	0e 87       	std	Y+14, r16	; 0x0e
                  bool found = false;
                  if(shield == ONESHEELD_ID || isShieldFrameCallback) found = true;
    156e:	00 23       	and	r16, r16
    1570:	f1 f1       	breq	.+124    	; 0x15ee <_ZN14OneSheeldClass12processInputEi+0x2f0>
    1572:	8a 85       	ldd	r24, Y+10	; 0x0a
    1574:	81 11       	cpse	r24, r1
    1576:	3b c0       	rjmp	.+118    	; 0x15ee <_ZN14OneSheeldClass12processInputEi+0x2f0>
                  else 
                  for (int i=0;i<shieldsCounter;i++) {
    1578:	80 91 2c 05 	lds	r24, 0x052C
    157c:	88 23       	and	r24, r24
    157e:	f9 f0       	breq	.+62     	; 0x15be <_ZN14OneSheeldClass12processInputEi+0x2c0>
    1580:	0f 2e       	mov	r0, r31
    1582:	f3 ed       	ldi	r31, 0xD3	; 211
    1584:	ef 2e       	mov	r14, r31
    1586:	f4 e0       	ldi	r31, 0x04	; 4
    1588:	ff 2e       	mov	r15, r31
    158a:	f0 2d       	mov	r31, r0
    158c:	00 e0       	ldi	r16, 0x00	; 0
    158e:	10 e0       	ldi	r17, 0x00	; 0
    1590:	c1 2c       	mov	r12, r1
                    if (shield == shieldsArray[i]->getShieldId()){
                      found = true;
    1592:	bb 24       	eor	r11, r11
    1594:	b3 94       	inc	r11
                  shield=data;
                  bool found = false;
                  if(shield == ONESHEELD_ID || isShieldFrameCallback) found = true;
                  else 
                  for (int i=0;i<shieldsCounter;i++) {
                    if (shield == shieldsArray[i]->getShieldId()){
    1596:	de 84       	ldd	r13, Y+14	; 0x0e
    1598:	f7 01       	movw	r30, r14
    159a:	81 91       	ld	r24, Z+
    159c:	91 91       	ld	r25, Z+
    159e:	7f 01       	movw	r14, r30
    15a0:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN12ShieldParent11getShieldIdEv>
    15a4:	d8 12       	cpse	r13, r24
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <_ZN14OneSheeldClass12processInputEi+0x2ac>
                      found = true;
    15a8:	cb 2c       	mov	r12, r11
                if(counter==1){
                  shield=data;
                  bool found = false;
                  if(shield == ONESHEELD_ID || isShieldFrameCallback) found = true;
                  else 
                  for (int i=0;i<shieldsCounter;i++) {
    15aa:	0f 5f       	subi	r16, 0xFF	; 255
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	80 91 2c 05 	lds	r24, 0x052C
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	08 17       	cp	r16, r24
    15b6:	19 07       	cpc	r17, r25
    15b8:	74 f3       	brlt	.-36     	; 0x1596 <_ZN14OneSheeldClass12processInputEi+0x298>
                    if (shield == shieldsArray[i]->getShieldId()){
                      found = true;
                      
                    }
                  }
                  if (!found) {
    15ba:	c1 10       	cpse	r12, r1
    15bc:	18 c0       	rjmp	.+48     	; 0x15ee <_ZN14OneSheeldClass12processInputEi+0x2f0>
                    framestart=false;
    15be:	1c 86       	std	Y+12, r1	; 0x0c
                    freeMemoryAllocated();
    15c0:	ce 01       	movw	r24, r28
    15c2:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
                    return;
    15c6:	23 c0       	rjmp	.+70     	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
                  }
                }
                else if(counter==2){
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	41 f4       	brne	.+16     	; 0x15dc <_ZN14OneSheeldClass12processInputEi+0x2de>
                  instance=data;
    15cc:	0f 87       	std	Y+15, r16	; 0x0f
                  #ifdef DEBUG
                  Serial.print("C2 ");
    15ce:	60 ee       	ldi	r22, 0xE0	; 224
    15d0:	71 e0       	ldi	r23, 0x01	; 1
    15d2:	8a e0       	ldi	r24, 0x0A	; 10
    15d4:	94 e0       	ldi	r25, 0x04	; 4
    15d6:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <_ZN14OneSheeldClass12processInputEi+0x2f0>
                  #endif
                }
                else if(counter==3){
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	39 f4       	brne	.+14     	; 0x15ee <_ZN14OneSheeldClass12processInputEi+0x2f0>
                  functions=data;
    15e0:	08 8b       	std	Y+16, r16	; 0x10
                  #ifdef DEBUG
                  Serial.print("C3 ");
    15e2:	64 ee       	ldi	r22, 0xE4	; 228
    15e4:	71 e0       	ldi	r23, 0x01	; 1
    15e6:	8a e0       	ldi	r24, 0x0A	; 10
    15e8:	94 e0       	ldi	r25, 0x04	; 4
    15ea:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEPKc>
                  #endif
                }
            counter++;
    15ee:	89 89       	ldd	r24, Y+17	; 0x11
    15f0:	8f 5f       	subi	r24, 0xFF	; 255
    15f2:	89 8b       	std	Y+17, r24	; 0x11
    15f4:	0c c0       	rjmp	.+24     	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
              counter++;
              #ifdef DEBUG
              Serial.print("C1 ");
              #endif
          }
          else if(counter==4&&framestart)                      //data is the no of arguments
    15f6:	89 89       	ldd	r24, Y+17	; 0x11
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	29 f4       	brne	.+10     	; 0x1606 <_ZN14OneSheeldClass12processInputEi+0x308>
    15fc:	ac ce       	rjmp	.-680    	; 0x1356 <_ZN14OneSheeldClass12processInputEi+0x58>
              datalengthcounter=0;
              argumentcounter=0;
              argumentnumber=data;
              counter++;
          }
          else if(counter==5&&framestart)                      //data is the no of arguments
    15fe:	85 30       	cpi	r24, 0x05	; 5
    1600:	09 f0       	breq	.+2      	; 0x1604 <_ZN14OneSheeldClass12processInputEi+0x306>
    1602:	ef ce       	rjmp	.-546    	; 0x13e2 <_ZN14OneSheeldClass12processInputEi+0xe4>
    1604:	04 c0       	rjmp	.+8      	; 0x160e <_ZN14OneSheeldClass12processInputEi+0x310>
    1606:	85 30       	cpi	r24, 0x05	; 5
    1608:	09 f0       	breq	.+2      	; 0x160c <_ZN14OneSheeldClass12processInputEi+0x30e>
    160a:	eb ce       	rjmp	.-554    	; 0x13e2 <_ZN14OneSheeldClass12processInputEi+0xe4>
    160c:	b1 ce       	rjmp	.-670    	; 0x1370 <_ZN14OneSheeldClass12processInputEi+0x72>
                  #endif
                }
            counter++;
          }

}
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
    161e:	bf 90       	pop	r11
    1620:	08 95       	ret

00001622 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>:
  serialDataCallback=userFunction;
}

//Frame Sender for Output Shields
void OneSheeldClass::sendShieldFrame(byte shieldID, byte instanceID, byte functionID, byte argNo, ...)
{
    1622:	3f 92       	push	r3
    1624:	4f 92       	push	r4
    1626:	5f 92       	push	r5
    1628:	6f 92       	push	r6
    162a:	7f 92       	push	r7
    162c:	8f 92       	push	r8
    162e:	9f 92       	push	r9
    1630:	af 92       	push	r10
    1632:	bf 92       	push	r11
    1634:	cf 92       	push	r12
    1636:	df 92       	push	r13
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	a0 97       	sbiw	r28, 0x20	; 32
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	cc a8       	ldd	r12, Y+52	; 0x34
    1656:	dd a8       	ldd	r13, Y+53	; 0x35
    1658:	3e a8       	ldd	r3, Y+54	; 0x36
    165a:	69 ac       	ldd	r6, Y+57	; 0x39
  unsigned long mill=millis()+1;
    165c:	0e 94 31 08 	call	0x1062	; 0x1062 <millis>
  unsigned long localLastTimeFrameSent=lastTimeFrameSent;
    1660:	80 90 28 05 	lds	r8, 0x0528
    1664:	90 90 29 05 	lds	r9, 0x0529
    1668:	a0 90 2a 05 	lds	r10, 0x052A
    166c:	b0 90 2b 05 	lds	r11, 0x052B
  if(shieldID!=ONESHEELD_ID&&isFirstFrame&&localLastTimeFrameSent&&(mill-localLastTimeFrameSent)<TIME_GAP){
    1670:	33 20       	and	r3, r3
    1672:	09 f4       	brne	.+2      	; 0x1676 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x54>
    1674:	82 c0       	rjmp	.+260    	; 0x177a <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x158>
    1676:	20 91 25 05 	lds	r18, 0x0525
    167a:	22 23       	and	r18, r18
    167c:	09 f4       	brne	.+2      	; 0x1680 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x5e>
    167e:	7d c0       	rjmp	.+250    	; 0x177a <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x158>
    1680:	81 14       	cp	r8, r1
    1682:	91 04       	cpc	r9, r1
    1684:	a1 04       	cpc	r10, r1
    1686:	b1 04       	cpc	r11, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x6a>
    168a:	77 c0       	rjmp	.+238    	; 0x177a <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x158>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	88 19       	sub	r24, r8
    1692:	99 09       	sbc	r25, r9
    1694:	aa 09       	sbc	r26, r10
    1696:	bb 09       	sbc	r27, r11
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	a1 1d       	adc	r26, r1
    169c:	b1 1d       	adc	r27, r1
    169e:	88 3c       	cpi	r24, 0xC8	; 200
    16a0:	91 05       	cpc	r25, r1
    16a2:	a1 05       	cpc	r26, r1
    16a4:	b1 05       	cpc	r27, r1
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x88>
    16a8:	68 c0       	rjmp	.+208    	; 0x177a <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x158>
  if(inACallback){
    16aa:	80 91 27 05 	lds	r24, 0x0527
    16ae:	88 23       	and	r24, r24
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x92>
    16b2:	53 c0       	rjmp	.+166    	; 0x175a <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x138>
     OneSheeldClass TempOneSheeld(OneSheeldSerial);
    16b4:	d6 01       	movw	r26, r12
    16b6:	6d 91       	ld	r22, X+
    16b8:	7c 91       	ld	r23, X
    16ba:	ce 01       	movw	r24, r28
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN14OneSheeldClassC1ER6Stream>
     ShieldParent::setOneSheeldInstance(TempOneSheeld);
    16c2:	ce 01       	movw	r24, r28
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN12ShieldParent20setOneSheeldInstanceER14OneSheeldClass>
     while((millis()<(TIME_GAP+localLastTimeFrameSent))||TempOneSheeld.framestart)
    16ca:	b8 ec       	ldi	r27, 0xC8	; 200
    16cc:	8b 0e       	add	r8, r27
    16ce:	91 1c       	adc	r9, r1
    16d0:	a1 1c       	adc	r10, r1
    16d2:	b1 1c       	adc	r11, r1
    16d4:	19 c0       	rjmp	.+50     	; 0x1708 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xe6>
     {
        if(TempOneSheeld.OneSheeldSerial.available())
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	dc 01       	movw	r26, r24
    16dc:	ed 91       	ld	r30, X+
    16de:	fc 91       	ld	r31, X
    16e0:	04 80       	ldd	r0, Z+4	; 0x04
    16e2:	f5 81       	ldd	r31, Z+5	; 0x05
    16e4:	e0 2d       	mov	r30, r0
    16e6:	09 95       	icall
    16e8:	89 2b       	or	r24, r25
    16ea:	71 f0       	breq	.+28     	; 0x1708 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xe6>
          TempOneSheeld.processInput(TempOneSheeld.OneSheeldSerial.read());
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	dc 01       	movw	r26, r24
    16f2:	ed 91       	ld	r30, X+
    16f4:	fc 91       	ld	r31, X
    16f6:	06 80       	ldd	r0, Z+6	; 0x06
    16f8:	f7 81       	ldd	r31, Z+7	; 0x07
    16fa:	e0 2d       	mov	r30, r0
    16fc:	09 95       	icall
    16fe:	bc 01       	movw	r22, r24
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN14OneSheeldClass12processInputEi>
  unsigned long localLastTimeFrameSent=lastTimeFrameSent;
  if(shieldID!=ONESHEELD_ID&&isFirstFrame&&localLastTimeFrameSent&&(mill-localLastTimeFrameSent)<TIME_GAP){
  if(inACallback){
     OneSheeldClass TempOneSheeld(OneSheeldSerial);
     ShieldParent::setOneSheeldInstance(TempOneSheeld);
     while((millis()<(TIME_GAP+localLastTimeFrameSent))||TempOneSheeld.framestart)
    1708:	0e 94 31 08 	call	0x1062	; 0x1062 <millis>
    170c:	68 15       	cp	r22, r8
    170e:	79 05       	cpc	r23, r9
    1710:	8a 05       	cpc	r24, r10
    1712:	9b 05       	cpc	r25, r11
    1714:	00 f3       	brcs	.-64     	; 0x16d6 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xb4>
    1716:	8d 85       	ldd	r24, Y+13	; 0x0d
    1718:	81 11       	cpse	r24, r1
    171a:	dd cf       	rjmp	.-70     	; 0x16d6 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xb4>
     {
        if(TempOneSheeld.OneSheeldSerial.available())
          TempOneSheeld.processInput(TempOneSheeld.OneSheeldSerial.read());
     }
      ShieldParent::unSetOneSheeldInstance();
    171c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_ZN12ShieldParent22unSetOneSheeldInstanceEv>
    1720:	2c c0       	rjmp	.+88     	; 0x177a <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x158>
   }else
      while((millis()<(TIME_GAP+localLastTimeFrameSent))||framestart)
      {
        if(OneSheeldSerial.available())
    1722:	f6 01       	movw	r30, r12
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	dc 01       	movw	r26, r24
    172a:	ed 91       	ld	r30, X+
    172c:	fc 91       	ld	r31, X
    172e:	04 80       	ldd	r0, Z+4	; 0x04
    1730:	f5 81       	ldd	r31, Z+5	; 0x05
    1732:	e0 2d       	mov	r30, r0
    1734:	09 95       	icall
    1736:	89 2b       	or	r24, r25
    1738:	a9 f0       	breq	.+42     	; 0x1764 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x142>
          OneSheeld.processInput(OneSheeldSerial.read());
    173a:	f6 01       	movw	r30, r12
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	dc 01       	movw	r26, r24
    1742:	ed 91       	ld	r30, X+
    1744:	fc 91       	ld	r31, X
    1746:	06 80       	ldd	r0, Z+6	; 0x06
    1748:	f7 81       	ldd	r31, Z+7	; 0x07
    174a:	e0 2d       	mov	r30, r0
    174c:	09 95       	icall
    174e:	bc 01       	movw	r22, r24
    1750:	80 eb       	ldi	r24, 0xB0	; 176
    1752:	94 e0       	ldi	r25, 0x04	; 4
    1754:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN14OneSheeldClass12processInputEi>
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x142>
        if(TempOneSheeld.OneSheeldSerial.available())
          TempOneSheeld.processInput(TempOneSheeld.OneSheeldSerial.read());
     }
      ShieldParent::unSetOneSheeldInstance();
   }else
      while((millis()<(TIME_GAP+localLastTimeFrameSent))||framestart)
    175a:	b8 ec       	ldi	r27, 0xC8	; 200
    175c:	8b 0e       	add	r8, r27
    175e:	91 1c       	adc	r9, r1
    1760:	a1 1c       	adc	r10, r1
    1762:	b1 1c       	adc	r11, r1
    1764:	0e 94 31 08 	call	0x1062	; 0x1062 <millis>
    1768:	68 15       	cp	r22, r8
    176a:	79 05       	cpc	r23, r9
    176c:	8a 05       	cpc	r24, r10
    176e:	9b 05       	cpc	r25, r11
    1770:	c0 f2       	brcs	.-80     	; 0x1722 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x100>
    1772:	f6 01       	movw	r30, r12
    1774:	84 85       	ldd	r24, Z+12	; 0x0c
    1776:	81 11       	cpse	r24, r1
    1778:	d4 cf       	rjmp	.-88     	; 0x1722 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x100>
        if(OneSheeldSerial.available())
          OneSheeld.processInput(OneSheeldSerial.read());
      }
  }

  isFirstFrame=true;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	80 93 25 05 	sts	0x0525, r24
  va_list arguments ;
  va_start (arguments,argNo);
    1780:	4e 01       	movw	r8, r28
    1782:	fa e3       	ldi	r31, 0x3A	; 58
    1784:	8f 0e       	add	r8, r31
    1786:	91 1c       	adc	r9, r1
  OneSheeldSerial.write((byte)START_OF_FRAME);
    1788:	d6 01       	movw	r26, r12
    178a:	8d 91       	ld	r24, X+
    178c:	9c 91       	ld	r25, X
    178e:	dc 01       	movw	r26, r24
    1790:	ed 91       	ld	r30, X+
    1792:	fc 91       	ld	r31, X
    1794:	01 90       	ld	r0, Z+
    1796:	f0 81       	ld	r31, Z
    1798:	e0 2d       	mov	r30, r0
    179a:	6f ef       	ldi	r22, 0xFF	; 255
    179c:	09 95       	icall
  OneSheeldSerial.write(LIBRARY_VERSION);
    179e:	f6 01       	movw	r30, r12
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
    17a4:	dc 01       	movw	r26, r24
    17a6:	ed 91       	ld	r30, X+
    17a8:	fc 91       	ld	r31, X
    17aa:	01 90       	ld	r0, Z+
    17ac:	f0 81       	ld	r31, Z
    17ae:	e0 2d       	mov	r30, r0
    17b0:	68 e0       	ldi	r22, 0x08	; 8
    17b2:	09 95       	icall
  OneSheeldSerial.write(shieldID);
    17b4:	f6 01       	movw	r30, r12
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	dc 01       	movw	r26, r24
    17bc:	ed 91       	ld	r30, X+
    17be:	fc 91       	ld	r31, X
    17c0:	01 90       	ld	r0, Z+
    17c2:	f0 81       	ld	r31, Z
    17c4:	e0 2d       	mov	r30, r0
    17c6:	63 2d       	mov	r22, r3
    17c8:	09 95       	icall
  OneSheeldSerial.write(instanceID);
    17ca:	f6 01       	movw	r30, r12
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	dc 01       	movw	r26, r24
    17d2:	ed 91       	ld	r30, X+
    17d4:	fc 91       	ld	r31, X
    17d6:	01 90       	ld	r0, Z+
    17d8:	f0 81       	ld	r31, Z
    17da:	e0 2d       	mov	r30, r0
    17dc:	6f a9       	ldd	r22, Y+55	; 0x37
    17de:	09 95       	icall
  OneSheeldSerial.write(functionID);
    17e0:	f6 01       	movw	r30, r12
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	dc 01       	movw	r26, r24
    17e8:	ed 91       	ld	r30, X+
    17ea:	fc 91       	ld	r31, X
    17ec:	01 90       	ld	r0, Z+
    17ee:	f0 81       	ld	r31, Z
    17f0:	e0 2d       	mov	r30, r0
    17f2:	68 ad       	ldd	r22, Y+56	; 0x38
    17f4:	09 95       	icall
  OneSheeldSerial.write(argNo);
    17f6:	f6 01       	movw	r30, r12
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	dc 01       	movw	r26, r24
    17fe:	ed 91       	ld	r30, X+
    1800:	fc 91       	ld	r31, X
    1802:	01 90       	ld	r0, Z+
    1804:	f0 81       	ld	r31, Z
    1806:	e0 2d       	mov	r30, r0
    1808:	66 2d       	mov	r22, r6
    180a:	09 95       	icall
  OneSheeldSerial.write(255-argNo);
    180c:	f6 01       	movw	r30, r12
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	dc 01       	movw	r26, r24
    1814:	ed 91       	ld	r30, X+
    1816:	fc 91       	ld	r31, X
    1818:	66 2d       	mov	r22, r6
    181a:	60 95       	com	r22
    181c:	01 90       	ld	r0, Z+
    181e:	f0 81       	ld	r31, Z
    1820:	e0 2d       	mov	r30, r0
    1822:	09 95       	icall


  for (int i=0 ; i<argNo ; i++)
    1824:	71 2c       	mov	r7, r1
    1826:	16 14       	cp	r1, r6
    1828:	17 04       	cpc	r1, r7
    182a:	0c f0       	brlt	.+2      	; 0x182e <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x20c>
    182c:	57 c0       	rjmp	.+174    	; 0x18dc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x2ba>
    182e:	a1 2c       	mov	r10, r1
    1830:	b1 2c       	mov	r11, r1
  {
    FunctionArg * temp = va_arg(arguments, FunctionArg *);
    OneSheeldSerial.write(temp->getLength());
    OneSheeldSerial.write(255-(temp->getLength()));

      for (int j=0 ; j<temp->getLength() ; j++)
    1832:	41 2c       	mov	r4, r1
    1834:	51 2c       	mov	r5, r1
  OneSheeldSerial.write(255-argNo);


  for (int i=0 ; i<argNo ; i++)
  {
    FunctionArg * temp = va_arg(arguments, FunctionArg *);
    1836:	f4 01       	movw	r30, r8
    1838:	e0 80       	ld	r14, Z
    183a:	f1 80       	ldd	r15, Z+1	; 0x01
    183c:	b2 e0       	ldi	r27, 0x02	; 2
    183e:	8b 0e       	add	r8, r27
    1840:	91 1c       	adc	r9, r1
    OneSheeldSerial.write(temp->getLength());
    1842:	f6 01       	movw	r30, r12
    1844:	80 81       	ld	r24, Z
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	dc 01       	movw	r26, r24
    184a:	ed 91       	ld	r30, X+
    184c:	fc 91       	ld	r31, X
    184e:	01 90       	ld	r0, Z+
    1850:	f0 81       	ld	r31, Z
    1852:	e0 2d       	mov	r30, r0
    1854:	d7 01       	movw	r26, r14
    1856:	6c 91       	ld	r22, X
    1858:	09 95       	icall
    OneSheeldSerial.write(255-(temp->getLength()));
    185a:	f6 01       	movw	r30, r12
    185c:	80 81       	ld	r24, Z
    185e:	91 81       	ldd	r25, Z+1	; 0x01
    1860:	dc 01       	movw	r26, r24
    1862:	ed 91       	ld	r30, X+
    1864:	fc 91       	ld	r31, X
    1866:	d7 01       	movw	r26, r14
    1868:	6c 91       	ld	r22, X
    186a:	60 95       	com	r22
    186c:	01 90       	ld	r0, Z+
    186e:	f0 81       	ld	r31, Z
    1870:	e0 2d       	mov	r30, r0
    1872:	09 95       	icall

      for (int j=0 ; j<temp->getLength() ; j++)
    1874:	f7 01       	movw	r30, r14
    1876:	80 81       	ld	r24, Z
    1878:	88 23       	and	r24, r24
    187a:	d9 f0       	breq	.+54     	; 0x18b2 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x290>
    187c:	04 2d       	mov	r16, r4
    187e:	15 2d       	mov	r17, r5
      {
        byte* tempData=temp->getData();
        OneSheeldSerial.write(tempData[j]);
    1880:	d6 01       	movw	r26, r12
    1882:	8d 91       	ld	r24, X+
    1884:	9c 91       	ld	r25, X
    1886:	fc 01       	movw	r30, r24
    1888:	20 81       	ld	r18, Z
    188a:	31 81       	ldd	r19, Z+1	; 0x01
    188c:	f7 01       	movw	r30, r14
    188e:	a1 81       	ldd	r26, Z+1	; 0x01
    1890:	b2 81       	ldd	r27, Z+2	; 0x02
    1892:	a0 0f       	add	r26, r16
    1894:	b1 1f       	adc	r27, r17
    1896:	f9 01       	movw	r30, r18
    1898:	20 81       	ld	r18, Z
    189a:	31 81       	ldd	r19, Z+1	; 0x01
    189c:	6c 91       	ld	r22, X
    189e:	f9 01       	movw	r30, r18
    18a0:	09 95       	icall
  {
    FunctionArg * temp = va_arg(arguments, FunctionArg *);
    OneSheeldSerial.write(temp->getLength());
    OneSheeldSerial.write(255-(temp->getLength()));

      for (int j=0 ; j<temp->getLength() ; j++)
    18a2:	0f 5f       	subi	r16, 0xFF	; 255
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	d7 01       	movw	r26, r14
    18a8:	8c 91       	ld	r24, X
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	08 17       	cp	r16, r24
    18ae:	19 07       	cpc	r17, r25
    18b0:	3c f3       	brlt	.-50     	; 0x1880 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x25e>
      {
        byte* tempData=temp->getData();
        OneSheeldSerial.write(tempData[j]);
      }
    delete(temp);
    18b2:	e1 14       	cp	r14, r1
    18b4:	f1 04       	cpc	r15, r1
    18b6:	59 f0       	breq	.+22     	; 0x18ce <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x2ac>
	{
		return data;
	}
	~FunctionArg()
	{
		if(saveData)free(data);
    18b8:	f7 01       	movw	r30, r14
    18ba:	83 81       	ldd	r24, Z+3	; 0x03
    18bc:	88 23       	and	r24, r24
    18be:	21 f0       	breq	.+8      	; 0x18c8 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x2a6>
    18c0:	81 81       	ldd	r24, Z+1	; 0x01
    18c2:	92 81       	ldd	r25, Z+2	; 0x02
    18c4:	0e 94 f5 15 	call	0x2bea	; 0x2bea <free>
    18c8:	c7 01       	movw	r24, r14
    18ca:	0e 94 22 12 	call	0x2444	; 0x2444 <_ZdlPv>
  OneSheeldSerial.write(functionID);
  OneSheeldSerial.write(argNo);
  OneSheeldSerial.write(255-argNo);


  for (int i=0 ; i<argNo ; i++)
    18ce:	ff ef       	ldi	r31, 0xFF	; 255
    18d0:	af 1a       	sub	r10, r31
    18d2:	bf 0a       	sbc	r11, r31
    18d4:	a6 14       	cp	r10, r6
    18d6:	b7 04       	cpc	r11, r7
    18d8:	09 f0       	breq	.+2      	; 0x18dc <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x2ba>
    18da:	ad cf       	rjmp	.-166    	; 0x1836 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x214>
        OneSheeldSerial.write(tempData[j]);
      }
    delete(temp);

 }
    OneSheeldSerial.write((byte)END_OF_FRAME);
    18dc:	d6 01       	movw	r26, r12
    18de:	8d 91       	ld	r24, X+
    18e0:	9c 91       	ld	r25, X
    18e2:	dc 01       	movw	r26, r24
    18e4:	ed 91       	ld	r30, X+
    18e6:	fc 91       	ld	r31, X
    18e8:	01 90       	ld	r0, Z+
    18ea:	f0 81       	ld	r31, Z
    18ec:	e0 2d       	mov	r30, r0
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	09 95       	icall
    va_end(arguments);
    if(shieldID!=ONESHEELD_ID)lastTimeFrameSent=millis()+1;
    18f2:	33 20       	and	r3, r3
    18f4:	79 f0       	breq	.+30     	; 0x1914 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x2f2>
    18f6:	0e 94 31 08 	call	0x1062	; 0x1062 <millis>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	01 96       	adiw	r24, 0x01	; 1
    1900:	a1 1d       	adc	r26, r1
    1902:	b1 1d       	adc	r27, r1
    1904:	80 93 28 05 	sts	0x0528, r24
    1908:	90 93 29 05 	sts	0x0529, r25
    190c:	a0 93 2a 05 	sts	0x052A, r26
    1910:	b0 93 2b 05 	sts	0x052B, r27
}
    1914:	a0 96       	adiw	r28, 0x20	; 32
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	cf 90       	pop	r12
    1930:	bf 90       	pop	r11
    1932:	af 90       	pop	r10
    1934:	9f 90       	pop	r9
    1936:	8f 90       	pop	r8
    1938:	7f 90       	pop	r7
    193a:	6f 90       	pop	r6
    193c:	5f 90       	pop	r5
    193e:	4f 90       	pop	r4
    1940:	3f 90       	pop	r3
    1942:	08 95       	ret

00001944 <_ZN14OneSheeldClass5beginEv>:
  }

}
//Library Starter
void OneSheeldClass::begin()
{
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	c8 2f       	mov	r28, r24
    194a:	d9 2f       	mov	r29, r25
  begin(115200);
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	52 ec       	ldi	r21, 0xC2	; 194
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN14OneSheeldClass5beginEl>
  sendShieldFrame(ONESHEELD_ID,0,CHECK_APP_CONNECTION,0);
    1958:	1f 92       	push	r1
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	8f 93       	push	r24
    195e:	1f 92       	push	r1
    1960:	1f 92       	push	r1
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
  isInit=true;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	80 93 2d 05 	sts	0x052D, r24
  // #ifdef INTERNET_SHIELD
  for(int i=0;i<requestsCounter;i++)
    1970:	80 91 d2 04 	lds	r24, 0x04D2
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	88 23       	and	r24, r24
    1982:	b1 f0       	breq	.+44     	; 0x19b0 <_ZN14OneSheeldClass5beginEv+0x6c>
    1984:	c0 e0       	ldi	r28, 0x00	; 0
    1986:	d0 e0       	ldi	r29, 0x00	; 0
    requestsArray[i]->sendInitFrame();
    1988:	ce 01       	movw	r24, r28
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	e0 91 d0 04 	lds	r30, 0x04D0
    1992:	f0 91 d1 04 	lds	r31, 0x04D1
    1996:	e8 0f       	add	r30, r24
    1998:	f9 1f       	adc	r31, r25
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZN11HttpRequest13sendInitFrameEv>
{
  begin(115200);
  sendShieldFrame(ONESHEELD_ID,0,CHECK_APP_CONNECTION,0);
  isInit=true;
  // #ifdef INTERNET_SHIELD
  for(int i=0;i<requestsCounter;i++)
    19a2:	21 96       	adiw	r28, 0x01	; 1
    19a4:	80 91 d2 04 	lds	r24, 0x04D2
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	c8 17       	cp	r28, r24
    19ac:	d9 07       	cpc	r29, r25
    19ae:	64 f3       	brlt	.-40     	; 0x1988 <_ZN14OneSheeldClass5beginEv+0x44>
    requestsArray[i]->sendInitFrame();
  free(requestsArray);
    19b0:	80 91 d0 04 	lds	r24, 0x04D0
    19b4:	90 91 d1 04 	lds	r25, 0x04D1
    19b8:	0e 94 f5 15 	call	0x2bea	; 0x2bea <free>
  // #endif
}
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <_ZN14OneSheeldClass12processInputEv>:
          }

}

void OneSheeldClass::processInput()
{
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	ec 01       	movw	r28, r24
  while(OneSheeldSerial.available())
    19cc:	16 c0       	rjmp	.+44     	; 0x19fa <_ZN14OneSheeldClass12processInputEv+0x38>
  {
    byte data=OneSheeldSerial.read();
    19ce:	88 81       	ld	r24, Y
    19d0:	99 81       	ldd	r25, Y+1	; 0x01
    19d2:	dc 01       	movw	r26, r24
    19d4:	ed 91       	ld	r30, X+
    19d6:	fc 91       	ld	r31, X
    19d8:	06 80       	ldd	r0, Z+6	; 0x06
    19da:	f7 81       	ldd	r31, Z+7	; 0x07
    19dc:	e0 2d       	mov	r30, r0
    19de:	09 95       	icall
    19e0:	8c 01       	movw	r16, r24
    processInput(data);
    19e2:	bc 01       	movw	r22, r24
    19e4:	77 27       	eor	r23, r23
    19e6:	ce 01       	movw	r24, r28
    19e8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN14OneSheeldClass12processInputEi>
    if(isSerialDataCallback)
    19ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ee:	88 23       	and	r24, r24
    19f0:	21 f0       	breq	.+8      	; 0x19fa <_ZN14OneSheeldClass12processInputEv+0x38>
      serialDataCallback(data);
    19f2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    19f4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    19f6:	80 2f       	mov	r24, r16
    19f8:	09 95       	icall

}

void OneSheeldClass::processInput()
{
  while(OneSheeldSerial.available())
    19fa:	88 81       	ld	r24, Y
    19fc:	99 81       	ldd	r25, Y+1	; 0x01
    19fe:	dc 01       	movw	r26, r24
    1a00:	ed 91       	ld	r30, X+
    1a02:	fc 91       	ld	r31, X
    1a04:	04 80       	ldd	r0, Z+4	; 0x04
    1a06:	f5 81       	ldd	r31, Z+5	; 0x05
    1a08:	e0 2d       	mov	r30, r0
    1a0a:	09 95       	icall
    1a0c:	89 2b       	or	r24, r25
    1a0e:	f9 f6       	brne	.-66     	; 0x19ce <_ZN14OneSheeldClass12processInputEv+0xc>
    byte data=OneSheeldSerial.read();
    processInput(data);
    if(isSerialDataCallback)
      serialDataCallback(data);
  }
}
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	08 95       	ret

00001a1a <_ZN14OneSheeldClass13isInACallbackEv>:
  }
}

bool OneSheeldClass::isInACallback()
{
  return inACallback && !callbacksInterrupts;
    1a1a:	80 91 27 05 	lds	r24, 0x0527
    1a1e:	88 23       	and	r24, r24
    1a20:	21 f0       	breq	.+8      	; 0x1a2a <_ZN14OneSheeldClass13isInACallbackEv+0x10>
    1a22:	90 91 26 05 	lds	r25, 0x0526
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	89 27       	eor	r24, r25
}
    1a2a:	08 95       	ret

00001a2c <_ZN14OneSheeldClass17enteringACallbackEv>:
    unsigned char pwm_out=(unsigned char)(ceil)(fraction*255);
    return pwm_out;
}

void OneSheeldClass::enteringACallback()
{
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	c8 2f       	mov	r28, r24
    1a32:	d9 2f       	mov	r29, r25
  if(!isInACallback())
    1a34:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN14OneSheeldClass13isInACallbackEv>
    1a38:	81 11       	cpse	r24, r1
    1a3a:	12 c0       	rjmp	.+36     	; 0x1a60 <_ZN14OneSheeldClass17enteringACallbackEv+0x34>
  {
    inACallback=true;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	80 93 27 05 	sts	0x0527, r24
    sendShieldFrame(ONESHEELD_ID,0,CALLBACK_ENTERED,0);
    1a42:	1f 92       	push	r1
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	8f 93       	push	r24
    1a48:	1f 92       	push	r1
    1a4a:	1f 92       	push	r1
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
  }
}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <_ZN14OneSheeldClass16exitingACallbackEv>:

void OneSheeldClass::exitingACallback()
{
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	c8 2f       	mov	r28, r24
    1a6c:	d9 2f       	mov	r29, r25
  if(isInACallback())
    1a6e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN14OneSheeldClass13isInACallbackEv>
    1a72:	88 23       	and	r24, r24
    1a74:	89 f0       	breq	.+34     	; 0x1a98 <_ZN14OneSheeldClass16exitingACallbackEv+0x32>
  {
    inACallback=false;
    1a76:	10 92 27 05 	sts	0x0527, r1
    sendShieldFrame(ONESHEELD_ID,0,CALLBACK_EXITED,0);
    1a7a:	1f 92       	push	r1
    1a7c:	84 e0       	ldi	r24, 0x04	; 4
    1a7e:	8f 93       	push	r24
    1a80:	1f 92       	push	r1
    1a82:	1f 92       	push	r1
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
  }
}
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <_Z11serialEventv>:
#else
OneSheeldClass OneSheeld(Serial);
void serialEvent()
#endif
{
  OneSheeld.processInput();      
    1a9e:	80 eb       	ldi	r24, 0xB0	; 176
    1aa0:	94 e0       	ldi	r25, 0x04	; 4
    1aa2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN14OneSheeldClass12processInputEv>
    1aa6:	08 95       	ret

00001aa8 <_GLOBAL__sub_I__ZN14OneSheeldClass6isInitE>:
bool OneSheeldClass::callbacksInterrupts=false;
bool OneSheeldClass::isFirstFrame=false;
ShieldParent * OneSheeldClass::shieldsArray[]={0};
// #ifdef INTERNET_SHIELD
byte OneSheeldClass::requestsCounter=0;
HttpRequest ** OneSheeldClass::requestsArray=(HttpRequest**)malloc(sizeof(HttpRequest*)*MAX_NO_OF_REQUESTS);
    1aa8:	88 e2       	ldi	r24, 0x28	; 40
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <malloc>
    1ab0:	90 93 d1 04 	sts	0x04D1, r25
    1ab4:	80 93 d0 04 	sts	0x04D0, r24
//Instantiating Object
#if defined(__AVR_ATmega32U4__) || defined(ARDUINO_LINUX)
OneSheeldClass OneSheeld(Serial1);
void serialEvent1()
#else
OneSheeldClass OneSheeld(Serial);
    1ab8:	6a e0       	ldi	r22, 0x0A	; 10
    1aba:	74 e0       	ldi	r23, 0x04	; 4
    1abc:	80 eb       	ldi	r24, 0xB0	; 176
    1abe:	94 e0       	ldi	r25, 0x04	; 4
    1ac0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN14OneSheeldClassC1ER6Stream>
    1ac4:	08 95       	ret

00001ac6 <_ZN12PrintlnClassC1Ehhh>:
#define FROM_ONESHEELD_LIBRARY
#include "OneSheeld.h"
#include "OneSheeldPrintln.h"

//Constructor
PrintlnClass::PrintlnClass(byte shid,byte writefnid, byte printfnid):PrintClass(shid,writefnid,printfnid)
    1ac6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <_ZN10PrintClassC1Ehhh>
    1aca:	08 95       	ret

00001acc <_ZN12PrintlnClass7printlnEPKc>:
	
	print(stringPointer);
}
//Print string with newline
void PrintlnClass::println(const char * stringData)
{
    1acc:	cf 92       	push	r12
    1ace:	df 92       	push	r13
    1ad0:	ef 92       	push	r14
    1ad2:	ff 92       	push	r15
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	7c 01       	movw	r14, r24
	stringNewLine[0]='\0';
	strcat(stringNewLine,stringData);
	strcat(stringNewLine,"\r\n");

	print(stringNewLine);
}
    1ae2:	0d b7       	in	r16, 0x3d	; 61
    1ae4:	1e b7       	in	r17, 0x3e	; 62
	print(stringPointer);
}
//Print string with newline
void PrintlnClass::println(const char * stringData)
{
	char stringNewLine[strlen(stringData)+3];
    1ae6:	fb 01       	movw	r30, r22
    1ae8:	01 90       	ld	r0, Z+
    1aea:	00 20       	and	r0, r0
    1aec:	e9 f7       	brne	.-6      	; 0x1ae8 <_ZN12PrintlnClass7printlnEPKc+0x1c>
    1aee:	9f 01       	movw	r18, r30
    1af0:	26 1b       	sub	r18, r22
    1af2:	37 0b       	sbc	r19, r23
    1af4:	2e 5f       	subi	r18, 0xFE	; 254
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
    1af8:	8d b7       	in	r24, 0x3d	; 61
    1afa:	9e b7       	in	r25, 0x3e	; 62
    1afc:	82 1b       	sub	r24, r18
    1afe:	93 0b       	sbc	r25, r19
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	9e bf       	out	0x3e, r25	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	8d bf       	out	0x3d, r24	; 61
    1b0a:	ed b7       	in	r30, 0x3d	; 61
    1b0c:	fe b7       	in	r31, 0x3e	; 62
    1b0e:	31 96       	adiw	r30, 0x01	; 1
    1b10:	6f 01       	movw	r12, r30
	stringNewLine[0]='\0';
    1b12:	ed b7       	in	r30, 0x3d	; 61
    1b14:	fe b7       	in	r31, 0x3e	; 62
    1b16:	11 82       	std	Z+1, r1	; 0x01
	strcat(stringNewLine,stringData);
    1b18:	c6 01       	movw	r24, r12
    1b1a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <strcat>
	strcat(stringNewLine,"\r\n");
    1b1e:	f6 01       	movw	r30, r12
    1b20:	01 90       	ld	r0, Z+
    1b22:	00 20       	and	r0, r0
    1b24:	e9 f7       	brne	.-6      	; 0x1b20 <_ZN12PrintlnClass7printlnEPKc+0x54>
    1b26:	31 97       	sbiw	r30, 0x01	; 1
    1b28:	8d e0       	ldi	r24, 0x0D	; 13
    1b2a:	9a e0       	ldi	r25, 0x0A	; 10
    1b2c:	a0 e0       	ldi	r26, 0x00	; 0
    1b2e:	80 83       	st	Z, r24
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	a2 83       	std	Z+2, r26	; 0x02

	print(stringNewLine);
    1b34:	b6 01       	movw	r22, r12
    1b36:	c7 01       	movw	r24, r14
    1b38:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN10PrintClass5printEPKc>
}
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	1e bf       	out	0x3e, r17	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	0d bf       	out	0x3d, r16	; 61
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	ff 90       	pop	r15
    1b50:	ef 90       	pop	r14
    1b52:	df 90       	pop	r13
    1b54:	cf 90       	pop	r12
    1b56:	08 95       	ret

00001b58 <_ZN12ShieldParent11processDataEv>:
class ShieldParent
{
protected:
	ShieldParent(byte);
	virtual void processFrame(void);
	virtual void processData(void){};
    1b58:	08 95       	ret

00001b5a <_ZN12ShieldParentC1Eh>:
#include "OneSheeld.h"

OneSheeldClass * ShieldParent::oneSheeldInstance=NULL;
bool ShieldParent::oneSheeldInstanceAvailable=false;

ShieldParent::ShieldParent(byte shieldNo)
    1b5a:	2c ee       	ldi	r18, 0xEC	; 236
    1b5c:	31 e0       	ldi	r19, 0x01	; 1
    1b5e:	fc 01       	movw	r30, r24
    1b60:	31 83       	std	Z+1, r19	; 0x01
    1b62:	20 83       	st	Z, r18
{
	shieldID = shieldNo ;
    1b64:	63 83       	std	Z+3, r22	; 0x03
	isCallBackSet=false;
    1b66:	12 82       	std	Z+2, r1	; 0x02
	OneSheeldClass::addToShieldsArray(this);
    1b68:	0e 94 94 08 	call	0x1128	; 0x1128 <_ZN14OneSheeldClass17addToShieldsArrayEP12ShieldParent>
    1b6c:	08 95       	ret

00001b6e <_ZN12ShieldParent11getShieldIdEv>:
}

byte ShieldParent::getShieldId()
{
	return shieldID;
}
    1b6e:	fc 01       	movw	r30, r24
    1b70:	83 81       	ldd	r24, Z+3	; 0x03
    1b72:	08 95       	ret

00001b74 <_ZN12ShieldParent20setOneSheeldInstanceER14OneSheeldClass>:
  return OneSheeld.isInACallback();
}

void ShieldParent::setOneSheeldInstance(OneSheeldClass & instance)
{
	oneSheeldInstance=&instance;
    1b74:	90 93 30 05 	sts	0x0530, r25
    1b78:	80 93 2f 05 	sts	0x052F, r24
	oneSheeldInstanceAvailable=true;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	80 93 2e 05 	sts	0x052E, r24
    1b82:	08 95       	ret

00001b84 <_ZN12ShieldParent22unSetOneSheeldInstanceEv>:
}

void ShieldParent::unSetOneSheeldInstance()
{
	oneSheeldInstance=NULL;
    1b84:	10 92 30 05 	sts	0x0530, r1
    1b88:	10 92 2f 05 	sts	0x052F, r1
	oneSheeldInstanceAvailable=false;
    1b8c:	10 92 2e 05 	sts	0x052E, r1
    1b90:	08 95       	ret

00001b92 <_ZN12ShieldParent20getOneSheeldInstanceEv>:
}

OneSheeldClass & ShieldParent::getOneSheeldInstance()
{
	if(oneSheeldInstanceAvailable)return *oneSheeldInstance;
    1b92:	80 91 2e 05 	lds	r24, 0x052E
    1b96:	88 23       	and	r24, r24
    1b98:	29 f0       	breq	.+10     	; 0x1ba4 <_ZN12ShieldParent20getOneSheeldInstanceEv+0x12>
    1b9a:	80 91 2f 05 	lds	r24, 0x052F
    1b9e:	90 91 30 05 	lds	r25, 0x0530
    1ba2:	08 95       	ret
	else return OneSheeld;
    1ba4:	80 eb       	ldi	r24, 0xB0	; 176
    1ba6:	94 e0       	ldi	r25, 0x04	; 4
}
    1ba8:	08 95       	ret

00001baa <_ZN12ShieldParent12processFrameEv>:

void ShieldParent::processFrame()
{
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	ec 01       	movw	r28, r24
	if(shieldID!=getOneSheeldInstance().getShieldId())return;
    1bb2:	1b 81       	ldd	r17, Y+3	; 0x03
    1bb4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN12ShieldParent20getOneSheeldInstanceEv>
    1bb8:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN14OneSheeldClass11getShieldIdEv>
    1bbc:	18 13       	cpse	r17, r24
    1bbe:	23 c0       	rjmp	.+70     	; 0x1c06 <_ZN12ShieldParent12processFrameEv+0x5c>
	byte functionID = getOneSheeldInstance().getFunctionId();
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN12ShieldParent20getOneSheeldInstanceEv>
    1bc6:	0e 94 a7 08 	call	0x114e	; 0x114e <_ZN14OneSheeldClass13getFunctionIdEv>

	if(functionID == CHECK_SELECTED)
    1bca:	8f 3f       	cpi	r24, 0xFF	; 255
    1bcc:	a9 f4       	brne	.+42     	; 0x1bf8 <_ZN12ShieldParent12processFrameEv+0x4e>
	{
		if(isCallBackSet && !isInACallback())
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	88 23       	and	r24, r24
    1bd2:	c9 f0       	breq	.+50     	; 0x1c06 <_ZN12ShieldParent12processFrameEv+0x5c>
  OneSheeld.exitingACallback();
}

bool ShieldParent::isInACallback()
{
  return OneSheeld.isInACallback();
    1bd4:	80 eb       	ldi	r24, 0xB0	; 176
    1bd6:	94 e0       	ldi	r25, 0x04	; 4
    1bd8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN14OneSheeldClass13isInACallbackEv>
	if(shieldID!=getOneSheeldInstance().getShieldId())return;
	byte functionID = getOneSheeldInstance().getFunctionId();

	if(functionID == CHECK_SELECTED)
	{
		if(isCallBackSet && !isInACallback())
    1bdc:	81 11       	cpse	r24, r1
    1bde:	13 c0       	rjmp	.+38     	; 0x1c06 <_ZN12ShieldParent12processFrameEv+0x5c>
	return shieldID;
}

void ShieldParent::enteringACallback()
{
  OneSheeld.enteringACallback();
    1be0:	80 eb       	ldi	r24, 0xB0	; 176
    1be2:	94 e0       	ldi	r25, 0x04	; 4
    1be4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <_ZN14OneSheeldClass17enteringACallbackEv>
	if(functionID == CHECK_SELECTED)
	{
		if(isCallBackSet && !isInACallback())
		{
				enteringACallback();
				(*selectedCallBack)();
    1be8:	ec 81       	ldd	r30, Y+4	; 0x04
    1bea:	fd 81       	ldd	r31, Y+5	; 0x05
    1bec:	09 95       	icall
  OneSheeld.enteringACallback();
}

void ShieldParent::exitingACallback()
{
  OneSheeld.exitingACallback();
    1bee:	80 eb       	ldi	r24, 0xB0	; 176
    1bf0:	94 e0       	ldi	r25, 0x04	; 4
    1bf2:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <_ZN14OneSheeldClass16exitingACallbackEv>
    1bf6:	07 c0       	rjmp	.+14     	; 0x1c06 <_ZN12ShieldParent12processFrameEv+0x5c>
				enteringACallback();
				(*selectedCallBack)();
				exitingACallback();
		}
	}
	else processData();
    1bf8:	e8 81       	ld	r30, Y
    1bfa:	f9 81       	ldd	r31, Y+1	; 0x01
    1bfc:	02 80       	ldd	r0, Z+2	; 0x02
    1bfe:	f3 81       	ldd	r31, Z+3	; 0x03
    1c00:	e0 2d       	mov	r30, r0
    1c02:	ce 01       	movw	r24, r28
    1c04:	09 95       	icall
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	08 95       	ret

00001c0e <_ZN14TerminalShield11processDataEv>:
  return count;
}

//Terminal Incomming Data processing
void TerminalShield::processData()
{
    1c0e:	6f 92       	push	r6
    1c10:	7f 92       	push	r7
    1c12:	8f 92       	push	r8
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	7c 01       	movw	r14, r24
	byte functionID = getOneSheeldInstance().getFunctionId();
    1c2c:	78 2e       	mov	r7, r24
    1c2e:	6f 2c       	mov	r6, r15
    1c30:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN12ShieldParent20getOneSheeldInstanceEv>
    1c34:	0e 94 a7 08 	call	0x114e	; 0x114e <_ZN14OneSheeldClass13getFunctionIdEv>
    1c38:	c8 2f       	mov	r28, r24
	byte dataLength = getOneSheeldInstance().getArgumentLength(0);
    1c3a:	c7 01       	movw	r24, r14
    1c3c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN12ShieldParent20getOneSheeldInstanceEv>
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	0e 94 aa 08 	call	0x1154	; 0x1154 <_ZN14OneSheeldClass17getArgumentLengthEh>
	if(functionID == TERMINAL_READ)
    1c46:	c1 30       	cpi	r28, 0x01	; 1
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <_ZN14TerminalShield11processDataEv+0x3e>
    1c4a:	46 c0       	rjmp	.+140    	; 0x1cd8 <_ZN14TerminalShield11processDataEv+0xca>
	{
			for (int j=0; j<dataLength; j++)
    1c4c:	c8 2e       	mov	r12, r24
    1c4e:	d1 2c       	mov	r13, r1
    1c50:	1c 14       	cp	r1, r12
    1c52:	1d 04       	cpc	r1, r13
    1c54:	0c f0       	brlt	.+2      	; 0x1c58 <_ZN14TerminalShield11processDataEv+0x4a>
    1c56:	40 c0       	rjmp	.+128    	; 0x1cd8 <_ZN14TerminalShield11processDataEv+0xca>
    1c58:	81 2c       	mov	r8, r1
    1c5a:	91 2c       	mov	r9, r1
public:
  CircularBuffer() :
    wp_(buf_), rp_(buf_), tail_(buf_+Size),  remain_(0) {}
  ~CircularBuffer() {}
  void push(T value) {
    if(remain_==Size)return;
    1c5c:	e7 01       	movw	r28, r14
    1c5e:	c1 5b       	subi	r28, 0xB1	; 177
    1c60:	df 4f       	sbci	r29, 0xFF	; 255
    *wp_++ = value;
    1c62:	87 01       	movw	r16, r14
    1c64:	07 5b       	subi	r16, 0xB7	; 183
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    remain_++;
    if (wp_ == tail_) wp_ = buf_;
    1c68:	57 01       	movw	r10, r14
    1c6a:	8d e4       	ldi	r24, 0x4D	; 77
    1c6c:	a8 0e       	add	r10, r24
    1c6e:	b1 1c       	adc	r11, r1
    1c70:	a9 e0       	ldi	r26, 0x09	; 9
    1c72:	ea 0e       	add	r14, r26
    1c74:	f1 1c       	adc	r15, r1
			{
				buffer.push(getOneSheeldInstance().getArgumentData(0)[j]);
    1c76:	87 2d       	mov	r24, r7
    1c78:	96 2d       	mov	r25, r6
    1c7a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN12ShieldParent20getOneSheeldInstanceEv>
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN14OneSheeldClass15getArgumentDataEh>
    1c84:	88 0d       	add	r24, r8
    1c86:	99 1d       	adc	r25, r9
    1c88:	fc 01       	movw	r30, r24
    1c8a:	20 81       	ld	r18, Z
public:
  CircularBuffer() :
    wp_(buf_), rp_(buf_), tail_(buf_+Size),  remain_(0) {}
  ~CircularBuffer() {}
  void push(T value) {
    if(remain_==Size)return;
    1c8c:	88 81       	ld	r24, Y
    1c8e:	99 81       	ldd	r25, Y+1	; 0x01
    1c90:	80 34       	cpi	r24, 0x40	; 64
    1c92:	91 05       	cpc	r25, r1
    1c94:	d9 f0       	breq	.+54     	; 0x1ccc <_ZN14TerminalShield11processDataEv+0xbe>
    *wp_++ = value;
    1c96:	d8 01       	movw	r26, r16
    1c98:	ed 91       	ld	r30, X+
    1c9a:	fc 91       	ld	r31, X
    1c9c:	11 97       	sbiw	r26, 0x01	; 1
    1c9e:	cf 01       	movw	r24, r30
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	11 96       	adiw	r26, 0x01	; 1
    1ca4:	9c 93       	st	X, r25
    1ca6:	8e 93       	st	-X, r24
    1ca8:	20 83       	st	Z, r18
    remain_++;
    1caa:	28 81       	ld	r18, Y
    1cac:	39 81       	ldd	r19, Y+1	; 0x01
    1cae:	2f 5f       	subi	r18, 0xFF	; 255
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	39 83       	std	Y+1, r19	; 0x01
    1cb4:	28 83       	st	Y, r18
    if (wp_ == tail_) wp_ = buf_;
    1cb6:	2d 91       	ld	r18, X+
    1cb8:	3c 91       	ld	r19, X
    1cba:	11 97       	sbiw	r26, 0x01	; 1
    1cbc:	f5 01       	movw	r30, r10
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	28 17       	cp	r18, r24
    1cc4:	39 07       	cpc	r19, r25
    1cc6:	11 f4       	brne	.+4      	; 0x1ccc <_ZN14TerminalShield11processDataEv+0xbe>
    1cc8:	ed 92       	st	X+, r14
    1cca:	fc 92       	st	X, r15
{
	byte functionID = getOneSheeldInstance().getFunctionId();
	byte dataLength = getOneSheeldInstance().getArgumentLength(0);
	if(functionID == TERMINAL_READ)
	{
			for (int j=0; j<dataLength; j++)
    1ccc:	ff ef       	ldi	r31, 0xFF	; 255
    1cce:	8f 1a       	sub	r8, r31
    1cd0:	9f 0a       	sbc	r9, r31
    1cd2:	8c 14       	cp	r8, r12
    1cd4:	9d 04       	cpc	r9, r13
    1cd6:	79 f6       	brne	.-98     	; 0x1c76 <_ZN14TerminalShield11processDataEv+0x68>
			{
				buffer.push(getOneSheeldInstance().getArgumentData(0)[j]);
			}
	}
}
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	df 90       	pop	r13
    1ce6:	cf 90       	pop	r12
    1ce8:	bf 90       	pop	r11
    1cea:	af 90       	pop	r10
    1cec:	9f 90       	pop	r9
    1cee:	8f 90       	pop	r8
    1cf0:	7f 90       	pop	r7
    1cf2:	6f 90       	pop	r6
    1cf4:	08 95       	ret

00001cf6 <_ZN14TerminalShieldC1Ev>:
#define FROM_ONESHEELD_LIBRARY
#include "OneSheeld.h"
#include "TerminalShield.h"

//Constructor
TerminalShield::TerminalShield():PrintlnClass(TERMINAL_ID,TERMINAL_WRITE,TERMINAL_PRINT),ShieldParent(TERMINAL_ID)
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	ec 01       	movw	r28, r24
    1cfc:	22 e0       	ldi	r18, 0x02	; 2
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	66 e2       	ldi	r22, 0x26	; 38
    1d02:	06 96       	adiw	r24, 0x06	; 6
    1d04:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <_ZN12PrintlnClassC1Ehhh>
    1d08:	66 e2       	ldi	r22, 0x26	; 38
    1d0a:	ce 01       	movw	r24, r28
    1d0c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN12ShieldParentC1Eh>
    1d10:	84 ef       	ldi	r24, 0xF4	; 244
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	99 83       	std	Y+1, r25	; 0x01
    1d16:	88 83       	st	Y, r24

template <typename T, uint16_t Size>
class CircularBuffer {
public:
  CircularBuffer() :
    wp_(buf_), rp_(buf_), tail_(buf_+Size),  remain_(0) {}
    1d18:	ce 01       	movw	r24, r28
    1d1a:	09 96       	adiw	r24, 0x09	; 9
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e7 5b       	subi	r30, 0xB7	; 183
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	80 83       	st	Z, r24
    1d26:	de 01       	movw	r26, r28
    1d28:	a5 5b       	subi	r26, 0xB5	; 181
    1d2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2c:	11 96       	adiw	r26, 0x01	; 1
    1d2e:	9c 93       	st	X, r25
    1d30:	8e 93       	st	-X, r24
    1d32:	12 96       	adiw	r26, 0x02	; 2
    1d34:	ed 93       	st	X+, r30
    1d36:	fc 93       	st	X, r31
    1d38:	c1 5b       	subi	r28, 0xB1	; 177
    1d3a:	df 4f       	sbci	r29, 0xFF	; 255
    1d3c:	19 82       	std	Y+1, r1	; 0x01
    1d3e:	18 82       	st	Y, r1
{}
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	08 95       	ret

00001d46 <_ZN11HttpRequest13sendInitFrameEPKc>:
		free (url);
	}
}

void HttpRequest::sendInitFrame(const char * _url)
{
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
	//Check length of string 
	int _urlLength = strlen(_url);
    1d56:	fb 01       	movw	r30, r22
    1d58:	01 90       	ld	r0, Z+
    1d5a:	00 20       	and	r0, r0
    1d5c:	e9 f7       	brne	.-6      	; 0x1d58 <_ZN11HttpRequest13sendInitFrameEPKc+0x12>
    1d5e:	31 97       	sbiw	r30, 0x01	; 1
    1d60:	ef 01       	movw	r28, r30
    1d62:	c6 1b       	sub	r28, r22
    1d64:	d7 0b       	sbc	r29, r23
	if(!_urlLength) return;
    1d66:	f1 f1       	breq	.+124    	; 0x1de4 <_ZN11HttpRequest13sendInitFrameEPKc+0x9e>
    1d68:	8b 01       	movw	r16, r22
    1d6a:	7c 01       	movw	r14, r24
	OneSheeld.sendShieldFrame(INTERNET_ID,0,HTTP_REQUEST_URL,2,new FunctionArg(2,(byte*)localRequestId),
														  new FunctionArg(_urlLength,(byte*)_url));
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 1f 12 	call	0x243e	; 0x243e <_Znwj>
    1d74:	6c 01       	movw	r12, r24
	byte * data;
	bool saveData;
public:
	FunctionArg(int l ,byte * d, bool _saveData=false)
	{
		saveData=_saveData;
    1d76:	dc 01       	movw	r26, r24
    1d78:	13 96       	adiw	r26, 0x03	; 3
    1d7a:	1c 92       	st	X, r1
		length=(l>0xff)?0xff:l;
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	cf 3f       	cpi	r28, 0xFF	; 255
    1d80:	d1 05       	cpc	r29, r1
    1d82:	19 f0       	breq	.+6      	; 0x1d8a <_ZN11HttpRequest13sendInitFrameEPKc+0x44>
    1d84:	14 f0       	brlt	.+4      	; 0x1d8a <_ZN11HttpRequest13sendInitFrameEPKc+0x44>
    1d86:	ef ef       	ldi	r30, 0xFF	; 255
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	d6 01       	movw	r26, r12
    1d8c:	ec 93       	st	X, r30
			data=(byte *)malloc(sizeof(byte)*length);
			memcpy(data,d,length);
		}
		else
		{
			data=d;
    1d8e:	12 96       	adiw	r26, 0x02	; 2
    1d90:	1c 93       	st	X, r17
    1d92:	0e 93       	st	-X, r16
    1d94:	11 97       	sbiw	r26, 0x01	; 1
    1d96:	84 e0       	ldi	r24, 0x04	; 4
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 1f 12 	call	0x243e	; 0x243e <_Znwj>
    1d9e:	fc 01       	movw	r30, r24
	byte * data;
	bool saveData;
public:
	FunctionArg(int l ,byte * d, bool _saveData=false)
	{
		saveData=_saveData;
    1da0:	13 82       	std	Z+3, r1	; 0x03
		length=(l>0xff)?0xff:l;
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	80 83       	st	Z, r24
void HttpRequest::sendInitFrame(const char * _url)
{
	//Check length of string 
	int _urlLength = strlen(_url);
	if(!_urlLength) return;
	OneSheeld.sendShieldFrame(INTERNET_ID,0,HTTP_REQUEST_URL,2,new FunctionArg(2,(byte*)localRequestId),
    1da6:	97 01       	movw	r18, r14
    1da8:	2d 5f       	subi	r18, 0xFD	; 253
    1daa:	3f 4f       	sbci	r19, 0xFF	; 255
			data=(byte *)malloc(sizeof(byte)*length);
			memcpy(data,d,length);
		}
		else
		{
			data=d;
    1dac:	32 83       	std	Z+2, r19	; 0x02
    1dae:	21 83       	std	Z+1, r18	; 0x01
														  new FunctionArg(_urlLength,(byte*)_url));
    1db0:	df 92       	push	r13
    1db2:	cf 92       	push	r12
    1db4:	ff 93       	push	r31
    1db6:	ef 93       	push	r30
    1db8:	8f 93       	push	r24
    1dba:	c1 e0       	ldi	r28, 0x01	; 1
    1dbc:	cf 93       	push	r28
    1dbe:	1f 92       	push	r1
    1dc0:	89 e2       	ldi	r24, 0x29	; 41
    1dc2:	8f 93       	push	r24
    1dc4:	80 eb       	ldi	r24, 0xB0	; 176
    1dc6:	94 e0       	ldi	r25, 0x04	; 4
    1dc8:	9f 93       	push	r25
    1dca:	8f 93       	push	r24
    1dcc:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
	isInitFrameSent=true;
    1dd0:	f7 01       	movw	r30, r14
    1dd2:	c0 83       	st	Z, r28
    1dd4:	8d b7       	in	r24, 0x3d	; 61
    1dd6:	9e b7       	in	r25, 0x3e	; 62
    1dd8:	0a 96       	adiw	r24, 0x0a	; 10
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	9e bf       	out	0x3e, r25	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	8d bf       	out	0x3d, r24	; 61
}
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	df 90       	pop	r13
    1df2:	cf 90       	pop	r12
    1df4:	08 95       	ret

00001df6 <_ZN11HttpRequest13sendInitFrameEv>:
		sendInitFrame(_url);
	}
}
// #endif
void HttpRequest::sendInitFrame()
{
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
	if(!isInitFrameSent)
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	20 81       	ld	r18, Z
    1dfe:	21 11       	cpse	r18, r1
    1e00:	09 c0       	rjmp	.+18     	; 0x1e14 <_ZN11HttpRequest13sendInitFrameEv+0x1e>
    1e02:	ec 01       	movw	r28, r24
	{
		sendInitFrame(url);
    1e04:	61 81       	ldd	r22, Z+1	; 0x01
    1e06:	72 81       	ldd	r23, Z+2	; 0x02
    1e08:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <_ZN11HttpRequest13sendInitFrameEPKc>
		free (url);
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	0e 94 f5 15 	call	0x2bea	; 0x2bea <free>
	}
}
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <_ZN10PrintClassC1Ehhh>:




//Constructor 
PrintClass::PrintClass(byte shid,byte writefnid, byte printfnid)
    1e1a:	fc 01       	movw	r30, r24
{
	shieldId=shid;
    1e1c:	62 83       	std	Z+2, r22	; 0x02
	print_fn_id=printfnid;
    1e1e:	20 83       	st	Z, r18
	write_fn_id=writefnid;
    1e20:	41 83       	std	Z+1, r20	; 0x01
    1e22:	08 95       	ret

00001e24 <_ZN10PrintClass5printEPKc>:
	
	OneSheeld.sendShieldFrame(shieldId,0,print_fn_id,1,new FunctionArg(strlen(stringPointer),(byte *)stringPointer));	
}
//Print string
void PrintClass::print(const char * stringData)
{
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
	//Check length of string 
	int stringDataLength = strlen(stringData);
    1e30:	fb 01       	movw	r30, r22
    1e32:	01 90       	ld	r0, Z+
    1e34:	00 20       	and	r0, r0
    1e36:	e9 f7       	brne	.-6      	; 0x1e32 <_ZN10PrintClass5printEPKc+0xe>
    1e38:	31 97       	sbiw	r30, 0x01	; 1
    1e3a:	ef 01       	movw	r28, r30
    1e3c:	c6 1b       	sub	r28, r22
    1e3e:	d7 0b       	sbc	r29, r23
	if(!stringDataLength) return;
    1e40:	71 f1       	breq	.+92     	; 0x1e9e <_ZN10PrintClass5printEPKc+0x7a>
    1e42:	8b 01       	movw	r16, r22
    1e44:	7c 01       	movw	r14, r24
	OneSheeld.sendShieldFrame(shieldId,0,print_fn_id,1,new FunctionArg(stringDataLength,(byte*)stringData));	
    1e46:	84 e0       	ldi	r24, 0x04	; 4
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 1f 12 	call	0x243e	; 0x243e <_Znwj>
    1e4e:	dc 01       	movw	r26, r24
	byte * data;
	bool saveData;
public:
	FunctionArg(int l ,byte * d, bool _saveData=false)
	{
		saveData=_saveData;
    1e50:	13 96       	adiw	r26, 0x03	; 3
    1e52:	1c 92       	st	X, r1
    1e54:	13 97       	sbiw	r26, 0x03	; 3
		length=(l>0xff)?0xff:l;
    1e56:	fe 01       	movw	r30, r28
    1e58:	cf 3f       	cpi	r28, 0xFF	; 255
    1e5a:	d1 05       	cpc	r29, r1
    1e5c:	19 f0       	breq	.+6      	; 0x1e64 <_ZN10PrintClass5printEPKc+0x40>
    1e5e:	14 f0       	brlt	.+4      	; 0x1e64 <_ZN10PrintClass5printEPKc+0x40>
    1e60:	ef ef       	ldi	r30, 0xFF	; 255
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	ec 93       	st	X, r30
			data=(byte *)malloc(sizeof(byte)*length);
			memcpy(data,d,length);
		}
		else
		{
			data=d;
    1e66:	12 96       	adiw	r26, 0x02	; 2
    1e68:	1c 93       	st	X, r17
    1e6a:	0e 93       	st	-X, r16
    1e6c:	11 97       	sbiw	r26, 0x01	; 1
    1e6e:	bf 93       	push	r27
    1e70:	af 93       	push	r26
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	8f 93       	push	r24
    1e76:	f7 01       	movw	r30, r14
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 93       	push	r24
    1e7c:	1f 92       	push	r1
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	8f 93       	push	r24
    1e82:	80 eb       	ldi	r24, 0xB0	; 176
    1e84:	94 e0       	ldi	r25, 0x04	; 4
    1e86:	9f 93       	push	r25
    1e88:	8f 93       	push	r24
    1e8a:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
    1e8e:	8d b7       	in	r24, 0x3d	; 61
    1e90:	9e b7       	in	r25, 0x3e	; 62
    1e92:	08 96       	adiw	r24, 0x08	; 8
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	9e bf       	out	0x3e, r25	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	8d bf       	out	0x3d, r24	; 61
}
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	08 95       	ret

00001eac <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    1eac:	20 91 73 05 	lds	r18, 0x0573
    1eb0:	30 91 74 05 	lds	r19, 0x0574
    1eb4:	28 17       	cp	r18, r24
    1eb6:	39 07       	cpc	r19, r25
    1eb8:	f9 f4       	brne	.+62     	; 0x1ef8 <_ZN14SoftwareSerial4readEv+0x4c>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    1eba:	90 91 31 05 	lds	r25, 0x0531
    1ebe:	80 91 32 05 	lds	r24, 0x0532
    1ec2:	98 17       	cp	r25, r24
    1ec4:	e1 f0       	breq	.+56     	; 0x1efe <_ZN14SoftwareSerial4readEv+0x52>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
    1ec6:	e0 91 31 05 	lds	r30, 0x0531
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	ed 5c       	subi	r30, 0xCD	; 205
    1ece:	fa 4f       	sbci	r31, 0xFA	; 250
    1ed0:	80 81       	ld	r24, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
    1ed2:	20 91 31 05 	lds	r18, 0x0531
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	2f 5f       	subi	r18, 0xFF	; 255
    1eda:	3f 4f       	sbci	r19, 0xFF	; 255
    1edc:	2f 73       	andi	r18, 0x3F	; 63
    1ede:	30 78       	andi	r19, 0x80	; 128
    1ee0:	33 23       	and	r19, r19
    1ee2:	34 f4       	brge	.+12     	; 0x1ef0 <_ZN14SoftwareSerial4readEv+0x44>
    1ee4:	21 50       	subi	r18, 0x01	; 1
    1ee6:	31 09       	sbc	r19, r1
    1ee8:	20 6c       	ori	r18, 0xC0	; 192
    1eea:	3f 6f       	ori	r19, 0xFF	; 255
    1eec:	2f 5f       	subi	r18, 0xFF	; 255
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	20 93 31 05 	sts	0x0531, r18
  return d;
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	08 95       	ret

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
    1ef8:	8f ef       	ldi	r24, 0xFF	; 255
    1efa:	9f ef       	ldi	r25, 0xFF	; 255
    1efc:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    1efe:	8f ef       	ldi	r24, 0xFF	; 255
    1f00:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
    1f02:	08 95       	ret

00001f04 <_ZN14SoftwareSerial9availableEv>:

int SoftwareSerial::available()
{
  if (!isListening())
    1f04:	20 91 73 05 	lds	r18, 0x0573
    1f08:	30 91 74 05 	lds	r19, 0x0574
    1f0c:	28 17       	cp	r18, r24
    1f0e:	39 07       	cpc	r19, r25
    1f10:	b1 f4       	brne	.+44     	; 0x1f3e <_ZN14SoftwareSerial9availableEv+0x3a>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
    1f12:	20 91 32 05 	lds	r18, 0x0532
    1f16:	80 91 31 05 	lds	r24, 0x0531
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	20 5c       	subi	r18, 0xC0	; 192
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f20:	28 1b       	sub	r18, r24
    1f22:	31 09       	sbc	r19, r1
    1f24:	2f 73       	andi	r18, 0x3F	; 63
    1f26:	30 78       	andi	r19, 0x80	; 128
    1f28:	33 23       	and	r19, r19
    1f2a:	34 f4       	brge	.+12     	; 0x1f38 <_ZN14SoftwareSerial9availableEv+0x34>
    1f2c:	21 50       	subi	r18, 0x01	; 1
    1f2e:	31 09       	sbc	r19, r1
    1f30:	20 6c       	ori	r18, 0xC0	; 192
    1f32:	3f 6f       	ori	r19, 0xFF	; 255
    1f34:	2f 5f       	subi	r18, 0xFF	; 255
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	82 2f       	mov	r24, r18
    1f3a:	93 2f       	mov	r25, r19
    1f3c:	08 95       	ret
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
    1f42:	08 95       	ret

00001f44 <_ZN14SoftwareSerial5writeEh>:

size_t SoftwareSerial::write(uint8_t b)
{
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	ec 01       	movw	r28, r24
  if (_tx_delay == 0) {
    1f4c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1f4e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1f50:	41 15       	cp	r20, r1
    1f52:	51 05       	cpc	r21, r1
    1f54:	29 f4       	brne	.+10     	; 0x1f60 <_ZN14SoftwareSerial5writeEh+0x1c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9b 83       	std	Y+3, r25	; 0x03
    1f5c:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
    1f5e:	39 c0       	rjmp	.+114    	; 0x1fd2 <_ZN14SoftwareSerial5writeEh+0x8e>

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
    1f60:	a9 89       	ldd	r26, Y+17	; 0x11
    1f62:	ba 89       	ldd	r27, Y+18	; 0x12
  uint8_t reg_mask = _transmitBitMask;
    1f64:	38 89       	ldd	r19, Y+16	; 0x10
  uint8_t inv_mask = ~_transmitBitMask;
    1f66:	83 2f       	mov	r24, r19
    1f68:	80 95       	com	r24
  uint8_t oldSREG = SREG;
    1f6a:	1f b7       	in	r17, 0x3f	; 63
  bool inv = _inverse_logic;
    1f6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
  uint16_t delay = _tx_delay;

  if (inv)
    1f6e:	91 fb       	bst	r25, 1
    1f70:	77 27       	eor	r23, r23
    1f72:	70 f9       	bld	r23, 0
    1f74:	91 fd       	sbrc	r25, 1
    b = ~b;
    1f76:	60 95       	com	r22

  cli();  // turn off interrupts for a clean txmit
    1f78:	f8 94       	cli

  // Write the start bit
  if (inv)
    1f7a:	77 23       	and	r23, r23
    1f7c:	21 f0       	breq	.+8      	; 0x1f86 <_ZN14SoftwareSerial5writeEh+0x42>
    *reg |= reg_mask;
    1f7e:	9c 91       	ld	r25, X
    1f80:	93 2b       	or	r25, r19
    1f82:	9c 93       	st	X, r25
    1f84:	03 c0       	rjmp	.+6      	; 0x1f8c <_ZN14SoftwareSerial5writeEh+0x48>
  else
    *reg &= inv_mask;
    1f86:	9c 91       	ld	r25, X
    1f88:	98 23       	and	r25, r24
    1f8a:	9c 93       	st	X, r25
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1f8c:	fa 01       	movw	r30, r20
    1f8e:	31 97       	sbiw	r30, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <_ZN14SoftwareSerial5writeEh+0x4a>
    1f92:	98 e0       	ldi	r25, 0x08	; 8
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
    1f94:	60 ff       	sbrs	r22, 0
    1f96:	04 c0       	rjmp	.+8      	; 0x1fa0 <_ZN14SoftwareSerial5writeEh+0x5c>
      *reg |= reg_mask; // send 1
    1f98:	2c 91       	ld	r18, X
    1f9a:	23 2b       	or	r18, r19
    1f9c:	2c 93       	st	X, r18
    1f9e:	03 c0       	rjmp	.+6      	; 0x1fa6 <_ZN14SoftwareSerial5writeEh+0x62>
    else
      *reg &= inv_mask; // send 0
    1fa0:	2c 91       	ld	r18, X
    1fa2:	28 23       	and	r18, r24
    1fa4:	2c 93       	st	X, r18
    1fa6:	fa 01       	movw	r30, r20
    1fa8:	31 97       	sbiw	r30, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <_ZN14SoftwareSerial5writeEh+0x64>

    tunedDelay(delay);
    b >>= 1;
    1fac:	66 95       	lsr	r22
    1fae:	91 50       	subi	r25, 0x01	; 1
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
    1fb0:	89 f7       	brne	.-30     	; 0x1f94 <_ZN14SoftwareSerial5writeEh+0x50>
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
    1fb2:	77 23       	and	r23, r23
    1fb4:	21 f0       	breq	.+8      	; 0x1fbe <_ZN14SoftwareSerial5writeEh+0x7a>
    *reg &= inv_mask;
    1fb6:	9c 91       	ld	r25, X
    1fb8:	89 23       	and	r24, r25
    1fba:	8c 93       	st	X, r24
    1fbc:	03 c0       	rjmp	.+6      	; 0x1fc4 <_ZN14SoftwareSerial5writeEh+0x80>
  else
    *reg |= reg_mask;
    1fbe:	8c 91       	ld	r24, X
    1fc0:	38 2b       	or	r19, r24
    1fc2:	3c 93       	st	X, r19

  SREG = oldSREG; // turn interrupts back on
    1fc4:	1f bf       	out	0x3f, r17	; 63
    1fc6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fc8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <_ZN14SoftwareSerial5writeEh+0x86>
  tunedDelay(_tx_delay);
  
  return 1;
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
}
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	1f 91       	pop	r17
    1fda:	08 95       	ret

00001fdc <_ZN14SoftwareSerial5flushEv>:

void SoftwareSerial::flush()
{
  if (!isListening())
    1fdc:	20 91 73 05 	lds	r18, 0x0573
    1fe0:	30 91 74 05 	lds	r19, 0x0574
    1fe4:	28 17       	cp	r18, r24
    1fe6:	39 07       	cpc	r19, r25
    1fe8:	39 f4       	brne	.+14     	; 0x1ff8 <_ZN14SoftwareSerial5flushEv+0x1c>
    return;

  uint8_t oldSREG = SREG;
    1fea:	8f b7       	in	r24, 0x3f	; 63
  cli();
    1fec:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
    1fee:	10 92 32 05 	sts	0x0532, r1
    1ff2:	10 92 31 05 	sts	0x0531, r1
  SREG = oldSREG;
    1ff6:	8f bf       	out	0x3f, r24	; 63
    1ff8:	08 95       	ret

00001ffa <_ZN14SoftwareSerial4peekEv>:
}

int SoftwareSerial::peek()
{
  if (!isListening())
    1ffa:	20 91 73 05 	lds	r18, 0x0573
    1ffe:	30 91 74 05 	lds	r19, 0x0574
    2002:	28 17       	cp	r18, r24
    2004:	39 07       	cpc	r19, r25
    2006:	71 f4       	brne	.+28     	; 0x2024 <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    2008:	90 91 31 05 	lds	r25, 0x0531
    200c:	80 91 32 05 	lds	r24, 0x0532
    2010:	98 17       	cp	r25, r24
    2012:	59 f0       	breq	.+22     	; 0x202a <_ZN14SoftwareSerial4peekEv+0x30>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
    2014:	e0 91 31 05 	lds	r30, 0x0531
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	ed 5c       	subi	r30, 0xCD	; 205
    201c:	fa 4f       	sbci	r31, 0xFA	; 250
    201e:	80 81       	ld	r24, Z
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	08 95       	ret
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
    2024:	8f ef       	ldi	r24, 0xFF	; 255
    2026:	9f ef       	ldi	r25, 0xFF	; 255
    2028:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    202a:	8f ef       	ldi	r24, 0xFF	; 255
    202c:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
    202e:	08 95       	ret

00002030 <_ZN14SoftwareSerial13stopListeningEv>:
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    2030:	e0 91 73 05 	lds	r30, 0x0573
    2034:	f0 91 74 05 	lds	r31, 0x0574
    2038:	e8 17       	cp	r30, r24
    203a:	f9 07       	cpc	r31, r25
    203c:	69 f4       	brne	.+26     	; 0x2058 <_ZN14SoftwareSerial13stopListeningEv+0x28>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    203e:	a3 89       	ldd	r26, Z+19	; 0x13
    2040:	b4 89       	ldd	r27, Z+20	; 0x14
    2042:	9c 91       	ld	r25, X
    2044:	85 89       	ldd	r24, Z+21	; 0x15
    2046:	80 95       	com	r24
    2048:	89 23       	and	r24, r25
    204a:	8c 93       	st	X, r24
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    204c:	10 92 74 05 	sts	0x0574, r1
    2050:	10 92 73 05 	sts	0x0573, r1
    return true;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	08 95       	ret
  }
  return false;
    2058:	80 e0       	ldi	r24, 0x00	; 0
}
    205a:	08 95       	ret

0000205c <_ZN14SoftwareSerial6listenEv>:
}

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	ec 01       	movw	r28, r24
  if (!_rx_delay_stopbit)
    2062:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2064:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2066:	89 2b       	or	r24, r25
    2068:	f1 f0       	breq	.+60     	; 0x20a6 <_ZN14SoftwareSerial6listenEv+0x4a>
    return false;

  if (active_object != this)
    206a:	80 91 73 05 	lds	r24, 0x0573
    206e:	90 91 74 05 	lds	r25, 0x0574
    2072:	8c 17       	cp	r24, r28
    2074:	9d 07       	cpc	r25, r29
    2076:	c9 f0       	breq	.+50     	; 0x20aa <_ZN14SoftwareSerial6listenEv+0x4e>
  {
    if (active_object)
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	11 f0       	breq	.+4      	; 0x2080 <_ZN14SoftwareSerial6listenEv+0x24>
      active_object->stopListening();
    207c:	0e 94 18 10 	call	0x2030	; 0x2030 <_ZN14SoftwareSerial13stopListeningEv>

    _buffer_overflow = false;
    2080:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2082:	8e 7f       	andi	r24, 0xFE	; 254
    2084:	8e 8f       	std	Y+30, r24	; 0x1e
    _receive_buffer_head = _receive_buffer_tail = 0;
    2086:	10 92 32 05 	sts	0x0532, r1
    208a:	10 92 31 05 	sts	0x0531, r1
    active_object = this;
    208e:	d0 93 74 05 	sts	0x0574, r29
    2092:	c0 93 73 05 	sts	0x0573, r28
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2096:	eb 89       	ldd	r30, Y+19	; 0x13
    2098:	fc 89       	ldd	r31, Y+20	; 0x14
    209a:	90 81       	ld	r25, Z
    209c:	8d 89       	ldd	r24, Y+21	; 0x15
    209e:	89 2b       	or	r24, r25
    20a0:	80 83       	st	Z, r24
    _buffer_overflow = false;
    _receive_buffer_head = _receive_buffer_tail = 0;
    active_object = this;

    setRxIntMsk(true);
    return true;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	03 c0       	rjmp	.+6      	; 0x20ac <_ZN14SoftwareSerial6listenEv+0x50>
// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    return false;
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <_ZN14SoftwareSerial6listenEv+0x50>

    setRxIntMsk(true);
    return true;
  }

  return false;
    20aa:	80 e0       	ldi	r24, 0x00	; 0
}
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	08 95       	ret

000020b2 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    20b2:	1f 92       	push	r1
    20b4:	0f 92       	push	r0
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	0f 92       	push	r0
    20ba:	11 24       	eor	r1, r1
    20bc:	2f 93       	push	r18
    20be:	3f 93       	push	r19
    20c0:	4f 93       	push	r20
    20c2:	5f 93       	push	r21
    20c4:	6f 93       	push	r22
    20c6:	7f 93       	push	r23
    20c8:	8f 93       	push	r24
    20ca:	9f 93       	push	r25
    20cc:	af 93       	push	r26
    20ce:	bf 93       	push	r27
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	ef 93       	push	r30
    20d6:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    20d8:	a0 91 73 05 	lds	r26, 0x0573
    20dc:	b0 91 74 05 	lds	r27, 0x0574
    20e0:	10 97       	sbiw	r26, 0x00	; 0
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <__vector_3+0x34>
    20e4:	81 c0       	rjmp	.+258    	; 0x21e8 <__vector_3+0x136>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    20e6:	5e 96       	adiw	r26, 0x1e	; 30
    20e8:	8c 91       	ld	r24, X
    20ea:	5e 97       	sbiw	r26, 0x1e	; 30
    20ec:	81 ff       	sbrs	r24, 1
    20ee:	0d c0       	rjmp	.+26     	; 0x210a <__vector_3+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    20f0:	1e 96       	adiw	r26, 0x0e	; 14
    20f2:	ed 91       	ld	r30, X+
    20f4:	fc 91       	ld	r31, X
    20f6:	1f 97       	sbiw	r26, 0x0f	; 15
    20f8:	90 81       	ld	r25, Z
    20fa:	1d 96       	adiw	r26, 0x0d	; 13
    20fc:	8c 91       	ld	r24, X
    20fe:	1d 97       	sbiw	r26, 0x0d	; 13
    2100:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	71 f4       	brne	.+28     	; 0x2122 <__vector_3+0x70>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	0c c0       	rjmp	.+24     	; 0x2122 <__vector_3+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    210a:	1e 96       	adiw	r26, 0x0e	; 14
    210c:	ed 91       	ld	r30, X+
    210e:	fc 91       	ld	r31, X
    2110:	1f 97       	sbiw	r26, 0x0f	; 15
    2112:	90 81       	ld	r25, Z
    2114:	1d 96       	adiw	r26, 0x0d	; 13
    2116:	8c 91       	ld	r24, X
    2118:	1d 97       	sbiw	r26, 0x0d	; 13
    211a:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	09 f0       	breq	.+2      	; 0x2122 <__vector_3+0x70>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	88 23       	and	r24, r24
    2124:	09 f4       	brne	.+2      	; 0x2128 <__vector_3+0x76>
    2126:	60 c0       	rjmp	.+192    	; 0x21e8 <__vector_3+0x136>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2128:	53 96       	adiw	r26, 0x13	; 19
    212a:	ed 91       	ld	r30, X+
    212c:	fc 91       	ld	r31, X
    212e:	54 97       	sbiw	r26, 0x14	; 20
    2130:	90 81       	ld	r25, Z
    2132:	55 96       	adiw	r26, 0x15	; 21
    2134:	8c 91       	ld	r24, X
    2136:	55 97       	sbiw	r26, 0x15	; 21
    2138:	80 95       	com	r24
    213a:	89 23       	and	r24, r25
    213c:	80 83       	st	Z, r24
    213e:	56 96       	adiw	r26, 0x16	; 22
    2140:	8d 91       	ld	r24, X+
    2142:	9c 91       	ld	r25, X
    2144:	57 97       	sbiw	r26, 0x17	; 23
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <__vector_3+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    214a:	58 96       	adiw	r26, 0x18	; 24
    214c:	6d 91       	ld	r22, X+
    214e:	7c 91       	ld	r23, X
    2150:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2152:	1e 96       	adiw	r26, 0x0e	; 14
    2154:	cd 91       	ld	r28, X+
    2156:	dc 91       	ld	r29, X
    2158:	1f 97       	sbiw	r26, 0x0f	; 15
    215a:	1d 96       	adiw	r26, 0x0d	; 13
    215c:	5c 91       	ld	r21, X
    215e:	1d 97       	sbiw	r26, 0x0d	; 13
    2160:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	fb 01       	movw	r30, r22
    2166:	31 97       	sbiw	r30, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <__vector_3+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    216a:	84 2f       	mov	r24, r20
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	95 95       	asr	r25
    2170:	87 95       	ror	r24
    2172:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2174:	28 81       	ld	r18, Y
    2176:	25 23       	and	r18, r21
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    2178:	09 f0       	breq	.+2      	; 0x217c <__vector_3+0xca>
        d |= 0x80;
    217a:	40 68       	ori	r20, 0x80	; 128
    217c:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    217e:	91 f7       	brne	.-28     	; 0x2164 <__vector_3+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    2180:	5e 96       	adiw	r26, 0x1e	; 30
    2182:	8c 91       	ld	r24, X
    2184:	5e 97       	sbiw	r26, 0x1e	; 30
    2186:	81 fd       	sbrc	r24, 1
      d = ~d;
    2188:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    218a:	80 91 32 05 	lds	r24, 0x0532
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	8f 73       	andi	r24, 0x3F	; 63
    2194:	90 78       	andi	r25, 0x80	; 128
    2196:	99 23       	and	r25, r25
    2198:	24 f4       	brge	.+8      	; 0x21a2 <__vector_3+0xf0>
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	80 6c       	ori	r24, 0xC0	; 192
    219e:	9f 6f       	ori	r25, 0xFF	; 255
    21a0:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
    21a2:	20 91 31 05 	lds	r18, 0x0531
    21a6:	28 17       	cp	r18, r24
    21a8:	49 f0       	breq	.+18     	; 0x21bc <__vector_3+0x10a>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    21aa:	e0 91 32 05 	lds	r30, 0x0532
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	ed 5c       	subi	r30, 0xCD	; 205
    21b2:	fa 4f       	sbci	r31, 0xFA	; 250
    21b4:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
    21b6:	80 93 32 05 	sts	0x0532, r24
    21ba:	07 c0       	rjmp	.+14     	; 0x21ca <__vector_3+0x118>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    21bc:	5e 96       	adiw	r26, 0x1e	; 30
    21be:	8c 91       	ld	r24, X
    21c0:	5e 97       	sbiw	r26, 0x1e	; 30
    21c2:	81 60       	ori	r24, 0x01	; 1
    21c4:	5e 96       	adiw	r26, 0x1e	; 30
    21c6:	8c 93       	st	X, r24
    21c8:	5e 97       	sbiw	r26, 0x1e	; 30
    21ca:	5a 96       	adiw	r26, 0x1a	; 26
    21cc:	8d 91       	ld	r24, X+
    21ce:	9c 91       	ld	r25, X
    21d0:	5b 97       	sbiw	r26, 0x1b	; 27
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <__vector_3+0x120>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    21d6:	53 96       	adiw	r26, 0x13	; 19
    21d8:	ed 91       	ld	r30, X+
    21da:	fc 91       	ld	r31, X
    21dc:	54 97       	sbiw	r26, 0x14	; 20
    21de:	90 81       	ld	r25, Z
    21e0:	55 96       	adiw	r26, 0x15	; 21
    21e2:	8c 91       	ld	r24, X
    21e4:	89 2b       	or	r24, r25
    21e6:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    21e8:	ff 91       	pop	r31
    21ea:	ef 91       	pop	r30
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	bf 91       	pop	r27
    21f2:	af 91       	pop	r26
    21f4:	9f 91       	pop	r25
    21f6:	8f 91       	pop	r24
    21f8:	7f 91       	pop	r23
    21fa:	6f 91       	pop	r22
    21fc:	5f 91       	pop	r21
    21fe:	4f 91       	pop	r20
    2200:	3f 91       	pop	r19
    2202:	2f 91       	pop	r18
    2204:	0f 90       	pop	r0
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	0f 90       	pop	r0
    220a:	1f 90       	pop	r1
    220c:	18 95       	reti

0000220e <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    220e:	2c ef       	ldi	r18, 0xFC	; 252
    2210:	31 e0       	ldi	r19, 0x01	; 1
    2212:	fc 01       	movw	r30, r24
    2214:	31 83       	std	Z+1, r19	; 0x01
    2216:	20 83       	st	Z, r18
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
    2218:	0e 94 18 10 	call	0x2030	; 0x2030 <_ZN14SoftwareSerial13stopListeningEv>
    221c:	08 95       	ret

0000221e <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	ec 01       	movw	r28, r24
    2226:	16 2f       	mov	r17, r22
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output hihg. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    2228:	6e 8d       	ldd	r22, Y+30	; 0x1e
    222a:	66 95       	lsr	r22
    222c:	61 70       	andi	r22, 0x01	; 1
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	68 27       	eor	r22, r24
    2232:	81 2f       	mov	r24, r17
    2234:	0e 94 93 12 	call	0x2526	; 0x2526 <digitalWrite>
  pinMode(tx, OUTPUT);
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	81 2f       	mov	r24, r17
    223c:	0e 94 54 12 	call	0x24a8	; 0x24a8 <pinMode>
  _transmitBitMask = digitalPinToBitMask(tx);
    2240:	61 2f       	mov	r22, r17
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	fb 01       	movw	r30, r22
    2246:	e4 58       	subi	r30, 0x84	; 132
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	e4 91       	lpm	r30, Z
    224c:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
    224e:	fb 01       	movw	r30, r22
    2250:	e0 57       	subi	r30, 0x70	; 112
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	ee 0f       	add	r30, r30
    225a:	ff 1f       	adc	r31, r31
    225c:	e2 55       	subi	r30, 0x52	; 82
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	85 91       	lpm	r24, Z+
    2262:	94 91       	lpm	r25, Z
    2264:	9a 8b       	std	Y+18, r25	; 0x12
    2266:	89 8b       	std	Y+17, r24	; 0x11
}
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	08 95       	ret

00002270 <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	ec 01       	movw	r28, r24
    2278:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
    227a:	60 e0       	ldi	r22, 0x00	; 0
    227c:	81 2f       	mov	r24, r17
    227e:	0e 94 54 12 	call	0x24a8	; 0x24a8 <pinMode>
  if (!_inverse_logic)
    2282:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2284:	81 fd       	sbrc	r24, 1
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	81 2f       	mov	r24, r17
    228c:	0e 94 93 12 	call	0x2526	; 0x2526 <digitalWrite>
  _receivePin = rx;
    2290:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
    2292:	61 2f       	mov	r22, r17
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	fb 01       	movw	r30, r22
    2298:	e4 58       	subi	r30, 0x84	; 132
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	e4 91       	lpm	r30, Z
    229e:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
    22a0:	fb 01       	movw	r30, r22
    22a2:	e0 57       	subi	r30, 0x70	; 112
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	ec 55       	subi	r30, 0x5C	; 92
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	85 91       	lpm	r24, Z+
    22b4:	94 91       	lpm	r25, Z
    22b6:	9f 87       	std	Y+15, r25	; 0x0f
    22b8:	8e 87       	std	Y+14, r24	; 0x0e
}
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	08 95       	ret

000022c2 <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	ec 01       	movw	r28, r24
    22ca:	16 2f       	mov	r17, r22
  public:
    Print() : write_error(0) {}
    22cc:	1b 82       	std	Y+3, r1	; 0x03
    22ce:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    22d0:	88 ee       	ldi	r24, 0xE8	; 232
    22d2:	93 e0       	ldi	r25, 0x03	; 3
    22d4:	a0 e0       	ldi	r26, 0x00	; 0
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	8c 83       	std	Y+4, r24	; 0x04
    22da:	9d 83       	std	Y+5, r25	; 0x05
    22dc:	ae 83       	std	Y+6, r26	; 0x06
    22de:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
    22e0:	8c ef       	ldi	r24, 0xFC	; 252
    22e2:	91 e0       	ldi	r25, 0x01	; 1
    22e4:	99 83       	std	Y+1, r25	; 0x01
    22e6:	88 83       	st	Y, r24
    22e8:	1f 8a       	std	Y+23, r1	; 0x17
    22ea:	1e 8a       	std	Y+22, r1	; 0x16
    22ec:	19 8e       	std	Y+25, r1	; 0x19
    22ee:	18 8e       	std	Y+24, r1	; 0x18
    22f0:	1b 8e       	std	Y+27, r1	; 0x1b
    22f2:	1a 8e       	std	Y+26, r1	; 0x1a
    22f4:	1d 8e       	std	Y+29, r1	; 0x1d
    22f6:	1c 8e       	std	Y+28, r1	; 0x1c
    22f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22fa:	8e 7f       	andi	r24, 0xFE	; 254
    22fc:	20 fb       	bst	r18, 0
    22fe:	81 f9       	bld	r24, 1
    2300:	8e 8f       	std	Y+30, r24	; 0x1e
{
  setTX(transmitPin);
    2302:	64 2f       	mov	r22, r20
    2304:	ce 01       	movw	r24, r28
    2306:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
    230a:	61 2f       	mov	r22, r17
    230c:	ce 01       	movw	r24, r28
    230e:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN14SoftwareSerial5setRXEh>
}
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	1f 91       	pop	r17
    2318:	08 95       	ret

0000231a <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	ec 01       	movw	r28, r24
    2320:	9a 01       	movw	r18, r20
    2322:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2324:	1b 8e       	std	Y+27, r1	; 0x1b
    2326:	1a 8e       	std	Y+26, r1	; 0x1a
    2328:	19 8e       	std	Y+25, r1	; 0x19
    232a:	18 8e       	std	Y+24, r1	; 0x18
    232c:	1f 8a       	std	Y+23, r1	; 0x17
    232e:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	79 e0       	ldi	r23, 0x09	; 9
    2334:	8d e3       	ldi	r24, 0x3D	; 61
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__divmodsi4>
    233c:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    233e:	24 30       	cpi	r18, 0x04	; 4
    2340:	31 05       	cpc	r19, r1
    2342:	18 f0       	brcs	.+6      	; 0x234a <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    2344:	c9 01       	movw	r24, r18
    2346:	03 97       	sbiw	r24, 0x03	; 3
    2348:	02 c0       	rjmp	.+4      	; 0x234e <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    234e:	9d 8f       	std	Y+29, r25	; 0x1d
    2350:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2352:	8c 85       	ldd	r24, Y+12	; 0x0c
    2354:	86 31       	cpi	r24, 0x16	; 22
    2356:	08 f0       	brcs	.+2      	; 0x235a <_ZN14SoftwareSerial5beginEl+0x40>
    2358:	41 c0       	rjmp	.+130    	; 0x23dc <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    235a:	b9 01       	movw	r22, r18
    235c:	76 95       	lsr	r23
    235e:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2360:	64 31       	cpi	r22, 0x14	; 20
    2362:	71 05       	cpc	r23, r1
    2364:	18 f0       	brcs	.+6      	; 0x236c <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
    2366:	63 51       	subi	r22, 0x13	; 19
    2368:	71 09       	sbc	r23, r1
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2370:	7f 8b       	std	Y+23, r23	; 0x17
    2372:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2374:	36 97       	sbiw	r30, 0x06	; 6
    2376:	20 f0       	brcs	.+8      	; 0x2380 <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
    2378:	b9 01       	movw	r22, r18
    237a:	65 50       	subi	r22, 0x05	; 5
    237c:	71 09       	sbc	r23, r1
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
    2380:	61 e0       	ldi	r22, 0x01	; 1
    2382:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2384:	79 8f       	std	Y+25, r23	; 0x19
    2386:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2388:	b9 01       	movw	r22, r18
    238a:	66 0f       	add	r22, r22
    238c:	77 1f       	adc	r23, r23
    238e:	26 0f       	add	r18, r22
    2390:	37 1f       	adc	r19, r23
    2392:	36 95       	lsr	r19
    2394:	27 95       	ror	r18
    2396:	36 95       	lsr	r19
    2398:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    239a:	2d 30       	cpi	r18, 0x0D	; 13
    239c:	31 05       	cpc	r19, r1
    239e:	10 f1       	brcs	.+68     	; 0x23e4 <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
    23a0:	2c 50       	subi	r18, 0x0C	; 12
    23a2:	31 09       	sbc	r19, r1
    23a4:	21 c0       	rjmp	.+66     	; 0x23e8 <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    23a6:	21 e0       	ldi	r18, 0x01	; 1
    23a8:	8e 30       	cpi	r24, 0x0E	; 14
    23aa:	08 f4       	brcc	.+2      	; 0x23ae <_ZN14SoftwareSerial5beginEl+0x94>
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <_ZN14SoftwareSerial5beginEl+0x9a>
    23b2:	88 0f       	add	r24, r24
    23b4:	2a 95       	dec	r18
    23b6:	ea f7       	brpl	.-6      	; 0x23b2 <_ZN14SoftwareSerial5beginEl+0x98>
    23b8:	98 2b       	or	r25, r24
    23ba:	90 93 68 00 	sts	0x0068, r25
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    23be:	9c 85       	ldd	r25, Y+12	; 0x0c
    23c0:	98 30       	cpi	r25, 0x08	; 8
    23c2:	d0 f0       	brcs	.+52     	; 0x23f8 <_ZN14SoftwareSerial5beginEl+0xde>
    23c4:	9e 30       	cpi	r25, 0x0E	; 14
    23c6:	10 f1       	brcs	.+68     	; 0x240c <_ZN14SoftwareSerial5beginEl+0xf2>
    23c8:	96 31       	cpi	r25, 0x16	; 22
    23ca:	58 f1       	brcs	.+86     	; 0x2422 <_ZN14SoftwareSerial5beginEl+0x108>
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	2a c0       	rjmp	.+84     	; 0x2426 <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    23d2:	8d 8b       	std	Y+21, r24	; 0x15
    23d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    23dc:	ce 01       	movw	r24, r28
    23de:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN14SoftwareSerial6listenEv>
    23e2:	2a c0       	rjmp	.+84     	; 0x2438 <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    23e4:	21 e0       	ldi	r18, 0x01	; 1
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    23e8:	3b 8f       	std	Y+27, r19	; 0x1b
    23ea:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    23ec:	90 91 68 00 	lds	r25, 0x0068
    23f0:	88 30       	cpi	r24, 0x08	; 8
    23f2:	c8 f6       	brcc	.-78     	; 0x23a6 <_ZN14SoftwareSerial5beginEl+0x8c>
    23f4:	84 e0       	ldi	r24, 0x04	; 4
    23f6:	e0 cf       	rjmp	.-64     	; 0x23b8 <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    23f8:	2d e6       	ldi	r18, 0x6D	; 109
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	3c 8b       	std	Y+20, r19	; 0x14
    23fe:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <_ZN14SoftwareSerial5beginEl+0xec>
    2404:	88 0f       	add	r24, r24
    2406:	9a 95       	dec	r25
    2408:	ea f7       	brpl	.-6      	; 0x2404 <_ZN14SoftwareSerial5beginEl+0xea>
    240a:	e3 cf       	rjmp	.-58     	; 0x23d2 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    240c:	2b e6       	ldi	r18, 0x6B	; 107
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	3c 8b       	std	Y+20, r19	; 0x14
    2412:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2414:	98 50       	subi	r25, 0x08	; 8
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	01 c0       	rjmp	.+2      	; 0x241c <_ZN14SoftwareSerial5beginEl+0x102>
    241a:	88 0f       	add	r24, r24
    241c:	9a 95       	dec	r25
    241e:	ea f7       	brpl	.-6      	; 0x241a <_ZN14SoftwareSerial5beginEl+0x100>
    2420:	d8 cf       	rjmp	.-80     	; 0x23d2 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2422:	2c e6       	ldi	r18, 0x6C	; 108
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	3c 8b       	std	Y+20, r19	; 0x14
    2428:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    242a:	9e 50       	subi	r25, 0x0E	; 14
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	01 c0       	rjmp	.+2      	; 0x2432 <_ZN14SoftwareSerial5beginEl+0x118>
    2430:	88 0f       	add	r24, r24
    2432:	9a 95       	dec	r25
    2434:	ea f7       	brpl	.-6      	; 0x2430 <_ZN14SoftwareSerial5beginEl+0x116>
    2436:	cd cf       	rjmp	.-102    	; 0x23d2 <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	08 95       	ret

0000243e <_Znwj>:
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    243e:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <malloc>
}
    2442:	08 95       	ret

00002444 <_ZdlPv>:
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    2444:	0e 94 f5 15 	call	0x2bea	; 0x2bea <free>
    2448:	08 95       	ret

0000244a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    244a:	83 30       	cpi	r24, 0x03	; 3
    244c:	69 f0       	breq	.+26     	; 0x2468 <turnOffPWM+0x1e>
    244e:	28 f4       	brcc	.+10     	; 0x245a <turnOffPWM+0x10>
    2450:	81 30       	cpi	r24, 0x01	; 1
    2452:	b1 f0       	breq	.+44     	; 0x2480 <turnOffPWM+0x36>
    2454:	82 30       	cpi	r24, 0x02	; 2
    2456:	c1 f0       	breq	.+48     	; 0x2488 <turnOffPWM+0x3e>
    2458:	08 95       	ret
    245a:	87 30       	cpi	r24, 0x07	; 7
    245c:	c9 f0       	breq	.+50     	; 0x2490 <turnOffPWM+0x46>
    245e:	88 30       	cpi	r24, 0x08	; 8
    2460:	e9 f0       	breq	.+58     	; 0x249c <turnOffPWM+0x52>
    2462:	84 30       	cpi	r24, 0x04	; 4
    2464:	01 f5       	brne	.+64     	; 0x24a6 <turnOffPWM+0x5c>
    2466:	06 c0       	rjmp	.+12     	; 0x2474 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2468:	e0 e8       	ldi	r30, 0x80	; 128
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	8f 77       	andi	r24, 0x7F	; 127
    2470:	80 83       	st	Z, r24
    2472:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2474:	e0 e8       	ldi	r30, 0x80	; 128
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	8f 7d       	andi	r24, 0xDF	; 223
    247c:	80 83       	st	Z, r24
    247e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2480:	84 b5       	in	r24, 0x24	; 36
    2482:	8f 77       	andi	r24, 0x7F	; 127
    2484:	84 bd       	out	0x24, r24	; 36
    2486:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2488:	84 b5       	in	r24, 0x24	; 36
    248a:	8f 7d       	andi	r24, 0xDF	; 223
    248c:	84 bd       	out	0x24, r24	; 36
    248e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2490:	e0 eb       	ldi	r30, 0xB0	; 176
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8f 77       	andi	r24, 0x7F	; 127
    2498:	80 83       	st	Z, r24
    249a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    249c:	e0 eb       	ldi	r30, 0xB0	; 176
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	8f 7d       	andi	r24, 0xDF	; 223
    24a4:	80 83       	st	Z, r24
    24a6:	08 95       	ret

000024a8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	fc 01       	movw	r30, r24
    24b0:	e4 58       	subi	r30, 0x84	; 132
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    24b6:	fc 01       	movw	r30, r24
    24b8:	e0 57       	subi	r30, 0x70	; 112
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    24be:	88 23       	and	r24, r24
    24c0:	79 f1       	breq	.+94     	; 0x2520 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	88 0f       	add	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	fc 01       	movw	r30, r24
    24ca:	e8 54       	subi	r30, 0x48	; 72
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	a5 91       	lpm	r26, Z+
    24d0:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    24d2:	fc 01       	movw	r30, r24
    24d4:	e2 55       	subi	r30, 0x52	; 82
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	c5 91       	lpm	r28, Z+
    24da:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    24dc:	61 11       	cpse	r22, r1
    24de:	0c c0       	rjmp	.+24     	; 0x24f8 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    24e0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    24e2:	f8 94       	cli
		*reg &= ~bit;
    24e4:	8c 91       	ld	r24, X
    24e6:	e2 2f       	mov	r30, r18
    24e8:	e0 95       	com	r30
    24ea:	8e 23       	and	r24, r30
    24ec:	8c 93       	st	X, r24
		*out &= ~bit;
    24ee:	28 81       	ld	r18, Y
    24f0:	e2 23       	and	r30, r18
    24f2:	e8 83       	st	Y, r30
		SREG = oldSREG;
    24f4:	9f bf       	out	0x3f, r25	; 63
    24f6:	14 c0       	rjmp	.+40     	; 0x2520 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    24f8:	62 30       	cpi	r22, 0x02	; 2
    24fa:	61 f4       	brne	.+24     	; 0x2514 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    24fc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    24fe:	f8 94       	cli
		*reg &= ~bit;
    2500:	3c 91       	ld	r19, X
    2502:	82 2f       	mov	r24, r18
    2504:	80 95       	com	r24
    2506:	83 23       	and	r24, r19
    2508:	8c 93       	st	X, r24
		*out |= bit;
    250a:	e8 81       	ld	r30, Y
    250c:	e2 2b       	or	r30, r18
    250e:	e8 83       	st	Y, r30
		SREG = oldSREG;
    2510:	9f bf       	out	0x3f, r25	; 63
    2512:	06 c0       	rjmp	.+12     	; 0x2520 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    2514:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2516:	f8 94       	cli
		*reg |= bit;
    2518:	ec 91       	ld	r30, X
    251a:	e2 2b       	or	r30, r18
    251c:	ec 93       	st	X, r30
		SREG = oldSREG;
    251e:	8f bf       	out	0x3f, r24	; 63
	}
}
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	08 95       	ret

00002526 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2526:	1f 93       	push	r17
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	f9 01       	movw	r30, r18
    2532:	e8 59       	subi	r30, 0x98	; 152
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2538:	f9 01       	movw	r30, r18
    253a:	e4 58       	subi	r30, 0x84	; 132
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2540:	f9 01       	movw	r30, r18
    2542:	e0 57       	subi	r30, 0x70	; 112
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2548:	cc 23       	and	r28, r28
    254a:	d1 f0       	breq	.+52     	; 0x2580 <digitalWrite+0x5a>
    254c:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    254e:	81 11       	cpse	r24, r1
    2550:	0e 94 25 12 	call	0x244a	; 0x244a <turnOffPWM>

	out = portOutputRegister(port);
    2554:	ec 2f       	mov	r30, r28
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	ee 0f       	add	r30, r30
    255a:	ff 1f       	adc	r31, r31
    255c:	e2 55       	subi	r30, 0x52	; 82
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	a5 91       	lpm	r26, Z+
    2562:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2564:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2566:	f8 94       	cli

	if (val == LOW) {
    2568:	d1 11       	cpse	r29, r1
    256a:	06 c0       	rjmp	.+12     	; 0x2578 <digitalWrite+0x52>
		*out &= ~bit;
    256c:	9c 91       	ld	r25, X
    256e:	e1 2f       	mov	r30, r17
    2570:	e0 95       	com	r30
    2572:	e9 23       	and	r30, r25
    2574:	ec 93       	st	X, r30
    2576:	03 c0       	rjmp	.+6      	; 0x257e <digitalWrite+0x58>
	} else {
		*out |= bit;
    2578:	ec 91       	ld	r30, X
    257a:	e1 2b       	or	r30, r17
    257c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    257e:	8f bf       	out	0x3f, r24	; 63
}
    2580:	df 91       	pop	r29
    2582:	cf 91       	pop	r28
    2584:	1f 91       	pop	r17
    2586:	08 95       	ret

00002588 <__udivmodsi4>:
    2588:	a1 e2       	ldi	r26, 0x21	; 33
    258a:	1a 2e       	mov	r1, r26
    258c:	aa 1b       	sub	r26, r26
    258e:	bb 1b       	sub	r27, r27
    2590:	fd 01       	movw	r30, r26
    2592:	0d c0       	rjmp	.+26     	; 0x25ae <__udivmodsi4_ep>

00002594 <__udivmodsi4_loop>:
    2594:	aa 1f       	adc	r26, r26
    2596:	bb 1f       	adc	r27, r27
    2598:	ee 1f       	adc	r30, r30
    259a:	ff 1f       	adc	r31, r31
    259c:	a2 17       	cp	r26, r18
    259e:	b3 07       	cpc	r27, r19
    25a0:	e4 07       	cpc	r30, r20
    25a2:	f5 07       	cpc	r31, r21
    25a4:	20 f0       	brcs	.+8      	; 0x25ae <__udivmodsi4_ep>
    25a6:	a2 1b       	sub	r26, r18
    25a8:	b3 0b       	sbc	r27, r19
    25aa:	e4 0b       	sbc	r30, r20
    25ac:	f5 0b       	sbc	r31, r21

000025ae <__udivmodsi4_ep>:
    25ae:	66 1f       	adc	r22, r22
    25b0:	77 1f       	adc	r23, r23
    25b2:	88 1f       	adc	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	1a 94       	dec	r1
    25b8:	69 f7       	brne	.-38     	; 0x2594 <__udivmodsi4_loop>
    25ba:	60 95       	com	r22
    25bc:	70 95       	com	r23
    25be:	80 95       	com	r24
    25c0:	90 95       	com	r25
    25c2:	9b 01       	movw	r18, r22
    25c4:	ac 01       	movw	r20, r24
    25c6:	bd 01       	movw	r22, r26
    25c8:	cf 01       	movw	r24, r30
    25ca:	08 95       	ret

000025cc <__divmodsi4>:
    25cc:	05 2e       	mov	r0, r21
    25ce:	97 fb       	bst	r25, 7
    25d0:	1e f4       	brtc	.+6      	; 0x25d8 <__divmodsi4+0xc>
    25d2:	00 94       	com	r0
    25d4:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__negsi2>
    25d8:	57 fd       	sbrc	r21, 7
    25da:	07 d0       	rcall	.+14     	; 0x25ea <__divmodsi4_neg2>
    25dc:	0e 94 c4 12 	call	0x2588	; 0x2588 <__udivmodsi4>
    25e0:	07 fc       	sbrc	r0, 7
    25e2:	03 d0       	rcall	.+6      	; 0x25ea <__divmodsi4_neg2>
    25e4:	4e f4       	brtc	.+18     	; 0x25f8 <__divmodsi4_exit>
    25e6:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__negsi2>

000025ea <__divmodsi4_neg2>:
    25ea:	50 95       	com	r21
    25ec:	40 95       	com	r20
    25ee:	30 95       	com	r19
    25f0:	21 95       	neg	r18
    25f2:	3f 4f       	sbci	r19, 0xFF	; 255
    25f4:	4f 4f       	sbci	r20, 0xFF	; 255
    25f6:	5f 4f       	sbci	r21, 0xFF	; 255

000025f8 <__divmodsi4_exit>:
    25f8:	08 95       	ret

000025fa <__negsi2>:
    25fa:	90 95       	com	r25
    25fc:	80 95       	com	r24
    25fe:	70 95       	com	r23
    2600:	61 95       	neg	r22
    2602:	7f 4f       	sbci	r23, 0xFF	; 255
    2604:	8f 4f       	sbci	r24, 0xFF	; 255
    2606:	9f 4f       	sbci	r25, 0xFF	; 255
    2608:	08 95       	ret

0000260a <__tablejump2__>:
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	05 90       	lpm	r0, Z+
    2610:	f4 91       	lpm	r31, Z
    2612:	e0 2d       	mov	r30, r0
    2614:	09 94       	ijmp

00002616 <__subsf3>:
    2616:	50 58       	subi	r21, 0x80	; 128

00002618 <__addsf3>:
    2618:	bb 27       	eor	r27, r27
    261a:	aa 27       	eor	r26, r26
    261c:	0e 94 23 13 	call	0x2646	; 0x2646 <__addsf3x>
    2620:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__fp_round>
    2624:	0e 94 3e 14 	call	0x287c	; 0x287c <__fp_pscA>
    2628:	38 f0       	brcs	.+14     	; 0x2638 <__addsf3+0x20>
    262a:	0e 94 45 14 	call	0x288a	; 0x288a <__fp_pscB>
    262e:	20 f0       	brcs	.+8      	; 0x2638 <__addsf3+0x20>
    2630:	39 f4       	brne	.+14     	; 0x2640 <__addsf3+0x28>
    2632:	9f 3f       	cpi	r25, 0xFF	; 255
    2634:	19 f4       	brne	.+6      	; 0x263c <__addsf3+0x24>
    2636:	26 f4       	brtc	.+8      	; 0x2640 <__addsf3+0x28>
    2638:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__fp_nan>
    263c:	0e f4       	brtc	.+2      	; 0x2640 <__addsf3+0x28>
    263e:	e0 95       	com	r30
    2640:	e7 fb       	bst	r30, 7
    2642:	0c 94 27 14 	jmp	0x284e	; 0x284e <__fp_inf>

00002646 <__addsf3x>:
    2646:	e9 2f       	mov	r30, r25
    2648:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__fp_split3>
    264c:	58 f3       	brcs	.-42     	; 0x2624 <__addsf3+0xc>
    264e:	ba 17       	cp	r27, r26
    2650:	62 07       	cpc	r22, r18
    2652:	73 07       	cpc	r23, r19
    2654:	84 07       	cpc	r24, r20
    2656:	95 07       	cpc	r25, r21
    2658:	20 f0       	brcs	.+8      	; 0x2662 <__addsf3x+0x1c>
    265a:	79 f4       	brne	.+30     	; 0x267a <__addsf3x+0x34>
    265c:	a6 f5       	brtc	.+104    	; 0x26c6 <__addsf3x+0x80>
    265e:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__fp_zero>
    2662:	0e f4       	brtc	.+2      	; 0x2666 <__addsf3x+0x20>
    2664:	e0 95       	com	r30
    2666:	0b 2e       	mov	r0, r27
    2668:	ba 2f       	mov	r27, r26
    266a:	a0 2d       	mov	r26, r0
    266c:	0b 01       	movw	r0, r22
    266e:	b9 01       	movw	r22, r18
    2670:	90 01       	movw	r18, r0
    2672:	0c 01       	movw	r0, r24
    2674:	ca 01       	movw	r24, r20
    2676:	a0 01       	movw	r20, r0
    2678:	11 24       	eor	r1, r1
    267a:	ff 27       	eor	r31, r31
    267c:	59 1b       	sub	r21, r25
    267e:	99 f0       	breq	.+38     	; 0x26a6 <__addsf3x+0x60>
    2680:	59 3f       	cpi	r21, 0xF9	; 249
    2682:	50 f4       	brcc	.+20     	; 0x2698 <__addsf3x+0x52>
    2684:	50 3e       	cpi	r21, 0xE0	; 224
    2686:	68 f1       	brcs	.+90     	; 0x26e2 <__addsf3x+0x9c>
    2688:	1a 16       	cp	r1, r26
    268a:	f0 40       	sbci	r31, 0x00	; 0
    268c:	a2 2f       	mov	r26, r18
    268e:	23 2f       	mov	r18, r19
    2690:	34 2f       	mov	r19, r20
    2692:	44 27       	eor	r20, r20
    2694:	58 5f       	subi	r21, 0xF8	; 248
    2696:	f3 cf       	rjmp	.-26     	; 0x267e <__addsf3x+0x38>
    2698:	46 95       	lsr	r20
    269a:	37 95       	ror	r19
    269c:	27 95       	ror	r18
    269e:	a7 95       	ror	r26
    26a0:	f0 40       	sbci	r31, 0x00	; 0
    26a2:	53 95       	inc	r21
    26a4:	c9 f7       	brne	.-14     	; 0x2698 <__addsf3x+0x52>
    26a6:	7e f4       	brtc	.+30     	; 0x26c6 <__addsf3x+0x80>
    26a8:	1f 16       	cp	r1, r31
    26aa:	ba 0b       	sbc	r27, r26
    26ac:	62 0b       	sbc	r22, r18
    26ae:	73 0b       	sbc	r23, r19
    26b0:	84 0b       	sbc	r24, r20
    26b2:	ba f0       	brmi	.+46     	; 0x26e2 <__addsf3x+0x9c>
    26b4:	91 50       	subi	r25, 0x01	; 1
    26b6:	a1 f0       	breq	.+40     	; 0x26e0 <__addsf3x+0x9a>
    26b8:	ff 0f       	add	r31, r31
    26ba:	bb 1f       	adc	r27, r27
    26bc:	66 1f       	adc	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	c2 f7       	brpl	.-16     	; 0x26b4 <__addsf3x+0x6e>
    26c4:	0e c0       	rjmp	.+28     	; 0x26e2 <__addsf3x+0x9c>
    26c6:	ba 0f       	add	r27, r26
    26c8:	62 1f       	adc	r22, r18
    26ca:	73 1f       	adc	r23, r19
    26cc:	84 1f       	adc	r24, r20
    26ce:	48 f4       	brcc	.+18     	; 0x26e2 <__addsf3x+0x9c>
    26d0:	87 95       	ror	r24
    26d2:	77 95       	ror	r23
    26d4:	67 95       	ror	r22
    26d6:	b7 95       	ror	r27
    26d8:	f7 95       	ror	r31
    26da:	9e 3f       	cpi	r25, 0xFE	; 254
    26dc:	08 f0       	brcs	.+2      	; 0x26e0 <__addsf3x+0x9a>
    26de:	b0 cf       	rjmp	.-160    	; 0x2640 <__addsf3+0x28>
    26e0:	93 95       	inc	r25
    26e2:	88 0f       	add	r24, r24
    26e4:	08 f0       	brcs	.+2      	; 0x26e8 <__addsf3x+0xa2>
    26e6:	99 27       	eor	r25, r25
    26e8:	ee 0f       	add	r30, r30
    26ea:	97 95       	ror	r25
    26ec:	87 95       	ror	r24
    26ee:	08 95       	ret

000026f0 <__divsf3>:
    26f0:	0e 94 8c 13 	call	0x2718	; 0x2718 <__divsf3x>
    26f4:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__fp_round>
    26f8:	0e 94 45 14 	call	0x288a	; 0x288a <__fp_pscB>
    26fc:	58 f0       	brcs	.+22     	; 0x2714 <__divsf3+0x24>
    26fe:	0e 94 3e 14 	call	0x287c	; 0x287c <__fp_pscA>
    2702:	40 f0       	brcs	.+16     	; 0x2714 <__divsf3+0x24>
    2704:	29 f4       	brne	.+10     	; 0x2710 <__divsf3+0x20>
    2706:	5f 3f       	cpi	r21, 0xFF	; 255
    2708:	29 f0       	breq	.+10     	; 0x2714 <__divsf3+0x24>
    270a:	0c 94 27 14 	jmp	0x284e	; 0x284e <__fp_inf>
    270e:	51 11       	cpse	r21, r1
    2710:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__fp_szero>
    2714:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__fp_nan>

00002718 <__divsf3x>:
    2718:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__fp_split3>
    271c:	68 f3       	brcs	.-38     	; 0x26f8 <__divsf3+0x8>

0000271e <__divsf3_pse>:
    271e:	99 23       	and	r25, r25
    2720:	b1 f3       	breq	.-20     	; 0x270e <__divsf3+0x1e>
    2722:	55 23       	and	r21, r21
    2724:	91 f3       	breq	.-28     	; 0x270a <__divsf3+0x1a>
    2726:	95 1b       	sub	r25, r21
    2728:	55 0b       	sbc	r21, r21
    272a:	bb 27       	eor	r27, r27
    272c:	aa 27       	eor	r26, r26
    272e:	62 17       	cp	r22, r18
    2730:	73 07       	cpc	r23, r19
    2732:	84 07       	cpc	r24, r20
    2734:	38 f0       	brcs	.+14     	; 0x2744 <__divsf3_pse+0x26>
    2736:	9f 5f       	subi	r25, 0xFF	; 255
    2738:	5f 4f       	sbci	r21, 0xFF	; 255
    273a:	22 0f       	add	r18, r18
    273c:	33 1f       	adc	r19, r19
    273e:	44 1f       	adc	r20, r20
    2740:	aa 1f       	adc	r26, r26
    2742:	a9 f3       	breq	.-22     	; 0x272e <__divsf3_pse+0x10>
    2744:	35 d0       	rcall	.+106    	; 0x27b0 <__divsf3_pse+0x92>
    2746:	0e 2e       	mov	r0, r30
    2748:	3a f0       	brmi	.+14     	; 0x2758 <__divsf3_pse+0x3a>
    274a:	e0 e8       	ldi	r30, 0x80	; 128
    274c:	32 d0       	rcall	.+100    	; 0x27b2 <__divsf3_pse+0x94>
    274e:	91 50       	subi	r25, 0x01	; 1
    2750:	50 40       	sbci	r21, 0x00	; 0
    2752:	e6 95       	lsr	r30
    2754:	00 1c       	adc	r0, r0
    2756:	ca f7       	brpl	.-14     	; 0x274a <__divsf3_pse+0x2c>
    2758:	2b d0       	rcall	.+86     	; 0x27b0 <__divsf3_pse+0x92>
    275a:	fe 2f       	mov	r31, r30
    275c:	29 d0       	rcall	.+82     	; 0x27b0 <__divsf3_pse+0x92>
    275e:	66 0f       	add	r22, r22
    2760:	77 1f       	adc	r23, r23
    2762:	88 1f       	adc	r24, r24
    2764:	bb 1f       	adc	r27, r27
    2766:	26 17       	cp	r18, r22
    2768:	37 07       	cpc	r19, r23
    276a:	48 07       	cpc	r20, r24
    276c:	ab 07       	cpc	r26, r27
    276e:	b0 e8       	ldi	r27, 0x80	; 128
    2770:	09 f0       	breq	.+2      	; 0x2774 <__divsf3_pse+0x56>
    2772:	bb 0b       	sbc	r27, r27
    2774:	80 2d       	mov	r24, r0
    2776:	bf 01       	movw	r22, r30
    2778:	ff 27       	eor	r31, r31
    277a:	93 58       	subi	r25, 0x83	; 131
    277c:	5f 4f       	sbci	r21, 0xFF	; 255
    277e:	3a f0       	brmi	.+14     	; 0x278e <__divsf3_pse+0x70>
    2780:	9e 3f       	cpi	r25, 0xFE	; 254
    2782:	51 05       	cpc	r21, r1
    2784:	78 f0       	brcs	.+30     	; 0x27a4 <__divsf3_pse+0x86>
    2786:	0c 94 27 14 	jmp	0x284e	; 0x284e <__fp_inf>
    278a:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__fp_szero>
    278e:	5f 3f       	cpi	r21, 0xFF	; 255
    2790:	e4 f3       	brlt	.-8      	; 0x278a <__divsf3_pse+0x6c>
    2792:	98 3e       	cpi	r25, 0xE8	; 232
    2794:	d4 f3       	brlt	.-12     	; 0x278a <__divsf3_pse+0x6c>
    2796:	86 95       	lsr	r24
    2798:	77 95       	ror	r23
    279a:	67 95       	ror	r22
    279c:	b7 95       	ror	r27
    279e:	f7 95       	ror	r31
    27a0:	9f 5f       	subi	r25, 0xFF	; 255
    27a2:	c9 f7       	brne	.-14     	; 0x2796 <__divsf3_pse+0x78>
    27a4:	88 0f       	add	r24, r24
    27a6:	91 1d       	adc	r25, r1
    27a8:	96 95       	lsr	r25
    27aa:	87 95       	ror	r24
    27ac:	97 f9       	bld	r25, 7
    27ae:	08 95       	ret
    27b0:	e1 e0       	ldi	r30, 0x01	; 1
    27b2:	66 0f       	add	r22, r22
    27b4:	77 1f       	adc	r23, r23
    27b6:	88 1f       	adc	r24, r24
    27b8:	bb 1f       	adc	r27, r27
    27ba:	62 17       	cp	r22, r18
    27bc:	73 07       	cpc	r23, r19
    27be:	84 07       	cpc	r24, r20
    27c0:	ba 07       	cpc	r27, r26
    27c2:	20 f0       	brcs	.+8      	; 0x27cc <__divsf3_pse+0xae>
    27c4:	62 1b       	sub	r22, r18
    27c6:	73 0b       	sbc	r23, r19
    27c8:	84 0b       	sbc	r24, r20
    27ca:	ba 0b       	sbc	r27, r26
    27cc:	ee 1f       	adc	r30, r30
    27ce:	88 f7       	brcc	.-30     	; 0x27b2 <__divsf3_pse+0x94>
    27d0:	e0 95       	com	r30
    27d2:	08 95       	ret

000027d4 <__floatunsisf>:
    27d4:	e8 94       	clt
    27d6:	09 c0       	rjmp	.+18     	; 0x27ea <__floatsisf+0x12>

000027d8 <__floatsisf>:
    27d8:	97 fb       	bst	r25, 7
    27da:	3e f4       	brtc	.+14     	; 0x27ea <__floatsisf+0x12>
    27dc:	90 95       	com	r25
    27de:	80 95       	com	r24
    27e0:	70 95       	com	r23
    27e2:	61 95       	neg	r22
    27e4:	7f 4f       	sbci	r23, 0xFF	; 255
    27e6:	8f 4f       	sbci	r24, 0xFF	; 255
    27e8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ea:	99 23       	and	r25, r25
    27ec:	a9 f0       	breq	.+42     	; 0x2818 <__floatsisf+0x40>
    27ee:	f9 2f       	mov	r31, r25
    27f0:	96 e9       	ldi	r25, 0x96	; 150
    27f2:	bb 27       	eor	r27, r27
    27f4:	93 95       	inc	r25
    27f6:	f6 95       	lsr	r31
    27f8:	87 95       	ror	r24
    27fa:	77 95       	ror	r23
    27fc:	67 95       	ror	r22
    27fe:	b7 95       	ror	r27
    2800:	f1 11       	cpse	r31, r1
    2802:	f8 cf       	rjmp	.-16     	; 0x27f4 <__floatsisf+0x1c>
    2804:	fa f4       	brpl	.+62     	; 0x2844 <__floatsisf+0x6c>
    2806:	bb 0f       	add	r27, r27
    2808:	11 f4       	brne	.+4      	; 0x280e <__floatsisf+0x36>
    280a:	60 ff       	sbrs	r22, 0
    280c:	1b c0       	rjmp	.+54     	; 0x2844 <__floatsisf+0x6c>
    280e:	6f 5f       	subi	r22, 0xFF	; 255
    2810:	7f 4f       	sbci	r23, 0xFF	; 255
    2812:	8f 4f       	sbci	r24, 0xFF	; 255
    2814:	9f 4f       	sbci	r25, 0xFF	; 255
    2816:	16 c0       	rjmp	.+44     	; 0x2844 <__floatsisf+0x6c>
    2818:	88 23       	and	r24, r24
    281a:	11 f0       	breq	.+4      	; 0x2820 <__floatsisf+0x48>
    281c:	96 e9       	ldi	r25, 0x96	; 150
    281e:	11 c0       	rjmp	.+34     	; 0x2842 <__floatsisf+0x6a>
    2820:	77 23       	and	r23, r23
    2822:	21 f0       	breq	.+8      	; 0x282c <__floatsisf+0x54>
    2824:	9e e8       	ldi	r25, 0x8E	; 142
    2826:	87 2f       	mov	r24, r23
    2828:	76 2f       	mov	r23, r22
    282a:	05 c0       	rjmp	.+10     	; 0x2836 <__floatsisf+0x5e>
    282c:	66 23       	and	r22, r22
    282e:	71 f0       	breq	.+28     	; 0x284c <__floatsisf+0x74>
    2830:	96 e8       	ldi	r25, 0x86	; 134
    2832:	86 2f       	mov	r24, r22
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	60 e0       	ldi	r22, 0x00	; 0
    2838:	2a f0       	brmi	.+10     	; 0x2844 <__floatsisf+0x6c>
    283a:	9a 95       	dec	r25
    283c:	66 0f       	add	r22, r22
    283e:	77 1f       	adc	r23, r23
    2840:	88 1f       	adc	r24, r24
    2842:	da f7       	brpl	.-10     	; 0x283a <__floatsisf+0x62>
    2844:	88 0f       	add	r24, r24
    2846:	96 95       	lsr	r25
    2848:	87 95       	ror	r24
    284a:	97 f9       	bld	r25, 7
    284c:	08 95       	ret

0000284e <__fp_inf>:
    284e:	97 f9       	bld	r25, 7
    2850:	9f 67       	ori	r25, 0x7F	; 127
    2852:	80 e8       	ldi	r24, 0x80	; 128
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	08 95       	ret

0000285a <__fp_mpack>:
    285a:	9f 3f       	cpi	r25, 0xFF	; 255
    285c:	31 f0       	breq	.+12     	; 0x286a <__fp_mpack_finite+0xc>

0000285e <__fp_mpack_finite>:
    285e:	91 50       	subi	r25, 0x01	; 1
    2860:	20 f4       	brcc	.+8      	; 0x286a <__fp_mpack_finite+0xc>
    2862:	87 95       	ror	r24
    2864:	77 95       	ror	r23
    2866:	67 95       	ror	r22
    2868:	b7 95       	ror	r27
    286a:	88 0f       	add	r24, r24
    286c:	91 1d       	adc	r25, r1
    286e:	96 95       	lsr	r25
    2870:	87 95       	ror	r24
    2872:	97 f9       	bld	r25, 7
    2874:	08 95       	ret

00002876 <__fp_nan>:
    2876:	9f ef       	ldi	r25, 0xFF	; 255
    2878:	80 ec       	ldi	r24, 0xC0	; 192
    287a:	08 95       	ret

0000287c <__fp_pscA>:
    287c:	00 24       	eor	r0, r0
    287e:	0a 94       	dec	r0
    2880:	16 16       	cp	r1, r22
    2882:	17 06       	cpc	r1, r23
    2884:	18 06       	cpc	r1, r24
    2886:	09 06       	cpc	r0, r25
    2888:	08 95       	ret

0000288a <__fp_pscB>:
    288a:	00 24       	eor	r0, r0
    288c:	0a 94       	dec	r0
    288e:	12 16       	cp	r1, r18
    2890:	13 06       	cpc	r1, r19
    2892:	14 06       	cpc	r1, r20
    2894:	05 06       	cpc	r0, r21
    2896:	08 95       	ret

00002898 <__fp_round>:
    2898:	09 2e       	mov	r0, r25
    289a:	03 94       	inc	r0
    289c:	00 0c       	add	r0, r0
    289e:	11 f4       	brne	.+4      	; 0x28a4 <__fp_round+0xc>
    28a0:	88 23       	and	r24, r24
    28a2:	52 f0       	brmi	.+20     	; 0x28b8 <__fp_round+0x20>
    28a4:	bb 0f       	add	r27, r27
    28a6:	40 f4       	brcc	.+16     	; 0x28b8 <__fp_round+0x20>
    28a8:	bf 2b       	or	r27, r31
    28aa:	11 f4       	brne	.+4      	; 0x28b0 <__fp_round+0x18>
    28ac:	60 ff       	sbrs	r22, 0
    28ae:	04 c0       	rjmp	.+8      	; 0x28b8 <__fp_round+0x20>
    28b0:	6f 5f       	subi	r22, 0xFF	; 255
    28b2:	7f 4f       	sbci	r23, 0xFF	; 255
    28b4:	8f 4f       	sbci	r24, 0xFF	; 255
    28b6:	9f 4f       	sbci	r25, 0xFF	; 255
    28b8:	08 95       	ret

000028ba <__fp_split3>:
    28ba:	57 fd       	sbrc	r21, 7
    28bc:	90 58       	subi	r25, 0x80	; 128
    28be:	44 0f       	add	r20, r20
    28c0:	55 1f       	adc	r21, r21
    28c2:	59 f0       	breq	.+22     	; 0x28da <__fp_splitA+0x10>
    28c4:	5f 3f       	cpi	r21, 0xFF	; 255
    28c6:	71 f0       	breq	.+28     	; 0x28e4 <__fp_splitA+0x1a>
    28c8:	47 95       	ror	r20

000028ca <__fp_splitA>:
    28ca:	88 0f       	add	r24, r24
    28cc:	97 fb       	bst	r25, 7
    28ce:	99 1f       	adc	r25, r25
    28d0:	61 f0       	breq	.+24     	; 0x28ea <__fp_splitA+0x20>
    28d2:	9f 3f       	cpi	r25, 0xFF	; 255
    28d4:	79 f0       	breq	.+30     	; 0x28f4 <__fp_splitA+0x2a>
    28d6:	87 95       	ror	r24
    28d8:	08 95       	ret
    28da:	12 16       	cp	r1, r18
    28dc:	13 06       	cpc	r1, r19
    28de:	14 06       	cpc	r1, r20
    28e0:	55 1f       	adc	r21, r21
    28e2:	f2 cf       	rjmp	.-28     	; 0x28c8 <__fp_split3+0xe>
    28e4:	46 95       	lsr	r20
    28e6:	f1 df       	rcall	.-30     	; 0x28ca <__fp_splitA>
    28e8:	08 c0       	rjmp	.+16     	; 0x28fa <__fp_splitA+0x30>
    28ea:	16 16       	cp	r1, r22
    28ec:	17 06       	cpc	r1, r23
    28ee:	18 06       	cpc	r1, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	f1 cf       	rjmp	.-30     	; 0x28d6 <__fp_splitA+0xc>
    28f4:	86 95       	lsr	r24
    28f6:	71 05       	cpc	r23, r1
    28f8:	61 05       	cpc	r22, r1
    28fa:	08 94       	sec
    28fc:	08 95       	ret

000028fe <__fp_zero>:
    28fe:	e8 94       	clt

00002900 <__fp_szero>:
    2900:	bb 27       	eor	r27, r27
    2902:	66 27       	eor	r22, r22
    2904:	77 27       	eor	r23, r23
    2906:	cb 01       	movw	r24, r22
    2908:	97 f9       	bld	r25, 7
    290a:	08 95       	ret

0000290c <__mulsf3>:
    290c:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsf3x>
    2910:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__fp_round>
    2914:	0e 94 3e 14 	call	0x287c	; 0x287c <__fp_pscA>
    2918:	38 f0       	brcs	.+14     	; 0x2928 <__mulsf3+0x1c>
    291a:	0e 94 45 14 	call	0x288a	; 0x288a <__fp_pscB>
    291e:	20 f0       	brcs	.+8      	; 0x2928 <__mulsf3+0x1c>
    2920:	95 23       	and	r25, r21
    2922:	11 f0       	breq	.+4      	; 0x2928 <__mulsf3+0x1c>
    2924:	0c 94 27 14 	jmp	0x284e	; 0x284e <__fp_inf>
    2928:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__fp_nan>
    292c:	11 24       	eor	r1, r1
    292e:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__fp_szero>

00002932 <__mulsf3x>:
    2932:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__fp_split3>
    2936:	70 f3       	brcs	.-36     	; 0x2914 <__mulsf3+0x8>

00002938 <__mulsf3_pse>:
    2938:	95 9f       	mul	r25, r21
    293a:	c1 f3       	breq	.-16     	; 0x292c <__mulsf3+0x20>
    293c:	95 0f       	add	r25, r21
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	55 1f       	adc	r21, r21
    2942:	62 9f       	mul	r22, r18
    2944:	f0 01       	movw	r30, r0
    2946:	72 9f       	mul	r23, r18
    2948:	bb 27       	eor	r27, r27
    294a:	f0 0d       	add	r31, r0
    294c:	b1 1d       	adc	r27, r1
    294e:	63 9f       	mul	r22, r19
    2950:	aa 27       	eor	r26, r26
    2952:	f0 0d       	add	r31, r0
    2954:	b1 1d       	adc	r27, r1
    2956:	aa 1f       	adc	r26, r26
    2958:	64 9f       	mul	r22, r20
    295a:	66 27       	eor	r22, r22
    295c:	b0 0d       	add	r27, r0
    295e:	a1 1d       	adc	r26, r1
    2960:	66 1f       	adc	r22, r22
    2962:	82 9f       	mul	r24, r18
    2964:	22 27       	eor	r18, r18
    2966:	b0 0d       	add	r27, r0
    2968:	a1 1d       	adc	r26, r1
    296a:	62 1f       	adc	r22, r18
    296c:	73 9f       	mul	r23, r19
    296e:	b0 0d       	add	r27, r0
    2970:	a1 1d       	adc	r26, r1
    2972:	62 1f       	adc	r22, r18
    2974:	83 9f       	mul	r24, r19
    2976:	a0 0d       	add	r26, r0
    2978:	61 1d       	adc	r22, r1
    297a:	22 1f       	adc	r18, r18
    297c:	74 9f       	mul	r23, r20
    297e:	33 27       	eor	r19, r19
    2980:	a0 0d       	add	r26, r0
    2982:	61 1d       	adc	r22, r1
    2984:	23 1f       	adc	r18, r19
    2986:	84 9f       	mul	r24, r20
    2988:	60 0d       	add	r22, r0
    298a:	21 1d       	adc	r18, r1
    298c:	82 2f       	mov	r24, r18
    298e:	76 2f       	mov	r23, r22
    2990:	6a 2f       	mov	r22, r26
    2992:	11 24       	eor	r1, r1
    2994:	9f 57       	subi	r25, 0x7F	; 127
    2996:	50 40       	sbci	r21, 0x00	; 0
    2998:	9a f0       	brmi	.+38     	; 0x29c0 <__mulsf3_pse+0x88>
    299a:	f1 f0       	breq	.+60     	; 0x29d8 <__mulsf3_pse+0xa0>
    299c:	88 23       	and	r24, r24
    299e:	4a f0       	brmi	.+18     	; 0x29b2 <__mulsf3_pse+0x7a>
    29a0:	ee 0f       	add	r30, r30
    29a2:	ff 1f       	adc	r31, r31
    29a4:	bb 1f       	adc	r27, r27
    29a6:	66 1f       	adc	r22, r22
    29a8:	77 1f       	adc	r23, r23
    29aa:	88 1f       	adc	r24, r24
    29ac:	91 50       	subi	r25, 0x01	; 1
    29ae:	50 40       	sbci	r21, 0x00	; 0
    29b0:	a9 f7       	brne	.-22     	; 0x299c <__mulsf3_pse+0x64>
    29b2:	9e 3f       	cpi	r25, 0xFE	; 254
    29b4:	51 05       	cpc	r21, r1
    29b6:	80 f0       	brcs	.+32     	; 0x29d8 <__mulsf3_pse+0xa0>
    29b8:	0c 94 27 14 	jmp	0x284e	; 0x284e <__fp_inf>
    29bc:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__fp_szero>
    29c0:	5f 3f       	cpi	r21, 0xFF	; 255
    29c2:	e4 f3       	brlt	.-8      	; 0x29bc <__mulsf3_pse+0x84>
    29c4:	98 3e       	cpi	r25, 0xE8	; 232
    29c6:	d4 f3       	brlt	.-12     	; 0x29bc <__mulsf3_pse+0x84>
    29c8:	86 95       	lsr	r24
    29ca:	77 95       	ror	r23
    29cc:	67 95       	ror	r22
    29ce:	b7 95       	ror	r27
    29d0:	f7 95       	ror	r31
    29d2:	e7 95       	ror	r30
    29d4:	9f 5f       	subi	r25, 0xFF	; 255
    29d6:	c1 f7       	brne	.-16     	; 0x29c8 <__mulsf3_pse+0x90>
    29d8:	fe 2b       	or	r31, r30
    29da:	88 0f       	add	r24, r24
    29dc:	91 1d       	adc	r25, r1
    29de:	96 95       	lsr	r25
    29e0:	87 95       	ror	r24
    29e2:	97 f9       	bld	r25, 7
    29e4:	08 95       	ret
    29e6:	19 f4       	brne	.+6      	; 0x29ee <__mulsf3_pse+0xb6>
    29e8:	16 f4       	brtc	.+4      	; 0x29ee <__mulsf3_pse+0xb6>
    29ea:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__fp_nan>
    29ee:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__fp_mpack>

000029f2 <sqrt>:
    29f2:	0e 94 65 14 	call	0x28ca	; 0x28ca <__fp_splitA>
    29f6:	b8 f3       	brcs	.-18     	; 0x29e6 <__mulsf3_pse+0xae>
    29f8:	99 23       	and	r25, r25
    29fa:	c9 f3       	breq	.-14     	; 0x29ee <__mulsf3_pse+0xb6>
    29fc:	b6 f3       	brts	.-20     	; 0x29ea <__mulsf3_pse+0xb2>
    29fe:	9f 57       	subi	r25, 0x7F	; 127
    2a00:	55 0b       	sbc	r21, r21
    2a02:	87 ff       	sbrs	r24, 7
    2a04:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__fp_norm2>
    2a08:	00 24       	eor	r0, r0
    2a0a:	a0 e6       	ldi	r26, 0x60	; 96
    2a0c:	40 ea       	ldi	r20, 0xA0	; 160
    2a0e:	90 01       	movw	r18, r0
    2a10:	80 58       	subi	r24, 0x80	; 128
    2a12:	56 95       	lsr	r21
    2a14:	97 95       	ror	r25
    2a16:	28 f4       	brcc	.+10     	; 0x2a22 <sqrt+0x30>
    2a18:	80 5c       	subi	r24, 0xC0	; 192
    2a1a:	66 0f       	add	r22, r22
    2a1c:	77 1f       	adc	r23, r23
    2a1e:	88 1f       	adc	r24, r24
    2a20:	20 f0       	brcs	.+8      	; 0x2a2a <sqrt+0x38>
    2a22:	26 17       	cp	r18, r22
    2a24:	37 07       	cpc	r19, r23
    2a26:	48 07       	cpc	r20, r24
    2a28:	30 f4       	brcc	.+12     	; 0x2a36 <sqrt+0x44>
    2a2a:	62 1b       	sub	r22, r18
    2a2c:	73 0b       	sbc	r23, r19
    2a2e:	84 0b       	sbc	r24, r20
    2a30:	20 29       	or	r18, r0
    2a32:	31 29       	or	r19, r1
    2a34:	4a 2b       	or	r20, r26
    2a36:	a6 95       	lsr	r26
    2a38:	17 94       	ror	r1
    2a3a:	07 94       	ror	r0
    2a3c:	20 25       	eor	r18, r0
    2a3e:	31 25       	eor	r19, r1
    2a40:	4a 27       	eor	r20, r26
    2a42:	58 f7       	brcc	.-42     	; 0x2a1a <sqrt+0x28>
    2a44:	66 0f       	add	r22, r22
    2a46:	77 1f       	adc	r23, r23
    2a48:	88 1f       	adc	r24, r24
    2a4a:	20 f0       	brcs	.+8      	; 0x2a54 <sqrt+0x62>
    2a4c:	26 17       	cp	r18, r22
    2a4e:	37 07       	cpc	r19, r23
    2a50:	48 07       	cpc	r20, r24
    2a52:	30 f4       	brcc	.+12     	; 0x2a60 <sqrt+0x6e>
    2a54:	62 0b       	sbc	r22, r18
    2a56:	73 0b       	sbc	r23, r19
    2a58:	84 0b       	sbc	r24, r20
    2a5a:	20 0d       	add	r18, r0
    2a5c:	31 1d       	adc	r19, r1
    2a5e:	41 1d       	adc	r20, r1
    2a60:	a0 95       	com	r26
    2a62:	81 f7       	brne	.-32     	; 0x2a44 <sqrt+0x52>
    2a64:	b9 01       	movw	r22, r18
    2a66:	84 2f       	mov	r24, r20
    2a68:	91 58       	subi	r25, 0x81	; 129
    2a6a:	88 0f       	add	r24, r24
    2a6c:	96 95       	lsr	r25
    2a6e:	87 95       	ror	r24
    2a70:	08 95       	ret

00002a72 <__fp_norm2>:
    2a72:	91 50       	subi	r25, 0x01	; 1
    2a74:	50 40       	sbci	r21, 0x00	; 0
    2a76:	66 0f       	add	r22, r22
    2a78:	77 1f       	adc	r23, r23
    2a7a:	88 1f       	adc	r24, r24
    2a7c:	d2 f7       	brpl	.-12     	; 0x2a72 <__fp_norm2>
    2a7e:	08 95       	ret

00002a80 <dtostrf>:
    2a80:	ef 92       	push	r14
    2a82:	0f 93       	push	r16
    2a84:	1f 93       	push	r17
    2a86:	cf 93       	push	r28
    2a88:	df 93       	push	r29
    2a8a:	e8 01       	movw	r28, r16
    2a8c:	47 fd       	sbrc	r20, 7
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <dtostrf+0x14>
    2a90:	34 e0       	ldi	r19, 0x04	; 4
    2a92:	01 c0       	rjmp	.+2      	; 0x2a96 <dtostrf+0x16>
    2a94:	34 e1       	ldi	r19, 0x14	; 20
    2a96:	e4 2f       	mov	r30, r20
    2a98:	44 0f       	add	r20, r20
    2a9a:	ff 0b       	sbc	r31, r31
    2a9c:	f7 ff       	sbrs	r31, 7
    2a9e:	03 c0       	rjmp	.+6      	; 0x2aa6 <dtostrf+0x26>
    2aa0:	f1 95       	neg	r31
    2aa2:	e1 95       	neg	r30
    2aa4:	f1 09       	sbc	r31, r1
    2aa6:	e3 2e       	mov	r14, r19
    2aa8:	02 2f       	mov	r16, r18
    2aaa:	2e 2f       	mov	r18, r30
    2aac:	ae 01       	movw	r20, r28
    2aae:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <dtoa_prf>
    2ab2:	ce 01       	movw	r24, r28
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	ef 90       	pop	r14
    2abe:	08 95       	ret

00002ac0 <malloc>:
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	82 30       	cpi	r24, 0x02	; 2
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	10 f4       	brcc	.+4      	; 0x2ace <malloc+0xe>
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	e0 91 77 05 	lds	r30, 0x0577
    2ad2:	f0 91 78 05 	lds	r31, 0x0578
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	c0 e0       	ldi	r28, 0x00	; 0
    2adc:	d0 e0       	ldi	r29, 0x00	; 0
    2ade:	30 97       	sbiw	r30, 0x00	; 0
    2ae0:	11 f1       	breq	.+68     	; 0x2b26 <malloc+0x66>
    2ae2:	40 81       	ld	r20, Z
    2ae4:	51 81       	ldd	r21, Z+1	; 0x01
    2ae6:	48 17       	cp	r20, r24
    2ae8:	59 07       	cpc	r21, r25
    2aea:	c0 f0       	brcs	.+48     	; 0x2b1c <malloc+0x5c>
    2aec:	48 17       	cp	r20, r24
    2aee:	59 07       	cpc	r21, r25
    2af0:	61 f4       	brne	.+24     	; 0x2b0a <malloc+0x4a>
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 97       	sbiw	r28, 0x00	; 0
    2af8:	19 f0       	breq	.+6      	; 0x2b00 <malloc+0x40>
    2afa:	9b 83       	std	Y+3, r25	; 0x03
    2afc:	8a 83       	std	Y+2, r24	; 0x02
    2afe:	2b c0       	rjmp	.+86     	; 0x2b56 <malloc+0x96>
    2b00:	90 93 78 05 	sts	0x0578, r25
    2b04:	80 93 77 05 	sts	0x0577, r24
    2b08:	26 c0       	rjmp	.+76     	; 0x2b56 <malloc+0x96>
    2b0a:	21 15       	cp	r18, r1
    2b0c:	31 05       	cpc	r19, r1
    2b0e:	19 f0       	breq	.+6      	; 0x2b16 <malloc+0x56>
    2b10:	42 17       	cp	r20, r18
    2b12:	53 07       	cpc	r21, r19
    2b14:	18 f4       	brcc	.+6      	; 0x2b1c <malloc+0x5c>
    2b16:	9a 01       	movw	r18, r20
    2b18:	be 01       	movw	r22, r28
    2b1a:	df 01       	movw	r26, r30
    2b1c:	ef 01       	movw	r28, r30
    2b1e:	02 80       	ldd	r0, Z+2	; 0x02
    2b20:	f3 81       	ldd	r31, Z+3	; 0x03
    2b22:	e0 2d       	mov	r30, r0
    2b24:	dc cf       	rjmp	.-72     	; 0x2ade <malloc+0x1e>
    2b26:	21 15       	cp	r18, r1
    2b28:	31 05       	cpc	r19, r1
    2b2a:	09 f1       	breq	.+66     	; 0x2b6e <malloc+0xae>
    2b2c:	28 1b       	sub	r18, r24
    2b2e:	39 0b       	sbc	r19, r25
    2b30:	24 30       	cpi	r18, 0x04	; 4
    2b32:	31 05       	cpc	r19, r1
    2b34:	90 f4       	brcc	.+36     	; 0x2b5a <malloc+0x9a>
    2b36:	12 96       	adiw	r26, 0x02	; 2
    2b38:	8d 91       	ld	r24, X+
    2b3a:	9c 91       	ld	r25, X
    2b3c:	13 97       	sbiw	r26, 0x03	; 3
    2b3e:	61 15       	cp	r22, r1
    2b40:	71 05       	cpc	r23, r1
    2b42:	21 f0       	breq	.+8      	; 0x2b4c <malloc+0x8c>
    2b44:	fb 01       	movw	r30, r22
    2b46:	93 83       	std	Z+3, r25	; 0x03
    2b48:	82 83       	std	Z+2, r24	; 0x02
    2b4a:	04 c0       	rjmp	.+8      	; 0x2b54 <malloc+0x94>
    2b4c:	90 93 78 05 	sts	0x0578, r25
    2b50:	80 93 77 05 	sts	0x0577, r24
    2b54:	fd 01       	movw	r30, r26
    2b56:	32 96       	adiw	r30, 0x02	; 2
    2b58:	44 c0       	rjmp	.+136    	; 0x2be2 <malloc+0x122>
    2b5a:	fd 01       	movw	r30, r26
    2b5c:	e2 0f       	add	r30, r18
    2b5e:	f3 1f       	adc	r31, r19
    2b60:	81 93       	st	Z+, r24
    2b62:	91 93       	st	Z+, r25
    2b64:	22 50       	subi	r18, 0x02	; 2
    2b66:	31 09       	sbc	r19, r1
    2b68:	2d 93       	st	X+, r18
    2b6a:	3c 93       	st	X, r19
    2b6c:	3a c0       	rjmp	.+116    	; 0x2be2 <malloc+0x122>
    2b6e:	20 91 75 05 	lds	r18, 0x0575
    2b72:	30 91 76 05 	lds	r19, 0x0576
    2b76:	23 2b       	or	r18, r19
    2b78:	41 f4       	brne	.+16     	; 0x2b8a <malloc+0xca>
    2b7a:	20 91 02 01 	lds	r18, 0x0102
    2b7e:	30 91 03 01 	lds	r19, 0x0103
    2b82:	30 93 76 05 	sts	0x0576, r19
    2b86:	20 93 75 05 	sts	0x0575, r18
    2b8a:	20 91 00 01 	lds	r18, 0x0100
    2b8e:	30 91 01 01 	lds	r19, 0x0101
    2b92:	21 15       	cp	r18, r1
    2b94:	31 05       	cpc	r19, r1
    2b96:	41 f4       	brne	.+16     	; 0x2ba8 <malloc+0xe8>
    2b98:	2d b7       	in	r18, 0x3d	; 61
    2b9a:	3e b7       	in	r19, 0x3e	; 62
    2b9c:	40 91 04 01 	lds	r20, 0x0104
    2ba0:	50 91 05 01 	lds	r21, 0x0105
    2ba4:	24 1b       	sub	r18, r20
    2ba6:	35 0b       	sbc	r19, r21
    2ba8:	e0 91 75 05 	lds	r30, 0x0575
    2bac:	f0 91 76 05 	lds	r31, 0x0576
    2bb0:	e2 17       	cp	r30, r18
    2bb2:	f3 07       	cpc	r31, r19
    2bb4:	a0 f4       	brcc	.+40     	; 0x2bde <malloc+0x11e>
    2bb6:	2e 1b       	sub	r18, r30
    2bb8:	3f 0b       	sbc	r19, r31
    2bba:	28 17       	cp	r18, r24
    2bbc:	39 07       	cpc	r19, r25
    2bbe:	78 f0       	brcs	.+30     	; 0x2bde <malloc+0x11e>
    2bc0:	ac 01       	movw	r20, r24
    2bc2:	4e 5f       	subi	r20, 0xFE	; 254
    2bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc6:	24 17       	cp	r18, r20
    2bc8:	35 07       	cpc	r19, r21
    2bca:	48 f0       	brcs	.+18     	; 0x2bde <malloc+0x11e>
    2bcc:	4e 0f       	add	r20, r30
    2bce:	5f 1f       	adc	r21, r31
    2bd0:	50 93 76 05 	sts	0x0576, r21
    2bd4:	40 93 75 05 	sts	0x0575, r20
    2bd8:	81 93       	st	Z+, r24
    2bda:	91 93       	st	Z+, r25
    2bdc:	02 c0       	rjmp	.+4      	; 0x2be2 <malloc+0x122>
    2bde:	e0 e0       	ldi	r30, 0x00	; 0
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	cf 01       	movw	r24, r30
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	08 95       	ret

00002bea <free>:
    2bea:	0f 93       	push	r16
    2bec:	1f 93       	push	r17
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	00 97       	sbiw	r24, 0x00	; 0
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <free+0xe>
    2bf6:	8c c0       	rjmp	.+280    	; 0x2d10 <free+0x126>
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	32 97       	sbiw	r30, 0x02	; 2
    2bfc:	13 82       	std	Z+3, r1	; 0x03
    2bfe:	12 82       	std	Z+2, r1	; 0x02
    2c00:	00 91 77 05 	lds	r16, 0x0577
    2c04:	10 91 78 05 	lds	r17, 0x0578
    2c08:	01 15       	cp	r16, r1
    2c0a:	11 05       	cpc	r17, r1
    2c0c:	81 f4       	brne	.+32     	; 0x2c2e <free+0x44>
    2c0e:	20 81       	ld	r18, Z
    2c10:	31 81       	ldd	r19, Z+1	; 0x01
    2c12:	82 0f       	add	r24, r18
    2c14:	93 1f       	adc	r25, r19
    2c16:	20 91 75 05 	lds	r18, 0x0575
    2c1a:	30 91 76 05 	lds	r19, 0x0576
    2c1e:	28 17       	cp	r18, r24
    2c20:	39 07       	cpc	r19, r25
    2c22:	79 f5       	brne	.+94     	; 0x2c82 <free+0x98>
    2c24:	f0 93 76 05 	sts	0x0576, r31
    2c28:	e0 93 75 05 	sts	0x0575, r30
    2c2c:	71 c0       	rjmp	.+226    	; 0x2d10 <free+0x126>
    2c2e:	d8 01       	movw	r26, r16
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	ae 17       	cp	r26, r30
    2c36:	bf 07       	cpc	r27, r31
    2c38:	50 f4       	brcc	.+20     	; 0x2c4e <free+0x64>
    2c3a:	12 96       	adiw	r26, 0x02	; 2
    2c3c:	2d 91       	ld	r18, X+
    2c3e:	3c 91       	ld	r19, X
    2c40:	13 97       	sbiw	r26, 0x03	; 3
    2c42:	ad 01       	movw	r20, r26
    2c44:	21 15       	cp	r18, r1
    2c46:	31 05       	cpc	r19, r1
    2c48:	09 f1       	breq	.+66     	; 0x2c8c <free+0xa2>
    2c4a:	d9 01       	movw	r26, r18
    2c4c:	f3 cf       	rjmp	.-26     	; 0x2c34 <free+0x4a>
    2c4e:	9d 01       	movw	r18, r26
    2c50:	da 01       	movw	r26, r20
    2c52:	33 83       	std	Z+3, r19	; 0x03
    2c54:	22 83       	std	Z+2, r18	; 0x02
    2c56:	60 81       	ld	r22, Z
    2c58:	71 81       	ldd	r23, Z+1	; 0x01
    2c5a:	86 0f       	add	r24, r22
    2c5c:	97 1f       	adc	r25, r23
    2c5e:	82 17       	cp	r24, r18
    2c60:	93 07       	cpc	r25, r19
    2c62:	69 f4       	brne	.+26     	; 0x2c7e <free+0x94>
    2c64:	ec 01       	movw	r28, r24
    2c66:	28 81       	ld	r18, Y
    2c68:	39 81       	ldd	r19, Y+1	; 0x01
    2c6a:	26 0f       	add	r18, r22
    2c6c:	37 1f       	adc	r19, r23
    2c6e:	2e 5f       	subi	r18, 0xFE	; 254
    2c70:	3f 4f       	sbci	r19, 0xFF	; 255
    2c72:	31 83       	std	Z+1, r19	; 0x01
    2c74:	20 83       	st	Z, r18
    2c76:	8a 81       	ldd	r24, Y+2	; 0x02
    2c78:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7a:	93 83       	std	Z+3, r25	; 0x03
    2c7c:	82 83       	std	Z+2, r24	; 0x02
    2c7e:	45 2b       	or	r20, r21
    2c80:	29 f4       	brne	.+10     	; 0x2c8c <free+0xa2>
    2c82:	f0 93 78 05 	sts	0x0578, r31
    2c86:	e0 93 77 05 	sts	0x0577, r30
    2c8a:	42 c0       	rjmp	.+132    	; 0x2d10 <free+0x126>
    2c8c:	13 96       	adiw	r26, 0x03	; 3
    2c8e:	fc 93       	st	X, r31
    2c90:	ee 93       	st	-X, r30
    2c92:	12 97       	sbiw	r26, 0x02	; 2
    2c94:	ed 01       	movw	r28, r26
    2c96:	49 91       	ld	r20, Y+
    2c98:	59 91       	ld	r21, Y+
    2c9a:	9e 01       	movw	r18, r28
    2c9c:	24 0f       	add	r18, r20
    2c9e:	35 1f       	adc	r19, r21
    2ca0:	e2 17       	cp	r30, r18
    2ca2:	f3 07       	cpc	r31, r19
    2ca4:	71 f4       	brne	.+28     	; 0x2cc2 <free+0xd8>
    2ca6:	80 81       	ld	r24, Z
    2ca8:	91 81       	ldd	r25, Z+1	; 0x01
    2caa:	84 0f       	add	r24, r20
    2cac:	95 1f       	adc	r25, r21
    2cae:	02 96       	adiw	r24, 0x02	; 2
    2cb0:	11 96       	adiw	r26, 0x01	; 1
    2cb2:	9c 93       	st	X, r25
    2cb4:	8e 93       	st	-X, r24
    2cb6:	82 81       	ldd	r24, Z+2	; 0x02
    2cb8:	93 81       	ldd	r25, Z+3	; 0x03
    2cba:	13 96       	adiw	r26, 0x03	; 3
    2cbc:	9c 93       	st	X, r25
    2cbe:	8e 93       	st	-X, r24
    2cc0:	12 97       	sbiw	r26, 0x02	; 2
    2cc2:	e0 e0       	ldi	r30, 0x00	; 0
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	d8 01       	movw	r26, r16
    2cc8:	12 96       	adiw	r26, 0x02	; 2
    2cca:	8d 91       	ld	r24, X+
    2ccc:	9c 91       	ld	r25, X
    2cce:	13 97       	sbiw	r26, 0x03	; 3
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	19 f0       	breq	.+6      	; 0x2cda <free+0xf0>
    2cd4:	f8 01       	movw	r30, r16
    2cd6:	8c 01       	movw	r16, r24
    2cd8:	f6 cf       	rjmp	.-20     	; 0x2cc6 <free+0xdc>
    2cda:	8d 91       	ld	r24, X+
    2cdc:	9c 91       	ld	r25, X
    2cde:	98 01       	movw	r18, r16
    2ce0:	2e 5f       	subi	r18, 0xFE	; 254
    2ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce4:	82 0f       	add	r24, r18
    2ce6:	93 1f       	adc	r25, r19
    2ce8:	20 91 75 05 	lds	r18, 0x0575
    2cec:	30 91 76 05 	lds	r19, 0x0576
    2cf0:	28 17       	cp	r18, r24
    2cf2:	39 07       	cpc	r19, r25
    2cf4:	69 f4       	brne	.+26     	; 0x2d10 <free+0x126>
    2cf6:	30 97       	sbiw	r30, 0x00	; 0
    2cf8:	29 f4       	brne	.+10     	; 0x2d04 <free+0x11a>
    2cfa:	10 92 78 05 	sts	0x0578, r1
    2cfe:	10 92 77 05 	sts	0x0577, r1
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <free+0x11e>
    2d04:	13 82       	std	Z+3, r1	; 0x03
    2d06:	12 82       	std	Z+2, r1	; 0x02
    2d08:	10 93 76 05 	sts	0x0576, r17
    2d0c:	00 93 75 05 	sts	0x0575, r16
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	08 95       	ret

00002d1a <strtol>:
    2d1a:	a0 e0       	ldi	r26, 0x00	; 0
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e3 e9       	ldi	r30, 0x93	; 147
    2d20:	f6 e1       	ldi	r31, 0x16	; 22
    2d22:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__prologue_saves__>
    2d26:	5c 01       	movw	r10, r24
    2d28:	6b 01       	movw	r12, r22
    2d2a:	7a 01       	movw	r14, r20
    2d2c:	61 15       	cp	r22, r1
    2d2e:	71 05       	cpc	r23, r1
    2d30:	19 f0       	breq	.+6      	; 0x2d38 <strtol+0x1e>
    2d32:	fb 01       	movw	r30, r22
    2d34:	91 83       	std	Z+1, r25	; 0x01
    2d36:	80 83       	st	Z, r24
    2d38:	e1 14       	cp	r14, r1
    2d3a:	f1 04       	cpc	r15, r1
    2d3c:	29 f0       	breq	.+10     	; 0x2d48 <strtol+0x2e>
    2d3e:	c7 01       	movw	r24, r14
    2d40:	02 97       	sbiw	r24, 0x02	; 2
    2d42:	83 97       	sbiw	r24, 0x23	; 35
    2d44:	08 f0       	brcs	.+2      	; 0x2d48 <strtol+0x2e>
    2d46:	f1 c0       	rjmp	.+482    	; 0x2f2a <strtol+0x210>
    2d48:	e5 01       	movw	r28, r10
    2d4a:	21 96       	adiw	r28, 0x01	; 1
    2d4c:	f5 01       	movw	r30, r10
    2d4e:	10 81       	ld	r17, Z
    2d50:	81 2f       	mov	r24, r17
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <isspace>
    2d58:	89 2b       	or	r24, r25
    2d5a:	11 f0       	breq	.+4      	; 0x2d60 <strtol+0x46>
    2d5c:	5e 01       	movw	r10, r28
    2d5e:	f4 cf       	rjmp	.-24     	; 0x2d48 <strtol+0x2e>
    2d60:	1d 32       	cpi	r17, 0x2D	; 45
    2d62:	29 f4       	brne	.+10     	; 0x2d6e <strtol+0x54>
    2d64:	21 96       	adiw	r28, 0x01	; 1
    2d66:	f5 01       	movw	r30, r10
    2d68:	11 81       	ldd	r17, Z+1	; 0x01
    2d6a:	01 e0       	ldi	r16, 0x01	; 1
    2d6c:	07 c0       	rjmp	.+14     	; 0x2d7c <strtol+0x62>
    2d6e:	1b 32       	cpi	r17, 0x2B	; 43
    2d70:	21 f4       	brne	.+8      	; 0x2d7a <strtol+0x60>
    2d72:	e5 01       	movw	r28, r10
    2d74:	22 96       	adiw	r28, 0x02	; 2
    2d76:	f5 01       	movw	r30, r10
    2d78:	11 81       	ldd	r17, Z+1	; 0x01
    2d7a:	00 e0       	ldi	r16, 0x00	; 0
    2d7c:	e1 14       	cp	r14, r1
    2d7e:	f1 04       	cpc	r15, r1
    2d80:	59 f1       	breq	.+86     	; 0x2dd8 <strtol+0xbe>
    2d82:	f0 e1       	ldi	r31, 0x10	; 16
    2d84:	ef 16       	cp	r14, r31
    2d86:	f1 04       	cpc	r15, r1
    2d88:	61 f4       	brne	.+24     	; 0x2da2 <strtol+0x88>
    2d8a:	10 33       	cpi	r17, 0x30	; 48
    2d8c:	e1 f4       	brne	.+56     	; 0x2dc6 <strtol+0xac>
    2d8e:	88 81       	ld	r24, Y
    2d90:	8f 7d       	andi	r24, 0xDF	; 223
    2d92:	88 35       	cpi	r24, 0x58	; 88
    2d94:	69 f5       	brne	.+90     	; 0x2df0 <strtol+0xd6>
    2d96:	19 81       	ldd	r17, Y+1	; 0x01
    2d98:	22 96       	adiw	r28, 0x02	; 2
    2d9a:	02 60       	ori	r16, 0x02	; 2
    2d9c:	70 e1       	ldi	r23, 0x10	; 16
    2d9e:	e7 2e       	mov	r14, r23
    2da0:	f1 2c       	mov	r15, r1
    2da2:	88 e0       	ldi	r24, 0x08	; 8
    2da4:	e8 16       	cp	r14, r24
    2da6:	f1 04       	cpc	r15, r1
    2da8:	39 f1       	breq	.+78     	; 0x2df8 <strtol+0xde>
    2daa:	2c f4       	brge	.+10     	; 0x2db6 <strtol+0x9c>
    2dac:	f2 e0       	ldi	r31, 0x02	; 2
    2dae:	ef 16       	cp	r14, r31
    2db0:	f1 04       	cpc	r15, r1
    2db2:	c9 f1       	breq	.+114    	; 0x2e26 <strtol+0x10c>
    2db4:	2a c0       	rjmp	.+84     	; 0x2e0a <strtol+0xf0>
    2db6:	8a e0       	ldi	r24, 0x0A	; 10
    2db8:	e8 16       	cp	r14, r24
    2dba:	f1 04       	cpc	r15, r1
    2dbc:	79 f0       	breq	.+30     	; 0x2ddc <strtol+0xc2>
    2dbe:	e0 e1       	ldi	r30, 0x10	; 16
    2dc0:	ee 16       	cp	r14, r30
    2dc2:	f1 04       	cpc	r15, r1
    2dc4:	11 f5       	brne	.+68     	; 0x2e0a <strtol+0xf0>
    2dc6:	50 e1       	ldi	r21, 0x10	; 16
    2dc8:	e5 2e       	mov	r14, r21
    2dca:	f1 2c       	mov	r15, r1
    2dcc:	81 2c       	mov	r8, r1
    2dce:	91 2c       	mov	r9, r1
    2dd0:	a1 2c       	mov	r10, r1
    2dd2:	68 e0       	ldi	r22, 0x08	; 8
    2dd4:	b6 2e       	mov	r11, r22
    2dd6:	2c c0       	rjmp	.+88     	; 0x2e30 <strtol+0x116>
    2dd8:	10 33       	cpi	r17, 0x30	; 48
    2dda:	c9 f2       	breq	.-78     	; 0x2d8e <strtol+0x74>
    2ddc:	3a e0       	ldi	r19, 0x0A	; 10
    2dde:	e3 2e       	mov	r14, r19
    2de0:	f1 2c       	mov	r15, r1
    2de2:	4c ec       	ldi	r20, 0xCC	; 204
    2de4:	84 2e       	mov	r8, r20
    2de6:	98 2c       	mov	r9, r8
    2de8:	a8 2c       	mov	r10, r8
    2dea:	4c e0       	ldi	r20, 0x0C	; 12
    2dec:	b4 2e       	mov	r11, r20
    2dee:	20 c0       	rjmp	.+64     	; 0x2e30 <strtol+0x116>
    2df0:	10 e3       	ldi	r17, 0x30	; 48
    2df2:	e1 14       	cp	r14, r1
    2df4:	f1 04       	cpc	r15, r1
    2df6:	a9 f6       	brne	.-86     	; 0x2da2 <strtol+0x88>
    2df8:	98 e0       	ldi	r25, 0x08	; 8
    2dfa:	e9 2e       	mov	r14, r25
    2dfc:	f1 2c       	mov	r15, r1
    2dfe:	81 2c       	mov	r8, r1
    2e00:	91 2c       	mov	r9, r1
    2e02:	a1 2c       	mov	r10, r1
    2e04:	20 e1       	ldi	r18, 0x10	; 16
    2e06:	b2 2e       	mov	r11, r18
    2e08:	13 c0       	rjmp	.+38     	; 0x2e30 <strtol+0x116>
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	70 e0       	ldi	r23, 0x00	; 0
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e8       	ldi	r25, 0x80	; 128
    2e12:	97 01       	movw	r18, r14
    2e14:	0f 2c       	mov	r0, r15
    2e16:	00 0c       	add	r0, r0
    2e18:	44 0b       	sbc	r20, r20
    2e1a:	55 0b       	sbc	r21, r21
    2e1c:	0e 94 c4 12 	call	0x2588	; 0x2588 <__udivmodsi4>
    2e20:	49 01       	movw	r8, r18
    2e22:	5a 01       	movw	r10, r20
    2e24:	05 c0       	rjmp	.+10     	; 0x2e30 <strtol+0x116>
    2e26:	81 2c       	mov	r8, r1
    2e28:	91 2c       	mov	r9, r1
    2e2a:	a1 2c       	mov	r10, r1
    2e2c:	80 e4       	ldi	r24, 0x40	; 64
    2e2e:	b8 2e       	mov	r11, r24
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	a9 01       	movw	r20, r18
    2e38:	27 01       	movw	r4, r14
    2e3a:	0f 2c       	mov	r0, r15
    2e3c:	00 0c       	add	r0, r0
    2e3e:	66 08       	sbc	r6, r6
    2e40:	77 08       	sbc	r7, r7
    2e42:	1e 01       	movw	r2, r28
    2e44:	e0 ed       	ldi	r30, 0xD0	; 208
    2e46:	e1 0f       	add	r30, r17
    2e48:	ea 30       	cpi	r30, 0x0A	; 10
    2e4a:	60 f0       	brcs	.+24     	; 0x2e64 <strtol+0x14a>
    2e4c:	8f eb       	ldi	r24, 0xBF	; 191
    2e4e:	81 0f       	add	r24, r17
    2e50:	8a 31       	cpi	r24, 0x1A	; 26
    2e52:	10 f4       	brcc	.+4      	; 0x2e58 <strtol+0x13e>
    2e54:	e9 ec       	ldi	r30, 0xC9	; 201
    2e56:	05 c0       	rjmp	.+10     	; 0x2e62 <strtol+0x148>
    2e58:	8f e9       	ldi	r24, 0x9F	; 159
    2e5a:	81 0f       	add	r24, r17
    2e5c:	8a 31       	cpi	r24, 0x1A	; 26
    2e5e:	28 f5       	brcc	.+74     	; 0x2eaa <strtol+0x190>
    2e60:	e9 ea       	ldi	r30, 0xA9	; 169
    2e62:	e1 0f       	add	r30, r17
    2e64:	8e 2f       	mov	r24, r30
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	8e 15       	cp	r24, r14
    2e6a:	9f 05       	cpc	r25, r15
    2e6c:	f4 f4       	brge	.+60     	; 0x2eaa <strtol+0x190>
    2e6e:	67 fd       	sbrc	r22, 7
    2e70:	18 c0       	rjmp	.+48     	; 0x2ea2 <strtol+0x188>
    2e72:	82 16       	cp	r8, r18
    2e74:	93 06       	cpc	r9, r19
    2e76:	a4 06       	cpc	r10, r20
    2e78:	b5 06       	cpc	r11, r21
    2e7a:	90 f0       	brcs	.+36     	; 0x2ea0 <strtol+0x186>
    2e7c:	c3 01       	movw	r24, r6
    2e7e:	b2 01       	movw	r22, r4
    2e80:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__mulsi3>
    2e84:	9b 01       	movw	r18, r22
    2e86:	ac 01       	movw	r20, r24
    2e88:	2e 0f       	add	r18, r30
    2e8a:	31 1d       	adc	r19, r1
    2e8c:	41 1d       	adc	r20, r1
    2e8e:	51 1d       	adc	r21, r1
    2e90:	21 30       	cpi	r18, 0x01	; 1
    2e92:	31 05       	cpc	r19, r1
    2e94:	41 05       	cpc	r20, r1
    2e96:	f0 e8       	ldi	r31, 0x80	; 128
    2e98:	5f 07       	cpc	r21, r31
    2e9a:	10 f4       	brcc	.+4      	; 0x2ea0 <strtol+0x186>
    2e9c:	61 e0       	ldi	r22, 0x01	; 1
    2e9e:	01 c0       	rjmp	.+2      	; 0x2ea2 <strtol+0x188>
    2ea0:	6f ef       	ldi	r22, 0xFF	; 255
    2ea2:	21 96       	adiw	r28, 0x01	; 1
    2ea4:	f1 01       	movw	r30, r2
    2ea6:	10 81       	ld	r17, Z
    2ea8:	cc cf       	rjmp	.-104    	; 0x2e42 <strtol+0x128>
    2eaa:	80 2f       	mov	r24, r16
    2eac:	81 70       	andi	r24, 0x01	; 1
    2eae:	c1 14       	cp	r12, r1
    2eb0:	d1 04       	cpc	r13, r1
    2eb2:	71 f0       	breq	.+28     	; 0x2ed0 <strtol+0x1b6>
    2eb4:	66 23       	and	r22, r22
    2eb6:	29 f0       	breq	.+10     	; 0x2ec2 <strtol+0x1a8>
    2eb8:	21 97       	sbiw	r28, 0x01	; 1
    2eba:	f6 01       	movw	r30, r12
    2ebc:	d1 83       	std	Z+1, r29	; 0x01
    2ebe:	c0 83       	st	Z, r28
    2ec0:	07 c0       	rjmp	.+14     	; 0x2ed0 <strtol+0x1b6>
    2ec2:	01 ff       	sbrs	r16, 1
    2ec4:	19 c0       	rjmp	.+50     	; 0x2ef8 <strtol+0x1de>
    2ec6:	22 97       	sbiw	r28, 0x02	; 2
    2ec8:	f6 01       	movw	r30, r12
    2eca:	d1 83       	std	Z+1, r29	; 0x01
    2ecc:	c0 83       	st	Z, r28
    2ece:	14 c0       	rjmp	.+40     	; 0x2ef8 <strtol+0x1de>
    2ed0:	67 ff       	sbrs	r22, 7
    2ed2:	12 c0       	rjmp	.+36     	; 0x2ef8 <strtol+0x1de>
    2ed4:	81 11       	cpse	r24, r1
    2ed6:	05 c0       	rjmp	.+10     	; 0x2ee2 <strtol+0x1c8>
    2ed8:	2f ef       	ldi	r18, 0xFF	; 255
    2eda:	3f ef       	ldi	r19, 0xFF	; 255
    2edc:	4f ef       	ldi	r20, 0xFF	; 255
    2ede:	5f e7       	ldi	r21, 0x7F	; 127
    2ee0:	04 c0       	rjmp	.+8      	; 0x2eea <strtol+0x1d0>
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	50 e8       	ldi	r21, 0x80	; 128
    2eea:	82 e2       	ldi	r24, 0x22	; 34
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	90 93 7a 05 	sts	0x057A, r25
    2ef2:	80 93 79 05 	sts	0x0579, r24
    2ef6:	16 c0       	rjmp	.+44     	; 0x2f24 <strtol+0x20a>
    2ef8:	88 23       	and	r24, r24
    2efa:	41 f0       	breq	.+16     	; 0x2f0c <strtol+0x1f2>
    2efc:	50 95       	com	r21
    2efe:	40 95       	com	r20
    2f00:	30 95       	com	r19
    2f02:	21 95       	neg	r18
    2f04:	3f 4f       	sbci	r19, 0xFF	; 255
    2f06:	4f 4f       	sbci	r20, 0xFF	; 255
    2f08:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0a:	0c c0       	rjmp	.+24     	; 0x2f24 <strtol+0x20a>
    2f0c:	57 ff       	sbrs	r21, 7
    2f0e:	0a c0       	rjmp	.+20     	; 0x2f24 <strtol+0x20a>
    2f10:	82 e2       	ldi	r24, 0x22	; 34
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	90 93 7a 05 	sts	0x057A, r25
    2f18:	80 93 79 05 	sts	0x0579, r24
    2f1c:	2f ef       	ldi	r18, 0xFF	; 255
    2f1e:	3f ef       	ldi	r19, 0xFF	; 255
    2f20:	4f ef       	ldi	r20, 0xFF	; 255
    2f22:	5f e7       	ldi	r21, 0x7F	; 127
    2f24:	b9 01       	movw	r22, r18
    2f26:	ca 01       	movw	r24, r20
    2f28:	04 c0       	rjmp	.+8      	; 0x2f32 <strtol+0x218>
    2f2a:	60 e0       	ldi	r22, 0x00	; 0
    2f2c:	70 e0       	ldi	r23, 0x00	; 0
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	e2 e1       	ldi	r30, 0x12	; 18
    2f38:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__epilogue_restores__>

00002f3c <isspace>:
    2f3c:	91 11       	cpse	r25, r1
    2f3e:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__ctype_isfalse>
    2f42:	80 32       	cpi	r24, 0x20	; 32
    2f44:	19 f0       	breq	.+6      	; 0x2f4c <isspace+0x10>
    2f46:	89 50       	subi	r24, 0x09	; 9
    2f48:	85 50       	subi	r24, 0x05	; 5
    2f4a:	c8 f7       	brcc	.-14     	; 0x2f3e <isspace+0x2>
    2f4c:	08 95       	ret

00002f4e <strtok>:
    2f4e:	48 e0       	ldi	r20, 0x08	; 8
    2f50:	52 e0       	ldi	r21, 0x02	; 2
    2f52:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <strtok_r>
    2f56:	08 95       	ret

00002f58 <strcat>:
    2f58:	fb 01       	movw	r30, r22
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	0d 90       	ld	r0, X+
    2f5e:	00 20       	and	r0, r0
    2f60:	e9 f7       	brne	.-6      	; 0x2f5c <strcat+0x4>
    2f62:	11 97       	sbiw	r26, 0x01	; 1
    2f64:	01 90       	ld	r0, Z+
    2f66:	0d 92       	st	X+, r0
    2f68:	00 20       	and	r0, r0
    2f6a:	e1 f7       	brne	.-8      	; 0x2f64 <strcat+0xc>
    2f6c:	08 95       	ret

00002f6e <strtok_r>:
    2f6e:	fa 01       	movw	r30, r20
    2f70:	a1 91       	ld	r26, Z+
    2f72:	b0 81       	ld	r27, Z
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	19 f4       	brne	.+6      	; 0x2f7e <strtok_r+0x10>
    2f78:	10 97       	sbiw	r26, 0x00	; 0
    2f7a:	e1 f0       	breq	.+56     	; 0x2fb4 <strtok_r+0x46>
    2f7c:	cd 01       	movw	r24, r26
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cd 01       	movw	r24, r26
    2f82:	0d 90       	ld	r0, X+
    2f84:	00 20       	and	r0, r0
    2f86:	11 f4       	brne	.+4      	; 0x2f8c <strtok_r+0x1e>
    2f88:	c0 01       	movw	r24, r0
    2f8a:	13 c0       	rjmp	.+38     	; 0x2fb2 <strtok_r+0x44>
    2f8c:	fb 01       	movw	r30, r22
    2f8e:	21 91       	ld	r18, Z+
    2f90:	22 23       	and	r18, r18
    2f92:	19 f0       	breq	.+6      	; 0x2f9a <strtok_r+0x2c>
    2f94:	20 15       	cp	r18, r0
    2f96:	d9 f7       	brne	.-10     	; 0x2f8e <strtok_r+0x20>
    2f98:	f3 cf       	rjmp	.-26     	; 0x2f80 <strtok_r+0x12>
    2f9a:	fb 01       	movw	r30, r22
    2f9c:	21 91       	ld	r18, Z+
    2f9e:	20 15       	cp	r18, r0
    2fa0:	19 f4       	brne	.+6      	; 0x2fa8 <strtok_r+0x3a>
    2fa2:	1e 92       	st	-X, r1
    2fa4:	11 96       	adiw	r26, 0x01	; 1
    2fa6:	06 c0       	rjmp	.+12     	; 0x2fb4 <strtok_r+0x46>
    2fa8:	22 23       	and	r18, r18
    2faa:	c1 f7       	brne	.-16     	; 0x2f9c <strtok_r+0x2e>
    2fac:	0d 90       	ld	r0, X+
    2fae:	00 20       	and	r0, r0
    2fb0:	a1 f7       	brne	.-24     	; 0x2f9a <strtok_r+0x2c>
    2fb2:	d0 01       	movw	r26, r0
    2fb4:	fa 01       	movw	r30, r20
    2fb6:	a1 93       	st	Z+, r26
    2fb8:	b0 83       	st	Z, r27
    2fba:	08 95       	ret

00002fbc <sprintf>:
    2fbc:	ae e0       	ldi	r26, 0x0E	; 14
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e4 ee       	ldi	r30, 0xE4	; 228
    2fc2:	f7 e1       	ldi	r31, 0x17	; 23
    2fc4:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__prologue_saves__+0x1c>
    2fc8:	0d 89       	ldd	r16, Y+21	; 0x15
    2fca:	1e 89       	ldd	r17, Y+22	; 0x16
    2fcc:	86 e0       	ldi	r24, 0x06	; 6
    2fce:	8c 83       	std	Y+4, r24	; 0x04
    2fd0:	1a 83       	std	Y+2, r17	; 0x02
    2fd2:	09 83       	std	Y+1, r16	; 0x01
    2fd4:	8f ef       	ldi	r24, 0xFF	; 255
    2fd6:	9f e7       	ldi	r25, 0x7F	; 127
    2fd8:	9e 83       	std	Y+6, r25	; 0x06
    2fda:	8d 83       	std	Y+5, r24	; 0x05
    2fdc:	ae 01       	movw	r20, r28
    2fde:	47 5e       	subi	r20, 0xE7	; 231
    2fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe2:	6f 89       	ldd	r22, Y+23	; 0x17
    2fe4:	78 8d       	ldd	r23, Y+24	; 0x18
    2fe6:	ce 01       	movw	r24, r28
    2fe8:	01 96       	adiw	r24, 0x01	; 1
    2fea:	0e 94 01 18 	call	0x3002	; 0x3002 <vfprintf>
    2fee:	2f 81       	ldd	r18, Y+7	; 0x07
    2ff0:	38 85       	ldd	r19, Y+8	; 0x08
    2ff2:	f8 01       	movw	r30, r16
    2ff4:	e2 0f       	add	r30, r18
    2ff6:	f3 1f       	adc	r31, r19
    2ff8:	10 82       	st	Z, r1
    2ffa:	2e 96       	adiw	r28, 0x0e	; 14
    2ffc:	e4 e0       	ldi	r30, 0x04	; 4
    2ffe:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <__epilogue_restores__+0x1c>

00003002 <vfprintf>:
    3002:	ac e0       	ldi	r26, 0x0C	; 12
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	e7 e0       	ldi	r30, 0x07	; 7
    3008:	f8 e1       	ldi	r31, 0x18	; 24
    300a:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__prologue_saves__>
    300e:	7c 01       	movw	r14, r24
    3010:	6b 01       	movw	r12, r22
    3012:	8a 01       	movw	r16, r20
    3014:	fc 01       	movw	r30, r24
    3016:	17 82       	std	Z+7, r1	; 0x07
    3018:	16 82       	std	Z+6, r1	; 0x06
    301a:	83 81       	ldd	r24, Z+3	; 0x03
    301c:	81 ff       	sbrs	r24, 1
    301e:	bd c1       	rjmp	.+890    	; 0x339a <vfprintf+0x398>
    3020:	ce 01       	movw	r24, r28
    3022:	01 96       	adiw	r24, 0x01	; 1
    3024:	4c 01       	movw	r8, r24
    3026:	f7 01       	movw	r30, r14
    3028:	93 81       	ldd	r25, Z+3	; 0x03
    302a:	f6 01       	movw	r30, r12
    302c:	93 fd       	sbrc	r25, 3
    302e:	85 91       	lpm	r24, Z+
    3030:	93 ff       	sbrs	r25, 3
    3032:	81 91       	ld	r24, Z+
    3034:	6f 01       	movw	r12, r30
    3036:	88 23       	and	r24, r24
    3038:	09 f4       	brne	.+2      	; 0x303c <vfprintf+0x3a>
    303a:	ab c1       	rjmp	.+854    	; 0x3392 <vfprintf+0x390>
    303c:	85 32       	cpi	r24, 0x25	; 37
    303e:	39 f4       	brne	.+14     	; 0x304e <vfprintf+0x4c>
    3040:	93 fd       	sbrc	r25, 3
    3042:	85 91       	lpm	r24, Z+
    3044:	93 ff       	sbrs	r25, 3
    3046:	81 91       	ld	r24, Z+
    3048:	6f 01       	movw	r12, r30
    304a:	85 32       	cpi	r24, 0x25	; 37
    304c:	29 f4       	brne	.+10     	; 0x3058 <vfprintf+0x56>
    304e:	b7 01       	movw	r22, r14
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <fputc>
    3056:	e7 cf       	rjmp	.-50     	; 0x3026 <vfprintf+0x24>
    3058:	51 2c       	mov	r5, r1
    305a:	31 2c       	mov	r3, r1
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	20 32       	cpi	r18, 0x20	; 32
    3060:	a0 f4       	brcc	.+40     	; 0x308a <vfprintf+0x88>
    3062:	8b 32       	cpi	r24, 0x2B	; 43
    3064:	69 f0       	breq	.+26     	; 0x3080 <vfprintf+0x7e>
    3066:	30 f4       	brcc	.+12     	; 0x3074 <vfprintf+0x72>
    3068:	80 32       	cpi	r24, 0x20	; 32
    306a:	59 f0       	breq	.+22     	; 0x3082 <vfprintf+0x80>
    306c:	83 32       	cpi	r24, 0x23	; 35
    306e:	69 f4       	brne	.+26     	; 0x308a <vfprintf+0x88>
    3070:	20 61       	ori	r18, 0x10	; 16
    3072:	2c c0       	rjmp	.+88     	; 0x30cc <vfprintf+0xca>
    3074:	8d 32       	cpi	r24, 0x2D	; 45
    3076:	39 f0       	breq	.+14     	; 0x3086 <vfprintf+0x84>
    3078:	80 33       	cpi	r24, 0x30	; 48
    307a:	39 f4       	brne	.+14     	; 0x308a <vfprintf+0x88>
    307c:	21 60       	ori	r18, 0x01	; 1
    307e:	26 c0       	rjmp	.+76     	; 0x30cc <vfprintf+0xca>
    3080:	22 60       	ori	r18, 0x02	; 2
    3082:	24 60       	ori	r18, 0x04	; 4
    3084:	23 c0       	rjmp	.+70     	; 0x30cc <vfprintf+0xca>
    3086:	28 60       	ori	r18, 0x08	; 8
    3088:	21 c0       	rjmp	.+66     	; 0x30cc <vfprintf+0xca>
    308a:	27 fd       	sbrc	r18, 7
    308c:	27 c0       	rjmp	.+78     	; 0x30dc <vfprintf+0xda>
    308e:	30 ed       	ldi	r19, 0xD0	; 208
    3090:	38 0f       	add	r19, r24
    3092:	3a 30       	cpi	r19, 0x0A	; 10
    3094:	78 f4       	brcc	.+30     	; 0x30b4 <vfprintf+0xb2>
    3096:	26 ff       	sbrs	r18, 6
    3098:	06 c0       	rjmp	.+12     	; 0x30a6 <vfprintf+0xa4>
    309a:	fa e0       	ldi	r31, 0x0A	; 10
    309c:	5f 9e       	mul	r5, r31
    309e:	30 0d       	add	r19, r0
    30a0:	11 24       	eor	r1, r1
    30a2:	53 2e       	mov	r5, r19
    30a4:	13 c0       	rjmp	.+38     	; 0x30cc <vfprintf+0xca>
    30a6:	8a e0       	ldi	r24, 0x0A	; 10
    30a8:	38 9e       	mul	r3, r24
    30aa:	30 0d       	add	r19, r0
    30ac:	11 24       	eor	r1, r1
    30ae:	33 2e       	mov	r3, r19
    30b0:	20 62       	ori	r18, 0x20	; 32
    30b2:	0c c0       	rjmp	.+24     	; 0x30cc <vfprintf+0xca>
    30b4:	8e 32       	cpi	r24, 0x2E	; 46
    30b6:	21 f4       	brne	.+8      	; 0x30c0 <vfprintf+0xbe>
    30b8:	26 fd       	sbrc	r18, 6
    30ba:	6b c1       	rjmp	.+726    	; 0x3392 <vfprintf+0x390>
    30bc:	20 64       	ori	r18, 0x40	; 64
    30be:	06 c0       	rjmp	.+12     	; 0x30cc <vfprintf+0xca>
    30c0:	8c 36       	cpi	r24, 0x6C	; 108
    30c2:	11 f4       	brne	.+4      	; 0x30c8 <vfprintf+0xc6>
    30c4:	20 68       	ori	r18, 0x80	; 128
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <vfprintf+0xca>
    30c8:	88 36       	cpi	r24, 0x68	; 104
    30ca:	41 f4       	brne	.+16     	; 0x30dc <vfprintf+0xda>
    30cc:	f6 01       	movw	r30, r12
    30ce:	93 fd       	sbrc	r25, 3
    30d0:	85 91       	lpm	r24, Z+
    30d2:	93 ff       	sbrs	r25, 3
    30d4:	81 91       	ld	r24, Z+
    30d6:	6f 01       	movw	r12, r30
    30d8:	81 11       	cpse	r24, r1
    30da:	c1 cf       	rjmp	.-126    	; 0x305e <vfprintf+0x5c>
    30dc:	98 2f       	mov	r25, r24
    30de:	9f 7d       	andi	r25, 0xDF	; 223
    30e0:	95 54       	subi	r25, 0x45	; 69
    30e2:	93 30       	cpi	r25, 0x03	; 3
    30e4:	28 f4       	brcc	.+10     	; 0x30f0 <vfprintf+0xee>
    30e6:	0c 5f       	subi	r16, 0xFC	; 252
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	ff e3       	ldi	r31, 0x3F	; 63
    30ec:	f9 83       	std	Y+1, r31	; 0x01
    30ee:	0d c0       	rjmp	.+26     	; 0x310a <vfprintf+0x108>
    30f0:	83 36       	cpi	r24, 0x63	; 99
    30f2:	31 f0       	breq	.+12     	; 0x3100 <vfprintf+0xfe>
    30f4:	83 37       	cpi	r24, 0x73	; 115
    30f6:	71 f0       	breq	.+28     	; 0x3114 <vfprintf+0x112>
    30f8:	83 35       	cpi	r24, 0x53	; 83
    30fa:	09 f0       	breq	.+2      	; 0x30fe <vfprintf+0xfc>
    30fc:	5b c0       	rjmp	.+182    	; 0x31b4 <vfprintf+0x1b2>
    30fe:	22 c0       	rjmp	.+68     	; 0x3144 <vfprintf+0x142>
    3100:	f8 01       	movw	r30, r16
    3102:	80 81       	ld	r24, Z
    3104:	89 83       	std	Y+1, r24	; 0x01
    3106:	0e 5f       	subi	r16, 0xFE	; 254
    3108:	1f 4f       	sbci	r17, 0xFF	; 255
    310a:	44 24       	eor	r4, r4
    310c:	43 94       	inc	r4
    310e:	51 2c       	mov	r5, r1
    3110:	54 01       	movw	r10, r8
    3112:	15 c0       	rjmp	.+42     	; 0x313e <vfprintf+0x13c>
    3114:	38 01       	movw	r6, r16
    3116:	f2 e0       	ldi	r31, 0x02	; 2
    3118:	6f 0e       	add	r6, r31
    311a:	71 1c       	adc	r7, r1
    311c:	f8 01       	movw	r30, r16
    311e:	a0 80       	ld	r10, Z
    3120:	b1 80       	ldd	r11, Z+1	; 0x01
    3122:	26 ff       	sbrs	r18, 6
    3124:	03 c0       	rjmp	.+6      	; 0x312c <vfprintf+0x12a>
    3126:	65 2d       	mov	r22, r5
    3128:	70 e0       	ldi	r23, 0x00	; 0
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <vfprintf+0x12e>
    312c:	6f ef       	ldi	r22, 0xFF	; 255
    312e:	7f ef       	ldi	r23, 0xFF	; 255
    3130:	c5 01       	movw	r24, r10
    3132:	2c 87       	std	Y+12, r18	; 0x0c
    3134:	0e 94 47 1c 	call	0x388e	; 0x388e <strnlen>
    3138:	2c 01       	movw	r4, r24
    313a:	83 01       	movw	r16, r6
    313c:	2c 85       	ldd	r18, Y+12	; 0x0c
    313e:	2f 77       	andi	r18, 0x7F	; 127
    3140:	22 2e       	mov	r2, r18
    3142:	17 c0       	rjmp	.+46     	; 0x3172 <vfprintf+0x170>
    3144:	38 01       	movw	r6, r16
    3146:	f2 e0       	ldi	r31, 0x02	; 2
    3148:	6f 0e       	add	r6, r31
    314a:	71 1c       	adc	r7, r1
    314c:	f8 01       	movw	r30, r16
    314e:	a0 80       	ld	r10, Z
    3150:	b1 80       	ldd	r11, Z+1	; 0x01
    3152:	26 ff       	sbrs	r18, 6
    3154:	03 c0       	rjmp	.+6      	; 0x315c <vfprintf+0x15a>
    3156:	65 2d       	mov	r22, r5
    3158:	70 e0       	ldi	r23, 0x00	; 0
    315a:	02 c0       	rjmp	.+4      	; 0x3160 <vfprintf+0x15e>
    315c:	6f ef       	ldi	r22, 0xFF	; 255
    315e:	7f ef       	ldi	r23, 0xFF	; 255
    3160:	c5 01       	movw	r24, r10
    3162:	2c 87       	std	Y+12, r18	; 0x0c
    3164:	0e 94 3c 1c 	call	0x3878	; 0x3878 <strnlen_P>
    3168:	2c 01       	movw	r4, r24
    316a:	2c 85       	ldd	r18, Y+12	; 0x0c
    316c:	20 68       	ori	r18, 0x80	; 128
    316e:	22 2e       	mov	r2, r18
    3170:	83 01       	movw	r16, r6
    3172:	23 fc       	sbrc	r2, 3
    3174:	1b c0       	rjmp	.+54     	; 0x31ac <vfprintf+0x1aa>
    3176:	83 2d       	mov	r24, r3
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	48 16       	cp	r4, r24
    317c:	59 06       	cpc	r5, r25
    317e:	b0 f4       	brcc	.+44     	; 0x31ac <vfprintf+0x1aa>
    3180:	b7 01       	movw	r22, r14
    3182:	80 e2       	ldi	r24, 0x20	; 32
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <fputc>
    318a:	3a 94       	dec	r3
    318c:	f4 cf       	rjmp	.-24     	; 0x3176 <vfprintf+0x174>
    318e:	f5 01       	movw	r30, r10
    3190:	27 fc       	sbrc	r2, 7
    3192:	85 91       	lpm	r24, Z+
    3194:	27 fe       	sbrs	r2, 7
    3196:	81 91       	ld	r24, Z+
    3198:	5f 01       	movw	r10, r30
    319a:	b7 01       	movw	r22, r14
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <fputc>
    31a2:	31 10       	cpse	r3, r1
    31a4:	3a 94       	dec	r3
    31a6:	f1 e0       	ldi	r31, 0x01	; 1
    31a8:	4f 1a       	sub	r4, r31
    31aa:	51 08       	sbc	r5, r1
    31ac:	41 14       	cp	r4, r1
    31ae:	51 04       	cpc	r5, r1
    31b0:	71 f7       	brne	.-36     	; 0x318e <vfprintf+0x18c>
    31b2:	e5 c0       	rjmp	.+458    	; 0x337e <vfprintf+0x37c>
    31b4:	84 36       	cpi	r24, 0x64	; 100
    31b6:	11 f0       	breq	.+4      	; 0x31bc <vfprintf+0x1ba>
    31b8:	89 36       	cpi	r24, 0x69	; 105
    31ba:	39 f5       	brne	.+78     	; 0x320a <vfprintf+0x208>
    31bc:	f8 01       	movw	r30, r16
    31be:	27 ff       	sbrs	r18, 7
    31c0:	07 c0       	rjmp	.+14     	; 0x31d0 <vfprintf+0x1ce>
    31c2:	60 81       	ld	r22, Z
    31c4:	71 81       	ldd	r23, Z+1	; 0x01
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	93 81       	ldd	r25, Z+3	; 0x03
    31ca:	0c 5f       	subi	r16, 0xFC	; 252
    31cc:	1f 4f       	sbci	r17, 0xFF	; 255
    31ce:	08 c0       	rjmp	.+16     	; 0x31e0 <vfprintf+0x1de>
    31d0:	60 81       	ld	r22, Z
    31d2:	71 81       	ldd	r23, Z+1	; 0x01
    31d4:	07 2e       	mov	r0, r23
    31d6:	00 0c       	add	r0, r0
    31d8:	88 0b       	sbc	r24, r24
    31da:	99 0b       	sbc	r25, r25
    31dc:	0e 5f       	subi	r16, 0xFE	; 254
    31de:	1f 4f       	sbci	r17, 0xFF	; 255
    31e0:	2f 76       	andi	r18, 0x6F	; 111
    31e2:	72 2e       	mov	r7, r18
    31e4:	97 ff       	sbrs	r25, 7
    31e6:	09 c0       	rjmp	.+18     	; 0x31fa <vfprintf+0x1f8>
    31e8:	90 95       	com	r25
    31ea:	80 95       	com	r24
    31ec:	70 95       	com	r23
    31ee:	61 95       	neg	r22
    31f0:	7f 4f       	sbci	r23, 0xFF	; 255
    31f2:	8f 4f       	sbci	r24, 0xFF	; 255
    31f4:	9f 4f       	sbci	r25, 0xFF	; 255
    31f6:	20 68       	ori	r18, 0x80	; 128
    31f8:	72 2e       	mov	r7, r18
    31fa:	2a e0       	ldi	r18, 0x0A	; 10
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	a4 01       	movw	r20, r8
    3200:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__ultoa_invert>
    3204:	a8 2e       	mov	r10, r24
    3206:	a8 18       	sub	r10, r8
    3208:	44 c0       	rjmp	.+136    	; 0x3292 <vfprintf+0x290>
    320a:	85 37       	cpi	r24, 0x75	; 117
    320c:	29 f4       	brne	.+10     	; 0x3218 <vfprintf+0x216>
    320e:	2f 7e       	andi	r18, 0xEF	; 239
    3210:	b2 2e       	mov	r11, r18
    3212:	2a e0       	ldi	r18, 0x0A	; 10
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	25 c0       	rjmp	.+74     	; 0x3262 <vfprintf+0x260>
    3218:	f2 2f       	mov	r31, r18
    321a:	f9 7f       	andi	r31, 0xF9	; 249
    321c:	bf 2e       	mov	r11, r31
    321e:	8f 36       	cpi	r24, 0x6F	; 111
    3220:	c1 f0       	breq	.+48     	; 0x3252 <vfprintf+0x250>
    3222:	18 f4       	brcc	.+6      	; 0x322a <vfprintf+0x228>
    3224:	88 35       	cpi	r24, 0x58	; 88
    3226:	79 f0       	breq	.+30     	; 0x3246 <vfprintf+0x244>
    3228:	b4 c0       	rjmp	.+360    	; 0x3392 <vfprintf+0x390>
    322a:	80 37       	cpi	r24, 0x70	; 112
    322c:	19 f0       	breq	.+6      	; 0x3234 <vfprintf+0x232>
    322e:	88 37       	cpi	r24, 0x78	; 120
    3230:	21 f0       	breq	.+8      	; 0x323a <vfprintf+0x238>
    3232:	af c0       	rjmp	.+350    	; 0x3392 <vfprintf+0x390>
    3234:	2f 2f       	mov	r18, r31
    3236:	20 61       	ori	r18, 0x10	; 16
    3238:	b2 2e       	mov	r11, r18
    323a:	b4 fe       	sbrs	r11, 4
    323c:	0d c0       	rjmp	.+26     	; 0x3258 <vfprintf+0x256>
    323e:	8b 2d       	mov	r24, r11
    3240:	84 60       	ori	r24, 0x04	; 4
    3242:	b8 2e       	mov	r11, r24
    3244:	09 c0       	rjmp	.+18     	; 0x3258 <vfprintf+0x256>
    3246:	24 ff       	sbrs	r18, 4
    3248:	0a c0       	rjmp	.+20     	; 0x325e <vfprintf+0x25c>
    324a:	9f 2f       	mov	r25, r31
    324c:	96 60       	ori	r25, 0x06	; 6
    324e:	b9 2e       	mov	r11, r25
    3250:	06 c0       	rjmp	.+12     	; 0x325e <vfprintf+0x25c>
    3252:	28 e0       	ldi	r18, 0x08	; 8
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	05 c0       	rjmp	.+10     	; 0x3262 <vfprintf+0x260>
    3258:	20 e1       	ldi	r18, 0x10	; 16
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	02 c0       	rjmp	.+4      	; 0x3262 <vfprintf+0x260>
    325e:	20 e1       	ldi	r18, 0x10	; 16
    3260:	32 e0       	ldi	r19, 0x02	; 2
    3262:	f8 01       	movw	r30, r16
    3264:	b7 fe       	sbrs	r11, 7
    3266:	07 c0       	rjmp	.+14     	; 0x3276 <vfprintf+0x274>
    3268:	60 81       	ld	r22, Z
    326a:	71 81       	ldd	r23, Z+1	; 0x01
    326c:	82 81       	ldd	r24, Z+2	; 0x02
    326e:	93 81       	ldd	r25, Z+3	; 0x03
    3270:	0c 5f       	subi	r16, 0xFC	; 252
    3272:	1f 4f       	sbci	r17, 0xFF	; 255
    3274:	06 c0       	rjmp	.+12     	; 0x3282 <vfprintf+0x280>
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	0e 5f       	subi	r16, 0xFE	; 254
    3280:	1f 4f       	sbci	r17, 0xFF	; 255
    3282:	a4 01       	movw	r20, r8
    3284:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__ultoa_invert>
    3288:	a8 2e       	mov	r10, r24
    328a:	a8 18       	sub	r10, r8
    328c:	fb 2d       	mov	r31, r11
    328e:	ff 77       	andi	r31, 0x7F	; 127
    3290:	7f 2e       	mov	r7, r31
    3292:	76 fe       	sbrs	r7, 6
    3294:	0b c0       	rjmp	.+22     	; 0x32ac <vfprintf+0x2aa>
    3296:	37 2d       	mov	r19, r7
    3298:	3e 7f       	andi	r19, 0xFE	; 254
    329a:	a5 14       	cp	r10, r5
    329c:	50 f4       	brcc	.+20     	; 0x32b2 <vfprintf+0x2b0>
    329e:	74 fe       	sbrs	r7, 4
    32a0:	0a c0       	rjmp	.+20     	; 0x32b6 <vfprintf+0x2b4>
    32a2:	72 fc       	sbrc	r7, 2
    32a4:	08 c0       	rjmp	.+16     	; 0x32b6 <vfprintf+0x2b4>
    32a6:	37 2d       	mov	r19, r7
    32a8:	3e 7e       	andi	r19, 0xEE	; 238
    32aa:	05 c0       	rjmp	.+10     	; 0x32b6 <vfprintf+0x2b4>
    32ac:	ba 2c       	mov	r11, r10
    32ae:	37 2d       	mov	r19, r7
    32b0:	03 c0       	rjmp	.+6      	; 0x32b8 <vfprintf+0x2b6>
    32b2:	ba 2c       	mov	r11, r10
    32b4:	01 c0       	rjmp	.+2      	; 0x32b8 <vfprintf+0x2b6>
    32b6:	b5 2c       	mov	r11, r5
    32b8:	34 ff       	sbrs	r19, 4
    32ba:	0d c0       	rjmp	.+26     	; 0x32d6 <vfprintf+0x2d4>
    32bc:	fe 01       	movw	r30, r28
    32be:	ea 0d       	add	r30, r10
    32c0:	f1 1d       	adc	r31, r1
    32c2:	80 81       	ld	r24, Z
    32c4:	80 33       	cpi	r24, 0x30	; 48
    32c6:	11 f4       	brne	.+4      	; 0x32cc <vfprintf+0x2ca>
    32c8:	39 7e       	andi	r19, 0xE9	; 233
    32ca:	09 c0       	rjmp	.+18     	; 0x32de <vfprintf+0x2dc>
    32cc:	32 ff       	sbrs	r19, 2
    32ce:	06 c0       	rjmp	.+12     	; 0x32dc <vfprintf+0x2da>
    32d0:	b3 94       	inc	r11
    32d2:	b3 94       	inc	r11
    32d4:	04 c0       	rjmp	.+8      	; 0x32de <vfprintf+0x2dc>
    32d6:	83 2f       	mov	r24, r19
    32d8:	86 78       	andi	r24, 0x86	; 134
    32da:	09 f0       	breq	.+2      	; 0x32de <vfprintf+0x2dc>
    32dc:	b3 94       	inc	r11
    32de:	33 fd       	sbrc	r19, 3
    32e0:	13 c0       	rjmp	.+38     	; 0x3308 <vfprintf+0x306>
    32e2:	30 ff       	sbrs	r19, 0
    32e4:	06 c0       	rjmp	.+12     	; 0x32f2 <vfprintf+0x2f0>
    32e6:	5a 2c       	mov	r5, r10
    32e8:	b3 14       	cp	r11, r3
    32ea:	18 f4       	brcc	.+6      	; 0x32f2 <vfprintf+0x2f0>
    32ec:	53 0c       	add	r5, r3
    32ee:	5b 18       	sub	r5, r11
    32f0:	b3 2c       	mov	r11, r3
    32f2:	b3 14       	cp	r11, r3
    32f4:	68 f4       	brcc	.+26     	; 0x3310 <vfprintf+0x30e>
    32f6:	b7 01       	movw	r22, r14
    32f8:	80 e2       	ldi	r24, 0x20	; 32
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	3c 87       	std	Y+12, r19	; 0x0c
    32fe:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <fputc>
    3302:	b3 94       	inc	r11
    3304:	3c 85       	ldd	r19, Y+12	; 0x0c
    3306:	f5 cf       	rjmp	.-22     	; 0x32f2 <vfprintf+0x2f0>
    3308:	b3 14       	cp	r11, r3
    330a:	10 f4       	brcc	.+4      	; 0x3310 <vfprintf+0x30e>
    330c:	3b 18       	sub	r3, r11
    330e:	01 c0       	rjmp	.+2      	; 0x3312 <vfprintf+0x310>
    3310:	31 2c       	mov	r3, r1
    3312:	34 ff       	sbrs	r19, 4
    3314:	12 c0       	rjmp	.+36     	; 0x333a <vfprintf+0x338>
    3316:	b7 01       	movw	r22, r14
    3318:	80 e3       	ldi	r24, 0x30	; 48
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	3c 87       	std	Y+12, r19	; 0x0c
    331e:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <fputc>
    3322:	3c 85       	ldd	r19, Y+12	; 0x0c
    3324:	32 ff       	sbrs	r19, 2
    3326:	17 c0       	rjmp	.+46     	; 0x3356 <vfprintf+0x354>
    3328:	31 fd       	sbrc	r19, 1
    332a:	03 c0       	rjmp	.+6      	; 0x3332 <vfprintf+0x330>
    332c:	88 e7       	ldi	r24, 0x78	; 120
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <vfprintf+0x334>
    3332:	88 e5       	ldi	r24, 0x58	; 88
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	b7 01       	movw	r22, r14
    3338:	0c c0       	rjmp	.+24     	; 0x3352 <vfprintf+0x350>
    333a:	83 2f       	mov	r24, r19
    333c:	86 78       	andi	r24, 0x86	; 134
    333e:	59 f0       	breq	.+22     	; 0x3356 <vfprintf+0x354>
    3340:	31 ff       	sbrs	r19, 1
    3342:	02 c0       	rjmp	.+4      	; 0x3348 <vfprintf+0x346>
    3344:	8b e2       	ldi	r24, 0x2B	; 43
    3346:	01 c0       	rjmp	.+2      	; 0x334a <vfprintf+0x348>
    3348:	80 e2       	ldi	r24, 0x20	; 32
    334a:	37 fd       	sbrc	r19, 7
    334c:	8d e2       	ldi	r24, 0x2D	; 45
    334e:	b7 01       	movw	r22, r14
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <fputc>
    3356:	a5 14       	cp	r10, r5
    3358:	38 f4       	brcc	.+14     	; 0x3368 <vfprintf+0x366>
    335a:	b7 01       	movw	r22, r14
    335c:	80 e3       	ldi	r24, 0x30	; 48
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <fputc>
    3364:	5a 94       	dec	r5
    3366:	f7 cf       	rjmp	.-18     	; 0x3356 <vfprintf+0x354>
    3368:	aa 94       	dec	r10
    336a:	f4 01       	movw	r30, r8
    336c:	ea 0d       	add	r30, r10
    336e:	f1 1d       	adc	r31, r1
    3370:	80 81       	ld	r24, Z
    3372:	b7 01       	movw	r22, r14
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <fputc>
    337a:	a1 10       	cpse	r10, r1
    337c:	f5 cf       	rjmp	.-22     	; 0x3368 <vfprintf+0x366>
    337e:	33 20       	and	r3, r3
    3380:	09 f4       	brne	.+2      	; 0x3384 <vfprintf+0x382>
    3382:	51 ce       	rjmp	.-862    	; 0x3026 <vfprintf+0x24>
    3384:	b7 01       	movw	r22, r14
    3386:	80 e2       	ldi	r24, 0x20	; 32
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <fputc>
    338e:	3a 94       	dec	r3
    3390:	f6 cf       	rjmp	.-20     	; 0x337e <vfprintf+0x37c>
    3392:	f7 01       	movw	r30, r14
    3394:	86 81       	ldd	r24, Z+6	; 0x06
    3396:	97 81       	ldd	r25, Z+7	; 0x07
    3398:	02 c0       	rjmp	.+4      	; 0x339e <vfprintf+0x39c>
    339a:	8f ef       	ldi	r24, 0xFF	; 255
    339c:	9f ef       	ldi	r25, 0xFF	; 255
    339e:	2c 96       	adiw	r28, 0x0c	; 12
    33a0:	e2 e1       	ldi	r30, 0x12	; 18
    33a2:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__epilogue_restores__>

000033a6 <dtoa_prf>:
    33a6:	4f 92       	push	r4
    33a8:	5f 92       	push	r5
    33aa:	6f 92       	push	r6
    33ac:	7f 92       	push	r7
    33ae:	9f 92       	push	r9
    33b0:	af 92       	push	r10
    33b2:	bf 92       	push	r11
    33b4:	cf 92       	push	r12
    33b6:	df 92       	push	r13
    33b8:	ef 92       	push	r14
    33ba:	ff 92       	push	r15
    33bc:	0f 93       	push	r16
    33be:	1f 93       	push	r17
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62
    33c8:	29 97       	sbiw	r28, 0x09	; 9
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	6a 01       	movw	r12, r20
    33d6:	12 2f       	mov	r17, r18
    33d8:	b0 2e       	mov	r11, r16
    33da:	2b e3       	ldi	r18, 0x3B	; 59
    33dc:	20 17       	cp	r18, r16
    33de:	20 f0       	brcs	.+8      	; 0x33e8 <dtoa_prf+0x42>
    33e0:	ff 24       	eor	r15, r15
    33e2:	f3 94       	inc	r15
    33e4:	f0 0e       	add	r15, r16
    33e6:	02 c0       	rjmp	.+4      	; 0x33ec <dtoa_prf+0x46>
    33e8:	bc e3       	ldi	r27, 0x3C	; 60
    33ea:	fb 2e       	mov	r15, r27
    33ec:	0f 2d       	mov	r16, r15
    33ee:	27 e0       	ldi	r18, 0x07	; 7
    33f0:	ae 01       	movw	r20, r28
    33f2:	4f 5f       	subi	r20, 0xFF	; 255
    33f4:	5f 4f       	sbci	r21, 0xFF	; 255
    33f6:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__ftoa_engine>
    33fa:	ac 01       	movw	r20, r24
    33fc:	89 81       	ldd	r24, Y+1	; 0x01
    33fe:	98 2f       	mov	r25, r24
    3400:	99 70       	andi	r25, 0x09	; 9
    3402:	91 30       	cpi	r25, 0x01	; 1
    3404:	31 f0       	breq	.+12     	; 0x3412 <dtoa_prf+0x6c>
    3406:	e1 fc       	sbrc	r14, 1
    3408:	06 c0       	rjmp	.+12     	; 0x3416 <dtoa_prf+0x70>
    340a:	e0 fe       	sbrs	r14, 0
    340c:	06 c0       	rjmp	.+12     	; 0x341a <dtoa_prf+0x74>
    340e:	90 e2       	ldi	r25, 0x20	; 32
    3410:	05 c0       	rjmp	.+10     	; 0x341c <dtoa_prf+0x76>
    3412:	9d e2       	ldi	r25, 0x2D	; 45
    3414:	03 c0       	rjmp	.+6      	; 0x341c <dtoa_prf+0x76>
    3416:	9b e2       	ldi	r25, 0x2B	; 43
    3418:	01 c0       	rjmp	.+2      	; 0x341c <dtoa_prf+0x76>
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	ee 2d       	mov	r30, r14
    341e:	e0 71       	andi	r30, 0x10	; 16
    3420:	83 ff       	sbrs	r24, 3
    3422:	3c c0       	rjmp	.+120    	; 0x349c <dtoa_prf+0xf6>
    3424:	91 11       	cpse	r25, r1
    3426:	02 c0       	rjmp	.+4      	; 0x342c <dtoa_prf+0x86>
    3428:	83 e0       	ldi	r24, 0x03	; 3
    342a:	01 c0       	rjmp	.+2      	; 0x342e <dtoa_prf+0x88>
    342c:	84 e0       	ldi	r24, 0x04	; 4
    342e:	81 17       	cp	r24, r17
    3430:	18 f4       	brcc	.+6      	; 0x3438 <dtoa_prf+0x92>
    3432:	21 2f       	mov	r18, r17
    3434:	28 1b       	sub	r18, r24
    3436:	01 c0       	rjmp	.+2      	; 0x343a <dtoa_prf+0x94>
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	e1 11       	cpse	r30, r1
    343c:	0b c0       	rjmp	.+22     	; 0x3454 <dtoa_prf+0xae>
    343e:	f6 01       	movw	r30, r12
    3440:	82 2f       	mov	r24, r18
    3442:	30 e2       	ldi	r19, 0x20	; 32
    3444:	88 23       	and	r24, r24
    3446:	19 f0       	breq	.+6      	; 0x344e <dtoa_prf+0xa8>
    3448:	31 93       	st	Z+, r19
    344a:	81 50       	subi	r24, 0x01	; 1
    344c:	fb cf       	rjmp	.-10     	; 0x3444 <dtoa_prf+0x9e>
    344e:	c2 0e       	add	r12, r18
    3450:	d1 1c       	adc	r13, r1
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	99 23       	and	r25, r25
    3456:	29 f0       	breq	.+10     	; 0x3462 <dtoa_prf+0xbc>
    3458:	d6 01       	movw	r26, r12
    345a:	9c 93       	st	X, r25
    345c:	f6 01       	movw	r30, r12
    345e:	31 96       	adiw	r30, 0x01	; 1
    3460:	6f 01       	movw	r12, r30
    3462:	c6 01       	movw	r24, r12
    3464:	03 96       	adiw	r24, 0x03	; 3
    3466:	e2 fe       	sbrs	r14, 2
    3468:	0a c0       	rjmp	.+20     	; 0x347e <dtoa_prf+0xd8>
    346a:	3e e4       	ldi	r19, 0x4E	; 78
    346c:	d6 01       	movw	r26, r12
    346e:	3c 93       	st	X, r19
    3470:	41 e4       	ldi	r20, 0x41	; 65
    3472:	11 96       	adiw	r26, 0x01	; 1
    3474:	4c 93       	st	X, r20
    3476:	11 97       	sbiw	r26, 0x01	; 1
    3478:	12 96       	adiw	r26, 0x02	; 2
    347a:	3c 93       	st	X, r19
    347c:	06 c0       	rjmp	.+12     	; 0x348a <dtoa_prf+0xe4>
    347e:	3e e6       	ldi	r19, 0x6E	; 110
    3480:	f6 01       	movw	r30, r12
    3482:	30 83       	st	Z, r19
    3484:	41 e6       	ldi	r20, 0x61	; 97
    3486:	41 83       	std	Z+1, r20	; 0x01
    3488:	32 83       	std	Z+2, r19	; 0x02
    348a:	fc 01       	movw	r30, r24
    348c:	32 2f       	mov	r19, r18
    348e:	40 e2       	ldi	r20, 0x20	; 32
    3490:	33 23       	and	r19, r19
    3492:	09 f4       	brne	.+2      	; 0x3496 <dtoa_prf+0xf0>
    3494:	42 c0       	rjmp	.+132    	; 0x351a <dtoa_prf+0x174>
    3496:	41 93       	st	Z+, r20
    3498:	31 50       	subi	r19, 0x01	; 1
    349a:	fa cf       	rjmp	.-12     	; 0x3490 <dtoa_prf+0xea>
    349c:	82 ff       	sbrs	r24, 2
    349e:	44 c0       	rjmp	.+136    	; 0x3528 <dtoa_prf+0x182>
    34a0:	91 11       	cpse	r25, r1
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <dtoa_prf+0x102>
    34a4:	83 e0       	ldi	r24, 0x03	; 3
    34a6:	01 c0       	rjmp	.+2      	; 0x34aa <dtoa_prf+0x104>
    34a8:	84 e0       	ldi	r24, 0x04	; 4
    34aa:	81 17       	cp	r24, r17
    34ac:	18 f4       	brcc	.+6      	; 0x34b4 <dtoa_prf+0x10e>
    34ae:	21 2f       	mov	r18, r17
    34b0:	28 1b       	sub	r18, r24
    34b2:	01 c0       	rjmp	.+2      	; 0x34b6 <dtoa_prf+0x110>
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	e1 11       	cpse	r30, r1
    34b8:	0b c0       	rjmp	.+22     	; 0x34d0 <dtoa_prf+0x12a>
    34ba:	f6 01       	movw	r30, r12
    34bc:	82 2f       	mov	r24, r18
    34be:	30 e2       	ldi	r19, 0x20	; 32
    34c0:	88 23       	and	r24, r24
    34c2:	19 f0       	breq	.+6      	; 0x34ca <dtoa_prf+0x124>
    34c4:	31 93       	st	Z+, r19
    34c6:	81 50       	subi	r24, 0x01	; 1
    34c8:	fb cf       	rjmp	.-10     	; 0x34c0 <dtoa_prf+0x11a>
    34ca:	c2 0e       	add	r12, r18
    34cc:	d1 1c       	adc	r13, r1
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	99 23       	and	r25, r25
    34d2:	29 f0       	breq	.+10     	; 0x34de <dtoa_prf+0x138>
    34d4:	d6 01       	movw	r26, r12
    34d6:	9c 93       	st	X, r25
    34d8:	f6 01       	movw	r30, r12
    34da:	31 96       	adiw	r30, 0x01	; 1
    34dc:	6f 01       	movw	r12, r30
    34de:	c6 01       	movw	r24, r12
    34e0:	03 96       	adiw	r24, 0x03	; 3
    34e2:	e2 fe       	sbrs	r14, 2
    34e4:	0b c0       	rjmp	.+22     	; 0x34fc <dtoa_prf+0x156>
    34e6:	39 e4       	ldi	r19, 0x49	; 73
    34e8:	d6 01       	movw	r26, r12
    34ea:	3c 93       	st	X, r19
    34ec:	3e e4       	ldi	r19, 0x4E	; 78
    34ee:	11 96       	adiw	r26, 0x01	; 1
    34f0:	3c 93       	st	X, r19
    34f2:	11 97       	sbiw	r26, 0x01	; 1
    34f4:	36 e4       	ldi	r19, 0x46	; 70
    34f6:	12 96       	adiw	r26, 0x02	; 2
    34f8:	3c 93       	st	X, r19
    34fa:	07 c0       	rjmp	.+14     	; 0x350a <dtoa_prf+0x164>
    34fc:	39 e6       	ldi	r19, 0x69	; 105
    34fe:	f6 01       	movw	r30, r12
    3500:	30 83       	st	Z, r19
    3502:	3e e6       	ldi	r19, 0x6E	; 110
    3504:	31 83       	std	Z+1, r19	; 0x01
    3506:	36 e6       	ldi	r19, 0x66	; 102
    3508:	32 83       	std	Z+2, r19	; 0x02
    350a:	fc 01       	movw	r30, r24
    350c:	32 2f       	mov	r19, r18
    350e:	40 e2       	ldi	r20, 0x20	; 32
    3510:	33 23       	and	r19, r19
    3512:	19 f0       	breq	.+6      	; 0x351a <dtoa_prf+0x174>
    3514:	41 93       	st	Z+, r20
    3516:	31 50       	subi	r19, 0x01	; 1
    3518:	fb cf       	rjmp	.-10     	; 0x3510 <dtoa_prf+0x16a>
    351a:	fc 01       	movw	r30, r24
    351c:	e2 0f       	add	r30, r18
    351e:	f1 1d       	adc	r31, r1
    3520:	10 82       	st	Z, r1
    3522:	8e ef       	ldi	r24, 0xFE	; 254
    3524:	9f ef       	ldi	r25, 0xFF	; 255
    3526:	b7 c0       	rjmp	.+366    	; 0x3696 <dtoa_prf+0x2f0>
    3528:	f1 e0       	ldi	r31, 0x01	; 1
    352a:	91 11       	cpse	r25, r1
    352c:	01 c0       	rjmp	.+2      	; 0x3530 <dtoa_prf+0x18a>
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	6f 2f       	mov	r22, r31
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	14 16       	cp	r1, r20
    3536:	15 06       	cpc	r1, r21
    3538:	24 f4       	brge	.+8      	; 0x3542 <dtoa_prf+0x19c>
    353a:	9a 01       	movw	r18, r20
    353c:	2f 5f       	subi	r18, 0xFF	; 255
    353e:	3f 4f       	sbci	r19, 0xFF	; 255
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <dtoa_prf+0x1a0>
    3542:	21 e0       	ldi	r18, 0x01	; 1
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	26 0f       	add	r18, r22
    3548:	37 1f       	adc	r19, r23
    354a:	bb 20       	and	r11, r11
    354c:	29 f0       	breq	.+10     	; 0x3558 <dtoa_prf+0x1b2>
    354e:	6b 2d       	mov	r22, r11
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	6f 5f       	subi	r22, 0xFF	; 255
    3554:	7f 4f       	sbci	r23, 0xFF	; 255
    3556:	02 c0       	rjmp	.+4      	; 0x355c <dtoa_prf+0x1b6>
    3558:	60 e0       	ldi	r22, 0x00	; 0
    355a:	70 e0       	ldi	r23, 0x00	; 0
    355c:	26 0f       	add	r18, r22
    355e:	37 1f       	adc	r19, r23
    3560:	61 2f       	mov	r22, r17
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	26 17       	cp	r18, r22
    3566:	37 07       	cpc	r19, r23
    3568:	1c f4       	brge	.+6      	; 0x3570 <dtoa_prf+0x1ca>
    356a:	12 1b       	sub	r17, r18
    356c:	21 2f       	mov	r18, r17
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <dtoa_prf+0x1cc>
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	3e 2d       	mov	r19, r14
    3574:	38 71       	andi	r19, 0x18	; 24
    3576:	59 f4       	brne	.+22     	; 0x358e <dtoa_prf+0x1e8>
    3578:	d6 01       	movw	r26, r12
    357a:	32 2f       	mov	r19, r18
    357c:	60 e2       	ldi	r22, 0x20	; 32
    357e:	33 23       	and	r19, r19
    3580:	19 f0       	breq	.+6      	; 0x3588 <dtoa_prf+0x1e2>
    3582:	6d 93       	st	X+, r22
    3584:	31 50       	subi	r19, 0x01	; 1
    3586:	fb cf       	rjmp	.-10     	; 0x357e <dtoa_prf+0x1d8>
    3588:	c2 0e       	add	r12, r18
    358a:	d1 1c       	adc	r13, r1
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	ff 23       	and	r31, r31
    3590:	31 f0       	breq	.+12     	; 0x359e <dtoa_prf+0x1f8>
    3592:	d6 01       	movw	r26, r12
    3594:	9c 93       	st	X, r25
    3596:	b6 01       	movw	r22, r12
    3598:	6f 5f       	subi	r22, 0xFF	; 255
    359a:	7f 4f       	sbci	r23, 0xFF	; 255
    359c:	6b 01       	movw	r12, r22
    359e:	e1 11       	cpse	r30, r1
    35a0:	0b c0       	rjmp	.+22     	; 0x35b8 <dtoa_prf+0x212>
    35a2:	f6 01       	movw	r30, r12
    35a4:	92 2f       	mov	r25, r18
    35a6:	30 e3       	ldi	r19, 0x30	; 48
    35a8:	99 23       	and	r25, r25
    35aa:	19 f0       	breq	.+6      	; 0x35b2 <dtoa_prf+0x20c>
    35ac:	31 93       	st	Z+, r19
    35ae:	91 50       	subi	r25, 0x01	; 1
    35b0:	fb cf       	rjmp	.-10     	; 0x35a8 <dtoa_prf+0x202>
    35b2:	c2 0e       	add	r12, r18
    35b4:	d1 1c       	adc	r13, r1
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	9f 2d       	mov	r25, r15
    35ba:	94 0f       	add	r25, r20
    35bc:	3a 81       	ldd	r19, Y+2	; 0x02
    35be:	78 2f       	mov	r23, r24
    35c0:	70 71       	andi	r23, 0x10	; 16
    35c2:	a7 2e       	mov	r10, r23
    35c4:	84 ff       	sbrs	r24, 4
    35c6:	03 c0       	rjmp	.+6      	; 0x35ce <dtoa_prf+0x228>
    35c8:	31 33       	cpi	r19, 0x31	; 49
    35ca:	09 f4       	brne	.+2      	; 0x35ce <dtoa_prf+0x228>
    35cc:	91 50       	subi	r25, 0x01	; 1
    35ce:	19 16       	cp	r1, r25
    35d0:	24 f4       	brge	.+8      	; 0x35da <dtoa_prf+0x234>
    35d2:	99 30       	cpi	r25, 0x09	; 9
    35d4:	18 f0       	brcs	.+6      	; 0x35dc <dtoa_prf+0x236>
    35d6:	98 e0       	ldi	r25, 0x08	; 8
    35d8:	01 c0       	rjmp	.+2      	; 0x35dc <dtoa_prf+0x236>
    35da:	91 e0       	ldi	r25, 0x01	; 1
    35dc:	e4 2f       	mov	r30, r20
    35de:	85 2f       	mov	r24, r21
    35e0:	57 ff       	sbrs	r21, 7
    35e2:	02 c0       	rjmp	.+4      	; 0x35e8 <dtoa_prf+0x242>
    35e4:	e0 e0       	ldi	r30, 0x00	; 0
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	6e 2f       	mov	r22, r30
    35ea:	78 2f       	mov	r23, r24
    35ec:	e0 e0       	ldi	r30, 0x00	; 0
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	ae e2       	ldi	r26, 0x2E	; 46
    35f2:	9a 2e       	mov	r9, r26
    35f4:	3a 01       	movw	r6, r20
    35f6:	69 1a       	sub	r6, r25
    35f8:	71 08       	sbc	r7, r1
    35fa:	2a 01       	movw	r4, r20
    35fc:	46 1a       	sub	r4, r22
    35fe:	57 0a       	sbc	r5, r23
    3600:	0b 2d       	mov	r16, r11
    3602:	10 e0       	ldi	r17, 0x00	; 0
    3604:	11 95       	neg	r17
    3606:	01 95       	neg	r16
    3608:	11 09       	sbc	r17, r1
    360a:	6f 3f       	cpi	r22, 0xFF	; 255
    360c:	8f ef       	ldi	r24, 0xFF	; 255
    360e:	78 07       	cpc	r23, r24
    3610:	29 f4       	brne	.+10     	; 0x361c <dtoa_prf+0x276>
    3612:	d6 01       	movw	r26, r12
    3614:	9c 92       	st	X, r9
    3616:	c6 01       	movw	r24, r12
    3618:	01 96       	adiw	r24, 0x01	; 1
    361a:	6c 01       	movw	r12, r24
    361c:	46 17       	cp	r20, r22
    361e:	57 07       	cpc	r21, r23
    3620:	84 f0       	brlt	.+32     	; 0x3642 <dtoa_prf+0x29c>
    3622:	66 16       	cp	r6, r22
    3624:	77 06       	cpc	r7, r23
    3626:	6c f4       	brge	.+26     	; 0x3642 <dtoa_prf+0x29c>
    3628:	7f 01       	movw	r14, r30
    362a:	e4 0c       	add	r14, r4
    362c:	f5 1c       	adc	r15, r5
    362e:	a1 e0       	ldi	r26, 0x01	; 1
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	ac 0f       	add	r26, r28
    3634:	bd 1f       	adc	r27, r29
    3636:	ea 0e       	add	r14, r26
    3638:	fb 1e       	adc	r15, r27
    363a:	d7 01       	movw	r26, r14
    363c:	11 96       	adiw	r26, 0x01	; 1
    363e:	bc 90       	ld	r11, X
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <dtoa_prf+0x2a0>
    3642:	90 e3       	ldi	r25, 0x30	; 48
    3644:	b9 2e       	mov	r11, r25
    3646:	61 50       	subi	r22, 0x01	; 1
    3648:	71 09       	sbc	r23, r1
    364a:	31 96       	adiw	r30, 0x01	; 1
    364c:	c6 01       	movw	r24, r12
    364e:	01 96       	adiw	r24, 0x01	; 1
    3650:	7c 01       	movw	r14, r24
    3652:	60 17       	cp	r22, r16
    3654:	71 07       	cpc	r23, r17
    3656:	24 f0       	brlt	.+8      	; 0x3660 <dtoa_prf+0x2ba>
    3658:	d6 01       	movw	r26, r12
    365a:	bc 92       	st	X, r11
    365c:	6c 01       	movw	r12, r24
    365e:	d5 cf       	rjmp	.-86     	; 0x360a <dtoa_prf+0x264>
    3660:	64 17       	cp	r22, r20
    3662:	75 07       	cpc	r23, r21
    3664:	41 f4       	brne	.+16     	; 0x3676 <dtoa_prf+0x2d0>
    3666:	36 33       	cpi	r19, 0x36	; 54
    3668:	20 f4       	brcc	.+8      	; 0x3672 <dtoa_prf+0x2cc>
    366a:	35 33       	cpi	r19, 0x35	; 53
    366c:	21 f4       	brne	.+8      	; 0x3676 <dtoa_prf+0x2d0>
    366e:	a1 10       	cpse	r10, r1
    3670:	02 c0       	rjmp	.+4      	; 0x3676 <dtoa_prf+0x2d0>
    3672:	81 e3       	ldi	r24, 0x31	; 49
    3674:	b8 2e       	mov	r11, r24
    3676:	f6 01       	movw	r30, r12
    3678:	b0 82       	st	Z, r11
    367a:	f7 01       	movw	r30, r14
    367c:	82 2f       	mov	r24, r18
    367e:	90 e2       	ldi	r25, 0x20	; 32
    3680:	88 23       	and	r24, r24
    3682:	19 f0       	breq	.+6      	; 0x368a <dtoa_prf+0x2e4>
    3684:	91 93       	st	Z+, r25
    3686:	81 50       	subi	r24, 0x01	; 1
    3688:	fb cf       	rjmp	.-10     	; 0x3680 <dtoa_prf+0x2da>
    368a:	f7 01       	movw	r30, r14
    368c:	e2 0f       	add	r30, r18
    368e:	f1 1d       	adc	r31, r1
    3690:	10 82       	st	Z, r1
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	29 96       	adiw	r28, 0x09	; 9
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	df 91       	pop	r29
    36a4:	cf 91       	pop	r28
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	ff 90       	pop	r15
    36ac:	ef 90       	pop	r14
    36ae:	df 90       	pop	r13
    36b0:	cf 90       	pop	r12
    36b2:	bf 90       	pop	r11
    36b4:	af 90       	pop	r10
    36b6:	9f 90       	pop	r9
    36b8:	7f 90       	pop	r7
    36ba:	6f 90       	pop	r6
    36bc:	5f 90       	pop	r5
    36be:	4f 90       	pop	r4
    36c0:	08 95       	ret

000036c2 <__ftoa_engine>:
    36c2:	28 30       	cpi	r18, 0x08	; 8
    36c4:	08 f0       	brcs	.+2      	; 0x36c8 <__ftoa_engine+0x6>
    36c6:	27 e0       	ldi	r18, 0x07	; 7
    36c8:	33 27       	eor	r19, r19
    36ca:	da 01       	movw	r26, r20
    36cc:	99 0f       	add	r25, r25
    36ce:	31 1d       	adc	r19, r1
    36d0:	87 fd       	sbrc	r24, 7
    36d2:	91 60       	ori	r25, 0x01	; 1
    36d4:	00 96       	adiw	r24, 0x00	; 0
    36d6:	61 05       	cpc	r22, r1
    36d8:	71 05       	cpc	r23, r1
    36da:	39 f4       	brne	.+14     	; 0x36ea <__ftoa_engine+0x28>
    36dc:	32 60       	ori	r19, 0x02	; 2
    36de:	2e 5f       	subi	r18, 0xFE	; 254
    36e0:	3d 93       	st	X+, r19
    36e2:	30 e3       	ldi	r19, 0x30	; 48
    36e4:	2a 95       	dec	r18
    36e6:	e1 f7       	brne	.-8      	; 0x36e0 <__ftoa_engine+0x1e>
    36e8:	08 95       	ret
    36ea:	9f 3f       	cpi	r25, 0xFF	; 255
    36ec:	30 f0       	brcs	.+12     	; 0x36fa <__ftoa_engine+0x38>
    36ee:	80 38       	cpi	r24, 0x80	; 128
    36f0:	71 05       	cpc	r23, r1
    36f2:	61 05       	cpc	r22, r1
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <__ftoa_engine+0x36>
    36f6:	3c 5f       	subi	r19, 0xFC	; 252
    36f8:	3c 5f       	subi	r19, 0xFC	; 252
    36fa:	3d 93       	st	X+, r19
    36fc:	91 30       	cpi	r25, 0x01	; 1
    36fe:	08 f0       	brcs	.+2      	; 0x3702 <__ftoa_engine+0x40>
    3700:	80 68       	ori	r24, 0x80	; 128
    3702:	91 1d       	adc	r25, r1
    3704:	df 93       	push	r29
    3706:	cf 93       	push	r28
    3708:	1f 93       	push	r17
    370a:	0f 93       	push	r16
    370c:	ff 92       	push	r15
    370e:	ef 92       	push	r14
    3710:	19 2f       	mov	r17, r25
    3712:	98 7f       	andi	r25, 0xF8	; 248
    3714:	96 95       	lsr	r25
    3716:	e9 2f       	mov	r30, r25
    3718:	96 95       	lsr	r25
    371a:	96 95       	lsr	r25
    371c:	e9 0f       	add	r30, r25
    371e:	ff 27       	eor	r31, r31
    3720:	e4 5e       	subi	r30, 0xE4	; 228
    3722:	fe 4f       	sbci	r31, 0xFE	; 254
    3724:	99 27       	eor	r25, r25
    3726:	33 27       	eor	r19, r19
    3728:	ee 24       	eor	r14, r14
    372a:	ff 24       	eor	r15, r15
    372c:	a7 01       	movw	r20, r14
    372e:	e7 01       	movw	r28, r14
    3730:	05 90       	lpm	r0, Z+
    3732:	08 94       	sec
    3734:	07 94       	ror	r0
    3736:	28 f4       	brcc	.+10     	; 0x3742 <__ftoa_engine+0x80>
    3738:	36 0f       	add	r19, r22
    373a:	e7 1e       	adc	r14, r23
    373c:	f8 1e       	adc	r15, r24
    373e:	49 1f       	adc	r20, r25
    3740:	51 1d       	adc	r21, r1
    3742:	66 0f       	add	r22, r22
    3744:	77 1f       	adc	r23, r23
    3746:	88 1f       	adc	r24, r24
    3748:	99 1f       	adc	r25, r25
    374a:	06 94       	lsr	r0
    374c:	a1 f7       	brne	.-24     	; 0x3736 <__ftoa_engine+0x74>
    374e:	05 90       	lpm	r0, Z+
    3750:	07 94       	ror	r0
    3752:	28 f4       	brcc	.+10     	; 0x375e <__ftoa_engine+0x9c>
    3754:	e7 0e       	add	r14, r23
    3756:	f8 1e       	adc	r15, r24
    3758:	49 1f       	adc	r20, r25
    375a:	56 1f       	adc	r21, r22
    375c:	c1 1d       	adc	r28, r1
    375e:	77 0f       	add	r23, r23
    3760:	88 1f       	adc	r24, r24
    3762:	99 1f       	adc	r25, r25
    3764:	66 1f       	adc	r22, r22
    3766:	06 94       	lsr	r0
    3768:	a1 f7       	brne	.-24     	; 0x3752 <__ftoa_engine+0x90>
    376a:	05 90       	lpm	r0, Z+
    376c:	07 94       	ror	r0
    376e:	28 f4       	brcc	.+10     	; 0x377a <__ftoa_engine+0xb8>
    3770:	f8 0e       	add	r15, r24
    3772:	49 1f       	adc	r20, r25
    3774:	56 1f       	adc	r21, r22
    3776:	c7 1f       	adc	r28, r23
    3778:	d1 1d       	adc	r29, r1
    377a:	88 0f       	add	r24, r24
    377c:	99 1f       	adc	r25, r25
    377e:	66 1f       	adc	r22, r22
    3780:	77 1f       	adc	r23, r23
    3782:	06 94       	lsr	r0
    3784:	a1 f7       	brne	.-24     	; 0x376e <__ftoa_engine+0xac>
    3786:	05 90       	lpm	r0, Z+
    3788:	07 94       	ror	r0
    378a:	20 f4       	brcc	.+8      	; 0x3794 <__ftoa_engine+0xd2>
    378c:	49 0f       	add	r20, r25
    378e:	56 1f       	adc	r21, r22
    3790:	c7 1f       	adc	r28, r23
    3792:	d8 1f       	adc	r29, r24
    3794:	99 0f       	add	r25, r25
    3796:	66 1f       	adc	r22, r22
    3798:	77 1f       	adc	r23, r23
    379a:	88 1f       	adc	r24, r24
    379c:	06 94       	lsr	r0
    379e:	a9 f7       	brne	.-22     	; 0x378a <__ftoa_engine+0xc8>
    37a0:	84 91       	lpm	r24, Z
    37a2:	10 95       	com	r17
    37a4:	17 70       	andi	r17, 0x07	; 7
    37a6:	41 f0       	breq	.+16     	; 0x37b8 <__ftoa_engine+0xf6>
    37a8:	d6 95       	lsr	r29
    37aa:	c7 95       	ror	r28
    37ac:	57 95       	ror	r21
    37ae:	47 95       	ror	r20
    37b0:	f7 94       	ror	r15
    37b2:	e7 94       	ror	r14
    37b4:	1a 95       	dec	r17
    37b6:	c1 f7       	brne	.-16     	; 0x37a8 <__ftoa_engine+0xe6>
    37b8:	e2 ec       	ldi	r30, 0xC2	; 194
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	68 94       	set
    37be:	15 90       	lpm	r1, Z+
    37c0:	15 91       	lpm	r17, Z+
    37c2:	35 91       	lpm	r19, Z+
    37c4:	65 91       	lpm	r22, Z+
    37c6:	95 91       	lpm	r25, Z+
    37c8:	05 90       	lpm	r0, Z+
    37ca:	7f e2       	ldi	r23, 0x2F	; 47
    37cc:	73 95       	inc	r23
    37ce:	e1 18       	sub	r14, r1
    37d0:	f1 0a       	sbc	r15, r17
    37d2:	43 0b       	sbc	r20, r19
    37d4:	56 0b       	sbc	r21, r22
    37d6:	c9 0b       	sbc	r28, r25
    37d8:	d0 09       	sbc	r29, r0
    37da:	c0 f7       	brcc	.-16     	; 0x37cc <__ftoa_engine+0x10a>
    37dc:	e1 0c       	add	r14, r1
    37de:	f1 1e       	adc	r15, r17
    37e0:	43 1f       	adc	r20, r19
    37e2:	56 1f       	adc	r21, r22
    37e4:	c9 1f       	adc	r28, r25
    37e6:	d0 1d       	adc	r29, r0
    37e8:	7e f4       	brtc	.+30     	; 0x3808 <__ftoa_engine+0x146>
    37ea:	70 33       	cpi	r23, 0x30	; 48
    37ec:	11 f4       	brne	.+4      	; 0x37f2 <__ftoa_engine+0x130>
    37ee:	8a 95       	dec	r24
    37f0:	e6 cf       	rjmp	.-52     	; 0x37be <__ftoa_engine+0xfc>
    37f2:	e8 94       	clt
    37f4:	01 50       	subi	r16, 0x01	; 1
    37f6:	30 f0       	brcs	.+12     	; 0x3804 <__ftoa_engine+0x142>
    37f8:	08 0f       	add	r16, r24
    37fa:	0a f4       	brpl	.+2      	; 0x37fe <__ftoa_engine+0x13c>
    37fc:	00 27       	eor	r16, r16
    37fe:	02 17       	cp	r16, r18
    3800:	08 f4       	brcc	.+2      	; 0x3804 <__ftoa_engine+0x142>
    3802:	20 2f       	mov	r18, r16
    3804:	23 95       	inc	r18
    3806:	02 2f       	mov	r16, r18
    3808:	7a 33       	cpi	r23, 0x3A	; 58
    380a:	28 f0       	brcs	.+10     	; 0x3816 <__ftoa_engine+0x154>
    380c:	79 e3       	ldi	r23, 0x39	; 57
    380e:	7d 93       	st	X+, r23
    3810:	2a 95       	dec	r18
    3812:	e9 f7       	brne	.-6      	; 0x380e <__ftoa_engine+0x14c>
    3814:	10 c0       	rjmp	.+32     	; 0x3836 <__ftoa_engine+0x174>
    3816:	7d 93       	st	X+, r23
    3818:	2a 95       	dec	r18
    381a:	89 f6       	brne	.-94     	; 0x37be <__ftoa_engine+0xfc>
    381c:	06 94       	lsr	r0
    381e:	97 95       	ror	r25
    3820:	67 95       	ror	r22
    3822:	37 95       	ror	r19
    3824:	17 95       	ror	r17
    3826:	17 94       	ror	r1
    3828:	e1 18       	sub	r14, r1
    382a:	f1 0a       	sbc	r15, r17
    382c:	43 0b       	sbc	r20, r19
    382e:	56 0b       	sbc	r21, r22
    3830:	c9 0b       	sbc	r28, r25
    3832:	d0 09       	sbc	r29, r0
    3834:	98 f0       	brcs	.+38     	; 0x385c <__ftoa_engine+0x19a>
    3836:	23 95       	inc	r18
    3838:	7e 91       	ld	r23, -X
    383a:	73 95       	inc	r23
    383c:	7a 33       	cpi	r23, 0x3A	; 58
    383e:	08 f0       	brcs	.+2      	; 0x3842 <__ftoa_engine+0x180>
    3840:	70 e3       	ldi	r23, 0x30	; 48
    3842:	7c 93       	st	X, r23
    3844:	20 13       	cpse	r18, r16
    3846:	b8 f7       	brcc	.-18     	; 0x3836 <__ftoa_engine+0x174>
    3848:	7e 91       	ld	r23, -X
    384a:	70 61       	ori	r23, 0x10	; 16
    384c:	7d 93       	st	X+, r23
    384e:	30 f0       	brcs	.+12     	; 0x385c <__ftoa_engine+0x19a>
    3850:	83 95       	inc	r24
    3852:	71 e3       	ldi	r23, 0x31	; 49
    3854:	7d 93       	st	X+, r23
    3856:	70 e3       	ldi	r23, 0x30	; 48
    3858:	2a 95       	dec	r18
    385a:	e1 f7       	brne	.-8      	; 0x3854 <__ftoa_engine+0x192>
    385c:	11 24       	eor	r1, r1
    385e:	ef 90       	pop	r14
    3860:	ff 90       	pop	r15
    3862:	0f 91       	pop	r16
    3864:	1f 91       	pop	r17
    3866:	cf 91       	pop	r28
    3868:	df 91       	pop	r29
    386a:	99 27       	eor	r25, r25
    386c:	87 fd       	sbrc	r24, 7
    386e:	90 95       	com	r25
    3870:	08 95       	ret

00003872 <__ctype_isfalse>:
    3872:	99 27       	eor	r25, r25
    3874:	88 27       	eor	r24, r24

00003876 <__ctype_istrue>:
    3876:	08 95       	ret

00003878 <strnlen_P>:
    3878:	fc 01       	movw	r30, r24
    387a:	05 90       	lpm	r0, Z+
    387c:	61 50       	subi	r22, 0x01	; 1
    387e:	70 40       	sbci	r23, 0x00	; 0
    3880:	01 10       	cpse	r0, r1
    3882:	d8 f7       	brcc	.-10     	; 0x387a <strnlen_P+0x2>
    3884:	80 95       	com	r24
    3886:	90 95       	com	r25
    3888:	8e 0f       	add	r24, r30
    388a:	9f 1f       	adc	r25, r31
    388c:	08 95       	ret

0000388e <strnlen>:
    388e:	fc 01       	movw	r30, r24
    3890:	61 50       	subi	r22, 0x01	; 1
    3892:	70 40       	sbci	r23, 0x00	; 0
    3894:	01 90       	ld	r0, Z+
    3896:	01 10       	cpse	r0, r1
    3898:	d8 f7       	brcc	.-10     	; 0x3890 <strnlen+0x2>
    389a:	80 95       	com	r24
    389c:	90 95       	com	r25
    389e:	8e 0f       	add	r24, r30
    38a0:	9f 1f       	adc	r25, r31
    38a2:	08 95       	ret

000038a4 <fputc>:
    38a4:	0f 93       	push	r16
    38a6:	1f 93       	push	r17
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	fb 01       	movw	r30, r22
    38ae:	23 81       	ldd	r18, Z+3	; 0x03
    38b0:	21 fd       	sbrc	r18, 1
    38b2:	03 c0       	rjmp	.+6      	; 0x38ba <fputc+0x16>
    38b4:	8f ef       	ldi	r24, 0xFF	; 255
    38b6:	9f ef       	ldi	r25, 0xFF	; 255
    38b8:	28 c0       	rjmp	.+80     	; 0x390a <fputc+0x66>
    38ba:	22 ff       	sbrs	r18, 2
    38bc:	16 c0       	rjmp	.+44     	; 0x38ea <fputc+0x46>
    38be:	46 81       	ldd	r20, Z+6	; 0x06
    38c0:	57 81       	ldd	r21, Z+7	; 0x07
    38c2:	24 81       	ldd	r18, Z+4	; 0x04
    38c4:	35 81       	ldd	r19, Z+5	; 0x05
    38c6:	42 17       	cp	r20, r18
    38c8:	53 07       	cpc	r21, r19
    38ca:	44 f4       	brge	.+16     	; 0x38dc <fputc+0x38>
    38cc:	a0 81       	ld	r26, Z
    38ce:	b1 81       	ldd	r27, Z+1	; 0x01
    38d0:	9d 01       	movw	r18, r26
    38d2:	2f 5f       	subi	r18, 0xFF	; 255
    38d4:	3f 4f       	sbci	r19, 0xFF	; 255
    38d6:	31 83       	std	Z+1, r19	; 0x01
    38d8:	20 83       	st	Z, r18
    38da:	8c 93       	st	X, r24
    38dc:	26 81       	ldd	r18, Z+6	; 0x06
    38de:	37 81       	ldd	r19, Z+7	; 0x07
    38e0:	2f 5f       	subi	r18, 0xFF	; 255
    38e2:	3f 4f       	sbci	r19, 0xFF	; 255
    38e4:	37 83       	std	Z+7, r19	; 0x07
    38e6:	26 83       	std	Z+6, r18	; 0x06
    38e8:	10 c0       	rjmp	.+32     	; 0x390a <fputc+0x66>
    38ea:	eb 01       	movw	r28, r22
    38ec:	09 2f       	mov	r16, r25
    38ee:	18 2f       	mov	r17, r24
    38f0:	00 84       	ldd	r0, Z+8	; 0x08
    38f2:	f1 85       	ldd	r31, Z+9	; 0x09
    38f4:	e0 2d       	mov	r30, r0
    38f6:	09 95       	icall
    38f8:	89 2b       	or	r24, r25
    38fa:	e1 f6       	brne	.-72     	; 0x38b4 <fputc+0x10>
    38fc:	8e 81       	ldd	r24, Y+6	; 0x06
    38fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3900:	01 96       	adiw	r24, 0x01	; 1
    3902:	9f 83       	std	Y+7, r25	; 0x07
    3904:	8e 83       	std	Y+6, r24	; 0x06
    3906:	81 2f       	mov	r24, r17
    3908:	90 2f       	mov	r25, r16
    390a:	df 91       	pop	r29
    390c:	cf 91       	pop	r28
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	08 95       	ret

00003914 <__ultoa_invert>:
    3914:	fa 01       	movw	r30, r20
    3916:	aa 27       	eor	r26, r26
    3918:	28 30       	cpi	r18, 0x08	; 8
    391a:	51 f1       	breq	.+84     	; 0x3970 <__ultoa_invert+0x5c>
    391c:	20 31       	cpi	r18, 0x10	; 16
    391e:	81 f1       	breq	.+96     	; 0x3980 <__ultoa_invert+0x6c>
    3920:	e8 94       	clt
    3922:	6f 93       	push	r22
    3924:	6e 7f       	andi	r22, 0xFE	; 254
    3926:	6e 5f       	subi	r22, 0xFE	; 254
    3928:	7f 4f       	sbci	r23, 0xFF	; 255
    392a:	8f 4f       	sbci	r24, 0xFF	; 255
    392c:	9f 4f       	sbci	r25, 0xFF	; 255
    392e:	af 4f       	sbci	r26, 0xFF	; 255
    3930:	b1 e0       	ldi	r27, 0x01	; 1
    3932:	3e d0       	rcall	.+124    	; 0x39b0 <__ultoa_invert+0x9c>
    3934:	b4 e0       	ldi	r27, 0x04	; 4
    3936:	3c d0       	rcall	.+120    	; 0x39b0 <__ultoa_invert+0x9c>
    3938:	67 0f       	add	r22, r23
    393a:	78 1f       	adc	r23, r24
    393c:	89 1f       	adc	r24, r25
    393e:	9a 1f       	adc	r25, r26
    3940:	a1 1d       	adc	r26, r1
    3942:	68 0f       	add	r22, r24
    3944:	79 1f       	adc	r23, r25
    3946:	8a 1f       	adc	r24, r26
    3948:	91 1d       	adc	r25, r1
    394a:	a1 1d       	adc	r26, r1
    394c:	6a 0f       	add	r22, r26
    394e:	71 1d       	adc	r23, r1
    3950:	81 1d       	adc	r24, r1
    3952:	91 1d       	adc	r25, r1
    3954:	a1 1d       	adc	r26, r1
    3956:	20 d0       	rcall	.+64     	; 0x3998 <__ultoa_invert+0x84>
    3958:	09 f4       	brne	.+2      	; 0x395c <__ultoa_invert+0x48>
    395a:	68 94       	set
    395c:	3f 91       	pop	r19
    395e:	2a e0       	ldi	r18, 0x0A	; 10
    3960:	26 9f       	mul	r18, r22
    3962:	11 24       	eor	r1, r1
    3964:	30 19       	sub	r19, r0
    3966:	30 5d       	subi	r19, 0xD0	; 208
    3968:	31 93       	st	Z+, r19
    396a:	de f6       	brtc	.-74     	; 0x3922 <__ultoa_invert+0xe>
    396c:	cf 01       	movw	r24, r30
    396e:	08 95       	ret
    3970:	46 2f       	mov	r20, r22
    3972:	47 70       	andi	r20, 0x07	; 7
    3974:	40 5d       	subi	r20, 0xD0	; 208
    3976:	41 93       	st	Z+, r20
    3978:	b3 e0       	ldi	r27, 0x03	; 3
    397a:	0f d0       	rcall	.+30     	; 0x399a <__ultoa_invert+0x86>
    397c:	c9 f7       	brne	.-14     	; 0x3970 <__ultoa_invert+0x5c>
    397e:	f6 cf       	rjmp	.-20     	; 0x396c <__ultoa_invert+0x58>
    3980:	46 2f       	mov	r20, r22
    3982:	4f 70       	andi	r20, 0x0F	; 15
    3984:	40 5d       	subi	r20, 0xD0	; 208
    3986:	4a 33       	cpi	r20, 0x3A	; 58
    3988:	18 f0       	brcs	.+6      	; 0x3990 <__ultoa_invert+0x7c>
    398a:	49 5d       	subi	r20, 0xD9	; 217
    398c:	31 fd       	sbrc	r19, 1
    398e:	40 52       	subi	r20, 0x20	; 32
    3990:	41 93       	st	Z+, r20
    3992:	02 d0       	rcall	.+4      	; 0x3998 <__ultoa_invert+0x84>
    3994:	a9 f7       	brne	.-22     	; 0x3980 <__ultoa_invert+0x6c>
    3996:	ea cf       	rjmp	.-44     	; 0x396c <__ultoa_invert+0x58>
    3998:	b4 e0       	ldi	r27, 0x04	; 4
    399a:	a6 95       	lsr	r26
    399c:	97 95       	ror	r25
    399e:	87 95       	ror	r24
    39a0:	77 95       	ror	r23
    39a2:	67 95       	ror	r22
    39a4:	ba 95       	dec	r27
    39a6:	c9 f7       	brne	.-14     	; 0x399a <__ultoa_invert+0x86>
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	61 05       	cpc	r22, r1
    39ac:	71 05       	cpc	r23, r1
    39ae:	08 95       	ret
    39b0:	9b 01       	movw	r18, r22
    39b2:	ac 01       	movw	r20, r24
    39b4:	0a 2e       	mov	r0, r26
    39b6:	06 94       	lsr	r0
    39b8:	57 95       	ror	r21
    39ba:	47 95       	ror	r20
    39bc:	37 95       	ror	r19
    39be:	27 95       	ror	r18
    39c0:	ba 95       	dec	r27
    39c2:	c9 f7       	brne	.-14     	; 0x39b6 <__ultoa_invert+0xa2>
    39c4:	62 0f       	add	r22, r18
    39c6:	73 1f       	adc	r23, r19
    39c8:	84 1f       	adc	r24, r20
    39ca:	95 1f       	adc	r25, r21
    39cc:	a0 1d       	adc	r26, r0
    39ce:	08 95       	ret

000039d0 <__mulsi3>:
    39d0:	db 01       	movw	r26, r22
    39d2:	8f 93       	push	r24
    39d4:	9f 93       	push	r25
    39d6:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__muluhisi3>
    39da:	bf 91       	pop	r27
    39dc:	af 91       	pop	r26
    39de:	a2 9f       	mul	r26, r18
    39e0:	80 0d       	add	r24, r0
    39e2:	91 1d       	adc	r25, r1
    39e4:	a3 9f       	mul	r26, r19
    39e6:	90 0d       	add	r25, r0
    39e8:	b2 9f       	mul	r27, r18
    39ea:	90 0d       	add	r25, r0
    39ec:	11 24       	eor	r1, r1
    39ee:	08 95       	ret

000039f0 <__muluhisi3>:
    39f0:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__umulhisi3>
    39f4:	a5 9f       	mul	r26, r21
    39f6:	90 0d       	add	r25, r0
    39f8:	b4 9f       	mul	r27, r20
    39fa:	90 0d       	add	r25, r0
    39fc:	a4 9f       	mul	r26, r20
    39fe:	80 0d       	add	r24, r0
    3a00:	91 1d       	adc	r25, r1
    3a02:	11 24       	eor	r1, r1
    3a04:	08 95       	ret

00003a06 <__prologue_saves__>:
    3a06:	2f 92       	push	r2
    3a08:	3f 92       	push	r3
    3a0a:	4f 92       	push	r4
    3a0c:	5f 92       	push	r5
    3a0e:	6f 92       	push	r6
    3a10:	7f 92       	push	r7
    3a12:	8f 92       	push	r8
    3a14:	9f 92       	push	r9
    3a16:	af 92       	push	r10
    3a18:	bf 92       	push	r11
    3a1a:	cf 92       	push	r12
    3a1c:	df 92       	push	r13
    3a1e:	ef 92       	push	r14
    3a20:	ff 92       	push	r15
    3a22:	0f 93       	push	r16
    3a24:	1f 93       	push	r17
    3a26:	cf 93       	push	r28
    3a28:	df 93       	push	r29
    3a2a:	cd b7       	in	r28, 0x3d	; 61
    3a2c:	de b7       	in	r29, 0x3e	; 62
    3a2e:	ca 1b       	sub	r28, r26
    3a30:	db 0b       	sbc	r29, r27
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	f8 94       	cli
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	cd bf       	out	0x3d, r28	; 61
    3a3c:	09 94       	ijmp

00003a3e <__epilogue_restores__>:
    3a3e:	2a 88       	ldd	r2, Y+18	; 0x12
    3a40:	39 88       	ldd	r3, Y+17	; 0x11
    3a42:	48 88       	ldd	r4, Y+16	; 0x10
    3a44:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a46:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a48:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a50:	b9 84       	ldd	r11, Y+9	; 0x09
    3a52:	c8 84       	ldd	r12, Y+8	; 0x08
    3a54:	df 80       	ldd	r13, Y+7	; 0x07
    3a56:	ee 80       	ldd	r14, Y+6	; 0x06
    3a58:	fd 80       	ldd	r15, Y+5	; 0x05
    3a5a:	0c 81       	ldd	r16, Y+4	; 0x04
    3a5c:	1b 81       	ldd	r17, Y+3	; 0x03
    3a5e:	aa 81       	ldd	r26, Y+2	; 0x02
    3a60:	b9 81       	ldd	r27, Y+1	; 0x01
    3a62:	ce 0f       	add	r28, r30
    3a64:	d1 1d       	adc	r29, r1
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
    3a70:	ed 01       	movw	r28, r26
    3a72:	08 95       	ret

00003a74 <__umulhisi3>:
    3a74:	a2 9f       	mul	r26, r18
    3a76:	b0 01       	movw	r22, r0
    3a78:	b3 9f       	mul	r27, r19
    3a7a:	c0 01       	movw	r24, r0
    3a7c:	a3 9f       	mul	r26, r19
    3a7e:	70 0d       	add	r23, r0
    3a80:	81 1d       	adc	r24, r1
    3a82:	11 24       	eor	r1, r1
    3a84:	91 1d       	adc	r25, r1
    3a86:	b2 9f       	mul	r27, r18
    3a88:	70 0d       	add	r23, r0
    3a8a:	81 1d       	adc	r24, r1
    3a8c:	11 24       	eor	r1, r1
    3a8e:	91 1d       	adc	r25, r1
    3a90:	08 95       	ret

00003a92 <__do_global_dtors>:
    3a92:	10 e0       	ldi	r17, 0x00	; 0
    3a94:	c1 ee       	ldi	r28, 0xE1	; 225
    3a96:	d0 e0       	ldi	r29, 0x00	; 0
    3a98:	04 c0       	rjmp	.+8      	; 0x3aa2 <__do_global_dtors+0x10>
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	0e 94 05 13 	call	0x260a	; 0x260a <__tablejump2__>
    3aa0:	21 96       	adiw	r28, 0x01	; 1
    3aa2:	c2 3e       	cpi	r28, 0xE2	; 226
    3aa4:	d1 07       	cpc	r29, r17
    3aa6:	c9 f7       	brne	.-14     	; 0x3a9a <__do_global_dtors+0x8>
    3aa8:	f8 94       	cli

00003aaa <__stop_program>:
    3aaa:	ff cf       	rjmp	.-2      	; 0x3aaa <__stop_program>
