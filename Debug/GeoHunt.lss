
GeoHunt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  00001276  0000130a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018b  0080018e  0080018e  00001398  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008c29  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000159c  00000000  00000000  0000a345  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fbe  00000000  00000000  0000b8e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000920  00000000  00000000  0000c8a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e3e  00000000  00000000  0000d1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d22  00000000  00000000  0000effe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00012d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_3>
      10:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_3>
      14:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_18>
      4c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	8e 00       	.word	0x008e	; ????
      c4:	ee 02       	muls	r30, r30

000000c6 <__ctors_end>:
      c6:	96 00       	.word	0x0096	; ????

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e6 e7       	ldi	r30, 0x76	; 118
      dc:	f2 e1       	ldi	r31, 0x12	; 18
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ae 38       	cpi	r26, 0x8E	; 142
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	23 e0       	ldi	r18, 0x03	; 3
      ec:	ae e8       	ldi	r26, 0x8E	; 142
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a9 31       	cpi	r26, 0x19	; 25
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 aa 07 	call	0xf54	; 0xf54 <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 12 01 	call	0x224	; 0x224 <main>
     114:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_GLOBAL__sub_I_cstr>:
#define GPS_RX_BUFSIZ	128
char cstr[GPS_RX_BUFSIZ];

#if GPS_ON
#include "SoftwareSerial.h"
SoftwareSerial gps(GPS_RX, GPS_TX);
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	47 e0       	ldi	r20, 0x07	; 7
     120:	68 e0       	ldi	r22, 0x08	; 8
     122:	8e e8       	ldi	r24, 0x8E	; 142
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN14SoftwareSerialC1Ehhb>
     12a:	08 95       	ret

0000012c <_GLOBAL__sub_D_cstr>:
     12c:	8e e8       	ldi	r24, 0x8E	; 142
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZN14SoftwareSerialD1Ev>
     134:	08 95       	ret

00000136 <_Z13getGPSMessagev>:
Return:
	none
	
*/
void getGPSMessage(void)
{
     136:	9f 92       	push	r9
     138:	af 92       	push	r10
     13a:	bf 92       	push	r11
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
	uint8_t x=0, y=0, isum=0;

	memset(cstr, 0, sizeof(cstr));
     14a:	80 e8       	ldi	r24, 0x80	; 128
     14c:	ed ea       	ldi	r30, 0xAD	; 173
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	df 01       	movw	r26, r30
     152:	1d 92       	st	X+, r1
     154:	8a 95       	dec	r24
     156:	e9 f7       	brne	.-6      	; 0x152 <_Z13getGPSMessagev+0x1c>
				x = 0;
				cstr[x] = '$';
			}
			
			// if complete message
			if ((cstr[0] == '$') && (cstr[x++] == '\n'))
     158:	8f 01       	movw	r16, r30
			
			// if multiple inline messages, then restart
			if ((x != 0) && (cstr[x] == '$'))
			{
				x = 0;
				cstr[x] = '$';
     15a:	0f 2e       	mov	r0, r31
     15c:	f4 e2       	ldi	r31, 0x24	; 36
     15e:	ff 2e       	mov	r15, r31
     160:	f0 2d       	mov	r31, r0
			}
			
			// if complete message
			if ((cstr[0] == '$') && (cstr[x++] == '\n'))
     162:	99 24       	eor	r9, r9
     164:	93 94       	inc	r9
     166:	e1 2c       	mov	r14, r1
     168:	d9 2c       	mov	r13, r9
								
				// convert hex checksum to binary
				isum = strtol(&cstr[x-4], NULL, 16);
				
				// reverse checksum
				for (y=1; y < (x-5); y++) isum ^= cstr[y];
     16a:	aa 24       	eor	r10, r10
     16c:	a3 94       	inc	r10
     16e:	b1 2c       	mov	r11, r1
				x = 0;
				cstr[x] = '$';
			}
			
			// if complete message
			if ((cstr[0] == '$') && (cstr[x++] == '\n'))
     170:	ce 2d       	mov	r28, r14
     172:	01 c0       	rjmp	.+2      	; 0x176 <_Z13getGPSMessagev+0x40>
     174:	c8 2f       	mov	r28, r24
	memset(cstr, 0, sizeof(cstr));
		
	// get nmea string
	while (true)
	{
		if (gps.peek() != -1)
     176:	8e e8       	ldi	r24, 0x8E	; 142
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN14SoftwareSerial4peekEv>
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	d1 f3       	breq	.-12     	; 0x176 <_Z13getGPSMessagev+0x40>
		{
			cstr[x] = gps.read();
     182:	8e e8       	ldi	r24, 0x8E	; 142
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	0e 94 01 04 	call	0x802	; 0x802 <_ZN14SoftwareSerial4readEv>
     18a:	ec 2f       	mov	r30, r28
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	e3 55       	subi	r30, 0x53	; 83
     190:	fe 4f       	sbci	r31, 0xFE	; 254
     192:	80 83       	st	Z, r24
			
			// if multiple inline messages, then restart
			if ((x != 0) && (cstr[x] == '$'))
     194:	cc 23       	and	r28, r28
     196:	31 f0       	breq	.+12     	; 0x1a4 <_Z13getGPSMessagev+0x6e>
     198:	84 32       	cpi	r24, 0x24	; 36
     19a:	21 f4       	brne	.+8      	; 0x1a4 <_Z13getGPSMessagev+0x6e>
			{
				x = 0;
				cstr[x] = '$';
     19c:	f8 01       	movw	r30, r16
     19e:	f0 82       	st	Z, r15
			}
			
			// if complete message
			if ((cstr[0] == '$') && (cstr[x++] == '\n'))
     1a0:	cd 2d       	mov	r28, r13
     1a2:	e9 cf       	rjmp	.-46     	; 0x176 <_Z13getGPSMessagev+0x40>
     1a4:	d8 01       	movw	r26, r16
     1a6:	8c 91       	ld	r24, X
     1a8:	84 32       	cpi	r24, 0x24	; 36
     1aa:	29 f7       	brne	.-54     	; 0x176 <_Z13getGPSMessagev+0x40>
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	8c 0f       	add	r24, r28
     1b0:	ec 2f       	mov	r30, r28
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	e3 55       	subi	r30, 0x53	; 83
     1b6:	fe 4f       	sbci	r31, 0xFE	; 254
     1b8:	90 81       	ld	r25, Z
     1ba:	9a 30       	cpi	r25, 0x0A	; 10
     1bc:	d9 f6       	brne	.-74     	; 0x174 <_Z13getGPSMessagev+0x3e>
			{
				// nul terminate string before /r/n
				cstr[x-2] = 0;
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	fc 01       	movw	r30, r24
     1c2:	e5 55       	subi	r30, 0x55	; 85
     1c4:	fe 4f       	sbci	r31, 0xFE	; 254
     1c6:	10 82       	st	Z, r1

				// if checksum not found
				if (cstr[x-5] != '*') 
     1c8:	ec 01       	movw	r28, r24
     1ca:	25 97       	sbiw	r28, 0x05	; 5
     1cc:	fe 01       	movw	r30, r28
     1ce:	e3 55       	subi	r30, 0x53	; 83
     1d0:	fe 4f       	sbci	r31, 0xFE	; 254
     1d2:	20 81       	ld	r18, Z
     1d4:	2a 32       	cpi	r18, 0x2A	; 42
     1d6:	61 f6       	brne	.-104    	; 0x170 <_Z13getGPSMessagev+0x3a>
					x = 0;
					continue;
				}
								
				// convert hex checksum to binary
				isum = strtol(&cstr[x-4], NULL, 16);
     1d8:	40 e1       	ldi	r20, 0x10	; 16
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	87 55       	subi	r24, 0x57	; 87
     1e2:	9e 4f       	sbci	r25, 0xFE	; 254
     1e4:	0e 94 b0 07 	call	0xf60	; 0xf60 <strtol>
				
				// reverse checksum
				for (y=1; y < (x-5); y++) isum ^= cstr[y];
     1e8:	c2 30       	cpi	r28, 0x02	; 2
     1ea:	d1 05       	cpc	r29, r1
     1ec:	74 f0       	brlt	.+28     	; 0x20a <_Z13getGPSMessagev+0xd4>
     1ee:	8a 2d       	mov	r24, r10
     1f0:	9b 2d       	mov	r25, r11
     1f2:	29 2d       	mov	r18, r9
     1f4:	fc 01       	movw	r30, r24
     1f6:	e3 55       	subi	r30, 0x53	; 83
     1f8:	fe 4f       	sbci	r31, 0xFE	; 254
     1fa:	80 81       	ld	r24, Z
     1fc:	68 27       	eor	r22, r24
     1fe:	2f 5f       	subi	r18, 0xFF	; 255
     200:	82 2f       	mov	r24, r18
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	8c 17       	cp	r24, r28
     206:	9d 07       	cpc	r25, r29
     208:	ac f3       	brlt	.-22     	; 0x1f4 <_Z13getGPSMessagev+0xbe>
				
				// if invalid checksum
				if (isum != 0) 
     20a:	61 11       	cpse	r22, r1
     20c:	b1 cf       	rjmp	.-158    	; 0x170 <_Z13getGPSMessagev+0x3a>
				// else valid message
				break;
			}
		}
	}
}
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	ff 90       	pop	r15
     218:	ef 90       	pop	r14
     21a:	df 90       	pop	r13
     21c:	bf 90       	pop	r11
     21e:	af 90       	pop	r10
     220:	9f 90       	pop	r9
     222:	08 95       	ret

00000224 <main>:
*/
int main(void)
{
	// variables
	
	init();
     224:	0e 94 c6 03 	call	0x78c	; 0x78c <init>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     228:	26 e0       	ldi	r18, 0x06	; 6
     22a:	40 e0       	ldi	r20, 0x00	; 0
     22c:	52 ec       	ldi	r21, 0xC2	; 194
     22e:	61 e0       	ldi	r22, 0x01	; 1
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	8d e2       	ldi	r24, 0x2D	; 45
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN14HardwareSerial5beginEmh>
	*/
	#endif
	
	// enable GPS sending GPRMC message
	#if GPS_ON
	gps.begin(9600);
     23a:	40 e8       	ldi	r20, 0x80	; 128
     23c:	55 e2       	ldi	r21, 0x25	; 37
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	8e e8       	ldi	r24, 0x8E	; 142
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	0e 94 38 06 	call	0xc70	; 0xc70 <_ZN14SoftwareSerial5beginEl>
	gps.println(PMTK_SET_NMEA_UPDATE_1HZ);
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	71 e0       	ldi	r23, 0x01	; 1
     24e:	8e e8       	ldi	r24, 0x8E	; 142
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN5Print7printlnEPKc>
	gps.println(PMTK_API_SET_FIX_CTL_1HZ);
     256:	61 e1       	ldi	r22, 0x11	; 17
     258:	71 e0       	ldi	r23, 0x01	; 1
     25a:	8e e8       	ldi	r24, 0x8E	; 142
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN5Print7printlnEPKc>
	gps.println(PMTK_SET_NMEA_OUTPUT_RMC);
     262:	6a e2       	ldi	r22, 0x2A	; 42
     264:	71 e0       	ldi	r23, 0x01	; 1
     266:	8e e8       	ldi	r24, 0x8E	; 142
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN5Print7printlnEPKc>
		Serial.println(cstr);	
		#endif		
		
		// if button pressed, set new target

		if (serialEventRun) serialEventRun();
     26e:	c4 e7       	ldi	r28, 0x74	; 116
     270:	d1 e0       	ldi	r29, 0x01	; 1
	#endif	
	
	while (true)
	{
		// returns with message once a second
		getGPSMessage();
     272:	0e 94 9b 00 	call	0x136	; 0x136 <_Z13getGPSMessagev>
		// print debug information to OneSheeld Terminal
		#endif

		#if TRM_ON
		// print debug information to Serial Terminal
		Serial.println(cstr);	
     276:	6d ea       	ldi	r22, 0xAD	; 173
     278:	71 e0       	ldi	r23, 0x01	; 1
     27a:	8d e2       	ldi	r24, 0x2D	; 45
     27c:	92 e0       	ldi	r25, 0x02	; 2
     27e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN5Print7printlnEPKc>
		#endif		
		
		// if button pressed, set new target

		if (serialEventRun) serialEventRun();
     282:	20 97       	sbiw	r28, 0x00	; 0
     284:	b1 f3       	breq	.-20     	; 0x272 <main+0x4e>
     286:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z14serialEventRunv>
     28a:	f3 cf       	rjmp	.-26     	; 0x272 <main+0x4e>

0000028c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     28c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     28e:	91 8d       	ldd	r25, Z+25	; 0x19
     290:	22 8d       	ldd	r18, Z+26	; 0x1a
     292:	89 2f       	mov	r24, r25
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	80 5c       	subi	r24, 0xC0	; 192
     298:	9f 4f       	sbci	r25, 0xFF	; 255
     29a:	82 1b       	sub	r24, r18
     29c:	91 09       	sbc	r25, r1
}
     29e:	8f 73       	andi	r24, 0x3F	; 63
     2a0:	99 27       	eor	r25, r25
     2a2:	08 95       	ret

000002a4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     2a4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     2a6:	91 8d       	ldd	r25, Z+25	; 0x19
     2a8:	82 8d       	ldd	r24, Z+26	; 0x1a
     2aa:	98 17       	cp	r25, r24
     2ac:	31 f0       	breq	.+12     	; 0x2ba <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     2ae:	82 8d       	ldd	r24, Z+26	; 0x1a
     2b0:	e8 0f       	add	r30, r24
     2b2:	f1 1d       	adc	r31, r1
     2b4:	85 8d       	ldd	r24, Z+29	; 0x1d
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     2be:	08 95       	ret

000002c0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     2c0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     2c2:	91 8d       	ldd	r25, Z+25	; 0x19
     2c4:	82 8d       	ldd	r24, Z+26	; 0x1a
     2c6:	98 17       	cp	r25, r24
     2c8:	61 f0       	breq	.+24     	; 0x2e2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     2ca:	82 8d       	ldd	r24, Z+26	; 0x1a
     2cc:	df 01       	movw	r26, r30
     2ce:	a8 0f       	add	r26, r24
     2d0:	b1 1d       	adc	r27, r1
     2d2:	5d 96       	adiw	r26, 0x1d	; 29
     2d4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     2d6:	92 8d       	ldd	r25, Z+26	; 0x1a
     2d8:	9f 5f       	subi	r25, 0xFF	; 255
     2da:	9f 73       	andi	r25, 0x3F	; 63
     2dc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     2e6:	08 95       	ret

000002e8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     2e8:	84 ee       	ldi	r24, 0xE4	; 228
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	89 2b       	or	r24, r25
     2ee:	49 f0       	breq	.+18     	; 0x302 <_Z14serialEventRunv+0x1a>
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	89 2b       	or	r24, r25
     2f6:	29 f0       	breq	.+10     	; 0x302 <_Z14serialEventRunv+0x1a>
     2f8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z17Serial0_availablev>
     2fc:	81 11       	cpse	r24, r1
     2fe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     302:	08 95       	ret

00000304 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     304:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     306:	84 8d       	ldd	r24, Z+28	; 0x1c
     308:	df 01       	movw	r26, r30
     30a:	a8 0f       	add	r26, r24
     30c:	b1 1d       	adc	r27, r1
     30e:	a3 5a       	subi	r26, 0xA3	; 163
     310:	bf 4f       	sbci	r27, 0xFF	; 255
     312:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     314:	24 8d       	ldd	r18, Z+28	; 0x1c
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	2f 5f       	subi	r18, 0xFF	; 255
     31a:	3f 4f       	sbci	r19, 0xFF	; 255
     31c:	2f 73       	andi	r18, 0x3F	; 63
     31e:	30 78       	andi	r19, 0x80	; 128
     320:	33 23       	and	r19, r19
     322:	34 f4       	brge	.+12     	; 0x330 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     324:	21 50       	subi	r18, 0x01	; 1
     326:	31 09       	sbc	r19, r1
     328:	20 6c       	ori	r18, 0xC0	; 192
     32a:	3f 6f       	ori	r19, 0xFF	; 255
     32c:	2f 5f       	subi	r18, 0xFF	; 255
     32e:	3f 4f       	sbci	r19, 0xFF	; 255
     330:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     332:	a6 89       	ldd	r26, Z+22	; 0x16
     334:	b7 89       	ldd	r27, Z+23	; 0x17
     336:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     338:	a0 89       	ldd	r26, Z+16	; 0x10
     33a:	b1 89       	ldd	r27, Z+17	; 0x11
     33c:	8c 91       	ld	r24, X
     33e:	80 64       	ori	r24, 0x40	; 64
     340:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     342:	93 8d       	ldd	r25, Z+27	; 0x1b
     344:	84 8d       	ldd	r24, Z+28	; 0x1c
     346:	98 13       	cpse	r25, r24
     348:	06 c0       	rjmp	.+12     	; 0x356 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     34a:	02 88       	ldd	r0, Z+18	; 0x12
     34c:	f3 89       	ldd	r31, Z+19	; 0x13
     34e:	e0 2d       	mov	r30, r0
     350:	80 81       	ld	r24, Z
     352:	8f 7d       	andi	r24, 0xDF	; 223
     354:	80 83       	st	Z, r24
     356:	08 95       	ret

00000358 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     35e:	88 8d       	ldd	r24, Y+24	; 0x18
     360:	81 11       	cpse	r24, r1
     362:	0f c0       	rjmp	.+30     	; 0x382 <_ZN14HardwareSerial5flushEv+0x2a>
     364:	18 c0       	rjmp	.+48     	; 0x396 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	07 fc       	sbrc	r0, 7
     36a:	0d c0       	rjmp	.+26     	; 0x386 <_ZN14HardwareSerial5flushEv+0x2e>
     36c:	90 81       	ld	r25, Z
     36e:	95 ff       	sbrs	r25, 5
     370:	0a c0       	rjmp	.+20     	; 0x386 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     372:	a8 89       	ldd	r26, Y+16	; 0x10
     374:	b9 89       	ldd	r27, Y+17	; 0x11
     376:	8c 91       	ld	r24, X
     378:	85 ff       	sbrs	r24, 5
     37a:	05 c0       	rjmp	.+10     	; 0x386 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
     37c:	ce 01       	movw	r24, r28
     37e:	0e 94 82 01 	call	0x304	; 0x304 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     382:	ea 89       	ldd	r30, Y+18	; 0x12
     384:	fb 89       	ldd	r31, Y+19	; 0x13
     386:	90 81       	ld	r25, Z
     388:	95 fd       	sbrc	r25, 5
     38a:	ed cf       	rjmp	.-38     	; 0x366 <_ZN14HardwareSerial5flushEv+0xe>
     38c:	a8 89       	ldd	r26, Y+16	; 0x10
     38e:	b9 89       	ldd	r27, Y+17	; 0x11
     390:	8c 91       	ld	r24, X
     392:	86 ff       	sbrs	r24, 6
     394:	e8 cf       	rjmp	.-48     	; 0x366 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	fc 01       	movw	r30, r24
  _written = true;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     3aa:	93 8d       	ldd	r25, Z+27	; 0x1b
     3ac:	84 8d       	ldd	r24, Z+28	; 0x1c
     3ae:	98 13       	cpse	r25, r24
     3b0:	22 c0       	rjmp	.+68     	; 0x3f6 <_ZN14HardwareSerial5writeEh+0x5a>
     3b2:	a0 89       	ldd	r26, Z+16	; 0x10
     3b4:	b1 89       	ldd	r27, Z+17	; 0x11
     3b6:	8c 91       	ld	r24, X
     3b8:	85 fd       	sbrc	r24, 5
     3ba:	2f c0       	rjmp	.+94     	; 0x41a <_ZN14HardwareSerial5writeEh+0x7e>
     3bc:	1c c0       	rjmp	.+56     	; 0x3f6 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	07 fc       	sbrc	r0, 7
     3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     3c4:	e8 89       	ldd	r30, Y+16	; 0x10
     3c6:	f9 89       	ldd	r31, Y+17	; 0x11
     3c8:	80 81       	ld	r24, Z
     3ca:	85 ff       	sbrs	r24, 5
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
     3ce:	ce 01       	movw	r24, r28
     3d0:	0e 94 82 01 	call	0x304	; 0x304 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     3d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3d6:	09 17       	cp	r16, r25
     3d8:	91 f3       	breq	.-28     	; 0x3be <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     3da:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3dc:	fe 01       	movw	r30, r28
     3de:	e8 0f       	add	r30, r24
     3e0:	f1 1d       	adc	r31, r1
     3e2:	e3 5a       	subi	r30, 0xA3	; 163
     3e4:	ff 4f       	sbci	r31, 0xFF	; 255
     3e6:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     3e8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     3ea:	ea 89       	ldd	r30, Y+18	; 0x12
     3ec:	fb 89       	ldd	r31, Y+19	; 0x13
     3ee:	80 81       	ld	r24, Z
     3f0:	80 62       	ori	r24, 0x20	; 32
     3f2:	80 83       	st	Z, r24
  
  return 1;
     3f4:	1b c0       	rjmp	.+54     	; 0x42c <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     3f6:	23 8d       	ldd	r18, Z+27	; 0x1b
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	2f 5f       	subi	r18, 0xFF	; 255
     3fc:	3f 4f       	sbci	r19, 0xFF	; 255
     3fe:	2f 73       	andi	r18, 0x3F	; 63
     400:	30 78       	andi	r19, 0x80	; 128
     402:	33 23       	and	r19, r19
     404:	34 f4       	brge	.+12     	; 0x412 <_ZN14HardwareSerial5writeEh+0x76>
     406:	21 50       	subi	r18, 0x01	; 1
     408:	31 09       	sbc	r19, r1
     40a:	20 6c       	ori	r18, 0xC0	; 192
     40c:	3f 6f       	ori	r19, 0xFF	; 255
     40e:	2f 5f       	subi	r18, 0xFF	; 255
     410:	3f 4f       	sbci	r19, 0xFF	; 255
     412:	16 2f       	mov	r17, r22
     414:	ef 01       	movw	r28, r30
     416:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     418:	dd cf       	rjmp	.-70     	; 0x3d4 <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     41a:	a6 89       	ldd	r26, Z+22	; 0x16
     41c:	b7 89       	ldd	r27, Z+23	; 0x17
     41e:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     420:	00 88       	ldd	r0, Z+16	; 0x10
     422:	f1 89       	ldd	r31, Z+17	; 0x11
     424:	e0 2d       	mov	r30, r0
     426:	80 81       	ld	r24, Z
     428:	80 64       	ori	r24, 0x40	; 64
     42a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     43a:	bf 92       	push	r11
     43c:	cf 92       	push	r12
     43e:	df 92       	push	r13
     440:	ef 92       	push	r14
     442:	ff 92       	push	r15
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	ec 01       	movw	r28, r24
     44e:	6a 01       	movw	r12, r20
     450:	7b 01       	movw	r14, r22
     452:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     454:	e8 89       	ldd	r30, Y+16	; 0x10
     456:	f9 89       	ldd	r31, Y+17	; 0x11
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     45c:	41 15       	cp	r20, r1
     45e:	51 4e       	sbci	r21, 0xE1	; 225
     460:	61 05       	cpc	r22, r1
     462:	71 05       	cpc	r23, r1
     464:	b1 f0       	breq	.+44     	; 0x492 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	79 e0       	ldi	r23, 0x09	; 9
     46a:	8d e3       	ldi	r24, 0x3D	; 61
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	a7 01       	movw	r20, r14
     470:	96 01       	movw	r18, r12
     472:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodsi4>
     476:	89 01       	movw	r16, r18
     478:	9a 01       	movw	r18, r20
     47a:	01 50       	subi	r16, 0x01	; 1
     47c:	11 09       	sbc	r17, r1
     47e:	21 09       	sbc	r18, r1
     480:	31 09       	sbc	r19, r1
     482:	36 95       	lsr	r19
     484:	27 95       	ror	r18
     486:	17 95       	ror	r17
     488:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     48a:	01 15       	cp	r16, r1
     48c:	80 e1       	ldi	r24, 0x10	; 16
     48e:	18 07       	cpc	r17, r24
     490:	a8 f0       	brcs	.+42     	; 0x4bc <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
     492:	e8 89       	ldd	r30, Y+16	; 0x10
     494:	f9 89       	ldd	r31, Y+17	; 0x11
     496:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     498:	60 e8       	ldi	r22, 0x80	; 128
     49a:	74 e8       	ldi	r23, 0x84	; 132
     49c:	8e e1       	ldi	r24, 0x1E	; 30
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	a7 01       	movw	r20, r14
     4a2:	96 01       	movw	r18, r12
     4a4:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodsi4>
     4a8:	da 01       	movw	r26, r20
     4aa:	c9 01       	movw	r24, r18
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	a1 09       	sbc	r26, r1
     4b0:	b1 09       	sbc	r27, r1
     4b2:	b6 95       	lsr	r27
     4b4:	a7 95       	ror	r26
     4b6:	97 95       	ror	r25
     4b8:	87 95       	ror	r24
     4ba:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     4bc:	ec 85       	ldd	r30, Y+12	; 0x0c
     4be:	fd 85       	ldd	r31, Y+13	; 0x0d
     4c0:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
     4c2:	ee 85       	ldd	r30, Y+14	; 0x0e
     4c4:	ff 85       	ldd	r31, Y+15	; 0x0f
     4c6:	00 83       	st	Z, r16

  _written = false;
     4c8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     4ca:	ec 89       	ldd	r30, Y+20	; 0x14
     4cc:	fd 89       	ldd	r31, Y+21	; 0x15
     4ce:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     4d0:	ea 89       	ldd	r30, Y+18	; 0x12
     4d2:	fb 89       	ldd	r31, Y+19	; 0x13
     4d4:	80 81       	ld	r24, Z
     4d6:	80 61       	ori	r24, 0x10	; 16
     4d8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     4da:	ea 89       	ldd	r30, Y+18	; 0x12
     4dc:	fb 89       	ldd	r31, Y+19	; 0x13
     4de:	80 81       	ld	r24, Z
     4e0:	88 60       	ori	r24, 0x08	; 8
     4e2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     4e4:	ea 89       	ldd	r30, Y+18	; 0x12
     4e6:	fb 89       	ldd	r31, Y+19	; 0x13
     4e8:	80 81       	ld	r24, Z
     4ea:	80 68       	ori	r24, 0x80	; 128
     4ec:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     4ee:	ea 89       	ldd	r30, Y+18	; 0x12
     4f0:	fb 89       	ldd	r31, Y+19	; 0x13
     4f2:	80 81       	ld	r24, Z
     4f4:	8f 7d       	andi	r24, 0xDF	; 223
     4f6:	80 83       	st	Z, r24
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	df 90       	pop	r13
     506:	cf 90       	pop	r12
     508:	bf 90       	pop	r11
     50a:	08 95       	ret

0000050c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	2f 93       	push	r18
     518:	8f 93       	push	r24
     51a:	9f 93       	push	r25
     51c:	af 93       	push	r26
     51e:	bf 93       	push	r27
     520:	ef 93       	push	r30
     522:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     524:	e0 91 3d 02 	lds	r30, 0x023D
     528:	f0 91 3e 02 	lds	r31, 0x023E
     52c:	80 81       	ld	r24, Z
     52e:	82 fd       	sbrc	r24, 2
     530:	14 c0       	rjmp	.+40     	; 0x55a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     532:	ed e2       	ldi	r30, 0x2D	; 45
     534:	f2 e0       	ldi	r31, 0x02	; 2
     536:	a6 89       	ldd	r26, Z+22	; 0x16
     538:	b7 89       	ldd	r27, Z+23	; 0x17
     53a:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     53c:	81 8d       	ldd	r24, Z+25	; 0x19
     53e:	8f 5f       	subi	r24, 0xFF	; 255
     540:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     542:	92 8d       	ldd	r25, Z+26	; 0x1a
     544:	89 17       	cp	r24, r25
     546:	71 f0       	breq	.+28     	; 0x564 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     548:	df 01       	movw	r26, r30
     54a:	e1 8d       	ldd	r30, Z+25	; 0x19
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	e3 5d       	subi	r30, 0xD3	; 211
     550:	fd 4f       	sbci	r31, 0xFD	; 253
     552:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     554:	59 96       	adiw	r26, 0x19	; 25
     556:	8c 93       	st	X, r24
     558:	05 c0       	rjmp	.+10     	; 0x564 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     55a:	e0 91 43 02 	lds	r30, 0x0243
     55e:	f0 91 44 02 	lds	r31, 0x0244
     562:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     564:	ff 91       	pop	r31
     566:	ef 91       	pop	r30
     568:	bf 91       	pop	r27
     56a:	af 91       	pop	r26
     56c:	9f 91       	pop	r25
     56e:	8f 91       	pop	r24
     570:	2f 91       	pop	r18
     572:	0f 90       	pop	r0
     574:	0f be       	out	0x3f, r0	; 63
     576:	0f 90       	pop	r0
     578:	1f 90       	pop	r1
     57a:	18 95       	reti

0000057c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     57c:	1f 92       	push	r1
     57e:	0f 92       	push	r0
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	0f 92       	push	r0
     584:	11 24       	eor	r1, r1
     586:	2f 93       	push	r18
     588:	3f 93       	push	r19
     58a:	4f 93       	push	r20
     58c:	5f 93       	push	r21
     58e:	6f 93       	push	r22
     590:	7f 93       	push	r23
     592:	8f 93       	push	r24
     594:	9f 93       	push	r25
     596:	af 93       	push	r26
     598:	bf 93       	push	r27
     59a:	ef 93       	push	r30
     59c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     59e:	8d e2       	ldi	r24, 0x2D	; 45
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	0e 94 82 01 	call	0x304	; 0x304 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     5a6:	ff 91       	pop	r31
     5a8:	ef 91       	pop	r30
     5aa:	bf 91       	pop	r27
     5ac:	af 91       	pop	r26
     5ae:	9f 91       	pop	r25
     5b0:	8f 91       	pop	r24
     5b2:	7f 91       	pop	r23
     5b4:	6f 91       	pop	r22
     5b6:	5f 91       	pop	r21
     5b8:	4f 91       	pop	r20
     5ba:	3f 91       	pop	r19
     5bc:	2f 91       	pop	r18
     5be:	0f 90       	pop	r0
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	0f 90       	pop	r0
     5c4:	1f 90       	pop	r1
     5c6:	18 95       	reti

000005c8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     5c8:	8d e2       	ldi	r24, 0x2D	; 45
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN14HardwareSerial9availableEv>
     5d0:	21 e0       	ldi	r18, 0x01	; 1
     5d2:	89 2b       	or	r24, r25
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <_Z17Serial0_availablev+0x10>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
}
     5d8:	82 2f       	mov	r24, r18
     5da:	08 95       	ret

000005dc <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     5dc:	ed e2       	ldi	r30, 0x2D	; 45
     5de:	f2 e0       	ldi	r31, 0x02	; 2
     5e0:	13 82       	std	Z+3, r1	; 0x03
     5e2:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     5e4:	88 ee       	ldi	r24, 0xE8	; 232
     5e6:	93 e0       	ldi	r25, 0x03	; 3
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	84 83       	std	Z+4, r24	; 0x04
     5ee:	95 83       	std	Z+5, r25	; 0x05
     5f0:	a6 83       	std	Z+6, r26	; 0x06
     5f2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     5f4:	80 e6       	ldi	r24, 0x60	; 96
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	80 83       	st	Z, r24
     5fc:	85 ec       	ldi	r24, 0xC5	; 197
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	95 87       	std	Z+13, r25	; 0x0d
     602:	84 87       	std	Z+12, r24	; 0x0c
     604:	84 ec       	ldi	r24, 0xC4	; 196
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	97 87       	std	Z+15, r25	; 0x0f
     60a:	86 87       	std	Z+14, r24	; 0x0e
     60c:	80 ec       	ldi	r24, 0xC0	; 192
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	91 8b       	std	Z+17, r25	; 0x11
     612:	80 8b       	std	Z+16, r24	; 0x10
     614:	81 ec       	ldi	r24, 0xC1	; 193
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	93 8b       	std	Z+19, r25	; 0x13
     61a:	82 8b       	std	Z+18, r24	; 0x12
     61c:	82 ec       	ldi	r24, 0xC2	; 194
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	95 8b       	std	Z+21, r25	; 0x15
     622:	84 8b       	std	Z+20, r24	; 0x14
     624:	86 ec       	ldi	r24, 0xC6	; 198
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	97 8b       	std	Z+23, r25	; 0x17
     62a:	86 8b       	std	Z+22, r24	; 0x16
     62c:	11 8e       	std	Z+25, r1	; 0x19
     62e:	12 8e       	std	Z+26, r1	; 0x1a
     630:	13 8e       	std	Z+27, r1	; 0x1b
     632:	14 8e       	std	Z+28, r1	; 0x1c
     634:	08 95       	ret

00000636 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
     646:	41 15       	cp	r20, r1
     648:	51 05       	cpc	r21, r1
     64a:	b1 f0       	breq	.+44     	; 0x678 <_ZN5Print5writeEPKhj+0x42>
     64c:	8c 01       	movw	r16, r24
     64e:	e6 2e       	mov	r14, r22
     650:	f7 2e       	mov	r15, r23
     652:	ea 01       	movw	r28, r20
     654:	c1 2c       	mov	r12, r1
     656:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
     658:	d7 01       	movw	r26, r14
     65a:	6d 91       	ld	r22, X+
     65c:	7d 01       	movw	r14, r26
     65e:	d8 01       	movw	r26, r16
     660:	ed 91       	ld	r30, X+
     662:	fc 91       	ld	r31, X
     664:	01 90       	ld	r0, Z+
     666:	f0 81       	ld	r31, Z
     668:	e0 2d       	mov	r30, r0
     66a:	c8 01       	movw	r24, r16
     66c:	09 95       	icall
     66e:	c8 0e       	add	r12, r24
     670:	d9 1e       	adc	r13, r25
     672:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     674:	89 f7       	brne	.-30     	; 0x658 <_ZN5Print5writeEPKhj+0x22>
     676:	02 c0       	rjmp	.+4      	; 0x67c <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     678:	c1 2c       	mov	r12, r1
     67a:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
     67c:	c6 01       	movw	r24, r12
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	08 95       	ret

00000690 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     690:	61 15       	cp	r22, r1
     692:	71 05       	cpc	r23, r1
     694:	81 f0       	breq	.+32     	; 0x6b6 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     696:	fb 01       	movw	r30, r22
     698:	01 90       	ld	r0, Z+
     69a:	00 20       	and	r0, r0
     69c:	e9 f7       	brne	.-6      	; 0x698 <_ZN5Print5printEPKc+0x8>
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	af 01       	movw	r20, r30
     6a2:	46 1b       	sub	r20, r22
     6a4:	57 0b       	sbc	r21, r23
     6a6:	dc 01       	movw	r26, r24
     6a8:	ed 91       	ld	r30, X+
     6aa:	fc 91       	ld	r31, X
     6ac:	02 80       	ldd	r0, Z+2	; 0x02
     6ae:	f3 81       	ldd	r31, Z+3	; 0x03
     6b0:	e0 2d       	mov	r30, r0
     6b2:	09 95       	icall
     6b4:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
     6ba:	08 95       	ret

000006bc <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
     6bc:	dc 01       	movw	r26, r24
     6be:	ed 91       	ld	r30, X+
     6c0:	fc 91       	ld	r31, X
     6c2:	02 80       	ldd	r0, Z+2	; 0x02
     6c4:	f3 81       	ldd	r31, Z+3	; 0x03
     6c6:	e0 2d       	mov	r30, r0
     6c8:	42 e0       	ldi	r20, 0x02	; 2
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	6c e6       	ldi	r22, 0x6C	; 108
     6ce:	71 e0       	ldi	r23, 0x01	; 1
     6d0:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
     6d2:	08 95       	ret

000006d4 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	ec 01       	movw	r28, r24
  size_t n = print(c);
     6de:	0e 94 48 03 	call	0x690	; 0x690 <_ZN5Print5printEPKc>
     6e2:	8c 01       	movw	r16, r24
  n += println();
     6e4:	ce 01       	movw	r24, r28
     6e6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN5Print7printlnEv>
  return n;
}
     6ea:	80 0f       	add	r24, r16
     6ec:	91 1f       	adc	r25, r17
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	2f 93       	push	r18
     704:	3f 93       	push	r19
     706:	8f 93       	push	r24
     708:	9f 93       	push	r25
     70a:	af 93       	push	r26
     70c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     70e:	80 91 cb 02 	lds	r24, 0x02CB
     712:	90 91 cc 02 	lds	r25, 0x02CC
     716:	a0 91 cd 02 	lds	r26, 0x02CD
     71a:	b0 91 ce 02 	lds	r27, 0x02CE
	unsigned char f = timer0_fract;
     71e:	30 91 ca 02 	lds	r19, 0x02CA

	m += MILLIS_INC;
	f += FRACT_INC;
     722:	23 e0       	ldi	r18, 0x03	; 3
     724:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     726:	2d 37       	cpi	r18, 0x7D	; 125
     728:	20 f4       	brcc	.+8      	; 0x732 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	a1 1d       	adc	r26, r1
     72e:	b1 1d       	adc	r27, r1
     730:	05 c0       	rjmp	.+10     	; 0x73c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     732:	26 e8       	ldi	r18, 0x86	; 134
     734:	23 0f       	add	r18, r19
		m += 1;
     736:	02 96       	adiw	r24, 0x02	; 2
     738:	a1 1d       	adc	r26, r1
     73a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     73c:	20 93 ca 02 	sts	0x02CA, r18
	timer0_millis = m;
     740:	80 93 cb 02 	sts	0x02CB, r24
     744:	90 93 cc 02 	sts	0x02CC, r25
     748:	a0 93 cd 02 	sts	0x02CD, r26
     74c:	b0 93 ce 02 	sts	0x02CE, r27
	timer0_overflow_count++;
     750:	80 91 cf 02 	lds	r24, 0x02CF
     754:	90 91 d0 02 	lds	r25, 0x02D0
     758:	a0 91 d1 02 	lds	r26, 0x02D1
     75c:	b0 91 d2 02 	lds	r27, 0x02D2
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	a1 1d       	adc	r26, r1
     764:	b1 1d       	adc	r27, r1
     766:	80 93 cf 02 	sts	0x02CF, r24
     76a:	90 93 d0 02 	sts	0x02D0, r25
     76e:	a0 93 d1 02 	sts	0x02D1, r26
     772:	b0 93 d2 02 	sts	0x02D2, r27
}
     776:	bf 91       	pop	r27
     778:	af 91       	pop	r26
     77a:	9f 91       	pop	r25
     77c:	8f 91       	pop	r24
     77e:	3f 91       	pop	r19
     780:	2f 91       	pop	r18
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     78c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     78e:	84 b5       	in	r24, 0x24	; 36
     790:	82 60       	ori	r24, 0x02	; 2
     792:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     794:	84 b5       	in	r24, 0x24	; 36
     796:	81 60       	ori	r24, 0x01	; 1
     798:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     79a:	85 b5       	in	r24, 0x25	; 37
     79c:	82 60       	ori	r24, 0x02	; 2
     79e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     7a0:	85 b5       	in	r24, 0x25	; 37
     7a2:	81 60       	ori	r24, 0x01	; 1
     7a4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     7a6:	ee e6       	ldi	r30, 0x6E	; 110
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	81 60       	ori	r24, 0x01	; 1
     7ae:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     7b0:	e1 e8       	ldi	r30, 0x81	; 129
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     7b6:	80 81       	ld	r24, Z
     7b8:	82 60       	ori	r24, 0x02	; 2
     7ba:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     7bc:	80 81       	ld	r24, Z
     7be:	81 60       	ori	r24, 0x01	; 1
     7c0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     7c2:	e0 e8       	ldi	r30, 0x80	; 128
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	81 60       	ori	r24, 0x01	; 1
     7ca:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     7cc:	e1 eb       	ldi	r30, 0xB1	; 177
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	84 60       	ori	r24, 0x04	; 4
     7d4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     7d6:	e0 eb       	ldi	r30, 0xB0	; 176
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	81 60       	ori	r24, 0x01	; 1
     7de:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     7e0:	ea e7       	ldi	r30, 0x7A	; 122
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	84 60       	ori	r24, 0x04	; 4
     7e8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     7ea:	80 81       	ld	r24, Z
     7ec:	82 60       	ori	r24, 0x02	; 2
     7ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     7f0:	80 81       	ld	r24, Z
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     7f6:	80 81       	ld	r24, Z
     7f8:	80 68       	ori	r24, 0x80	; 128
     7fa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     7fc:	10 92 c1 00 	sts	0x00C1, r1
     800:	08 95       	ret

00000802 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     802:	20 91 15 03 	lds	r18, 0x0315
     806:	30 91 16 03 	lds	r19, 0x0316
     80a:	28 17       	cp	r18, r24
     80c:	39 07       	cpc	r19, r25
     80e:	f9 f4       	brne	.+62     	; 0x84e <_ZN14SoftwareSerial4readEv+0x4c>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     810:	90 91 d3 02 	lds	r25, 0x02D3
     814:	80 91 d4 02 	lds	r24, 0x02D4
     818:	98 17       	cp	r25, r24
     81a:	e1 f0       	breq	.+56     	; 0x854 <_ZN14SoftwareSerial4readEv+0x52>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     81c:	e0 91 d3 02 	lds	r30, 0x02D3
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	eb 52       	subi	r30, 0x2B	; 43
     824:	fd 4f       	sbci	r31, 0xFD	; 253
     826:	80 81       	ld	r24, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     828:	20 91 d3 02 	lds	r18, 0x02D3
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	2f 5f       	subi	r18, 0xFF	; 255
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	2f 73       	andi	r18, 0x3F	; 63
     834:	30 78       	andi	r19, 0x80	; 128
     836:	33 23       	and	r19, r19
     838:	34 f4       	brge	.+12     	; 0x846 <_ZN14SoftwareSerial4readEv+0x44>
     83a:	21 50       	subi	r18, 0x01	; 1
     83c:	31 09       	sbc	r19, r1
     83e:	20 6c       	ori	r18, 0xC0	; 192
     840:	3f 6f       	ori	r19, 0xFF	; 255
     842:	2f 5f       	subi	r18, 0xFF	; 255
     844:	3f 4f       	sbci	r19, 0xFF	; 255
     846:	20 93 d3 02 	sts	0x02D3, r18
  return d;
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	08 95       	ret

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	9f ef       	ldi	r25, 0xFF	; 255
     852:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
     858:	08 95       	ret

0000085a <_ZN14SoftwareSerial9availableEv>:

int SoftwareSerial::available()
{
  if (!isListening())
     85a:	20 91 15 03 	lds	r18, 0x0315
     85e:	30 91 16 03 	lds	r19, 0x0316
     862:	28 17       	cp	r18, r24
     864:	39 07       	cpc	r19, r25
     866:	b1 f4       	brne	.+44     	; 0x894 <_ZN14SoftwareSerial9availableEv+0x3a>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     868:	20 91 d4 02 	lds	r18, 0x02D4
     86c:	80 91 d3 02 	lds	r24, 0x02D3
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	20 5c       	subi	r18, 0xC0	; 192
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	28 1b       	sub	r18, r24
     878:	31 09       	sbc	r19, r1
     87a:	2f 73       	andi	r18, 0x3F	; 63
     87c:	30 78       	andi	r19, 0x80	; 128
     87e:	33 23       	and	r19, r19
     880:	34 f4       	brge	.+12     	; 0x88e <_ZN14SoftwareSerial9availableEv+0x34>
     882:	21 50       	subi	r18, 0x01	; 1
     884:	31 09       	sbc	r19, r1
     886:	20 6c       	ori	r18, 0xC0	; 192
     888:	3f 6f       	ori	r19, 0xFF	; 255
     88a:	2f 5f       	subi	r18, 0xFF	; 255
     88c:	3f 4f       	sbci	r19, 0xFF	; 255
     88e:	82 2f       	mov	r24, r18
     890:	93 2f       	mov	r25, r19
     892:	08 95       	ret
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
     898:	08 95       	ret

0000089a <_ZN14SoftwareSerial5writeEh>:

size_t SoftwareSerial::write(uint8_t b)
{
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ec 01       	movw	r28, r24
  if (_tx_delay == 0) {
     8a2:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8a4:	5d 8d       	ldd	r21, Y+29	; 0x1d
     8a6:	41 15       	cp	r20, r1
     8a8:	51 05       	cpc	r21, r1
     8aa:	29 f4       	brne	.+10     	; 0x8b6 <_ZN14SoftwareSerial5writeEh+0x1c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	9b 83       	std	Y+3, r25	; 0x03
     8b2:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
     8b4:	39 c0       	rjmp	.+114    	; 0x928 <__stack+0x29>

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
     8b6:	a9 89       	ldd	r26, Y+17	; 0x11
     8b8:	ba 89       	ldd	r27, Y+18	; 0x12
  uint8_t reg_mask = _transmitBitMask;
     8ba:	38 89       	ldd	r19, Y+16	; 0x10
  uint8_t inv_mask = ~_transmitBitMask;
     8bc:	83 2f       	mov	r24, r19
     8be:	80 95       	com	r24
  uint8_t oldSREG = SREG;
     8c0:	1f b7       	in	r17, 0x3f	; 63
  bool inv = _inverse_logic;
     8c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
  uint16_t delay = _tx_delay;

  if (inv)
     8c4:	91 fb       	bst	r25, 1
     8c6:	77 27       	eor	r23, r23
     8c8:	70 f9       	bld	r23, 0
     8ca:	91 fd       	sbrc	r25, 1
    b = ~b;
     8cc:	60 95       	com	r22

  cli();  // turn off interrupts for a clean txmit
     8ce:	f8 94       	cli

  // Write the start bit
  if (inv)
     8d0:	77 23       	and	r23, r23
     8d2:	21 f0       	breq	.+8      	; 0x8dc <_ZN14SoftwareSerial5writeEh+0x42>
    *reg |= reg_mask;
     8d4:	9c 91       	ld	r25, X
     8d6:	93 2b       	or	r25, r19
     8d8:	9c 93       	st	X, r25
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <_ZN14SoftwareSerial5writeEh+0x48>
  else
    *reg &= inv_mask;
     8dc:	9c 91       	ld	r25, X
     8de:	98 23       	and	r25, r24
     8e0:	9c 93       	st	X, r25
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     8e2:	fa 01       	movw	r30, r20
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <_ZN14SoftwareSerial5writeEh+0x4a>
     8e8:	98 e0       	ldi	r25, 0x08	; 8
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
     8ea:	60 ff       	sbrs	r22, 0
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <_ZN14SoftwareSerial5writeEh+0x5c>
      *reg |= reg_mask; // send 1
     8ee:	2c 91       	ld	r18, X
     8f0:	23 2b       	or	r18, r19
     8f2:	2c 93       	st	X, r18
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <_ZN14SoftwareSerial5writeEh+0x62>
    else
      *reg &= inv_mask; // send 0
     8f6:	2c 91       	ld	r18, X
     8f8:	28 23       	and	r18, r24
     8fa:	2c 93       	st	X, r18
     8fc:	fa 01       	movw	r30, r20
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <_ZN14SoftwareSerial5writeEh+0x64>

    tunedDelay(delay);
    b >>= 1;
     902:	66 95       	lsr	r22
     904:	91 50       	subi	r25, 0x01	; 1
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
     906:	89 f7       	brne	.-30     	; 0x8ea <_ZN14SoftwareSerial5writeEh+0x50>
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
     908:	77 23       	and	r23, r23
     90a:	21 f0       	breq	.+8      	; 0x914 <__stack+0x15>
    *reg &= inv_mask;
     90c:	9c 91       	ld	r25, X
     90e:	89 23       	and	r24, r25
     910:	8c 93       	st	X, r24
     912:	03 c0       	rjmp	.+6      	; 0x91a <__stack+0x1b>
  else
    *reg |= reg_mask;
     914:	8c 91       	ld	r24, X
     916:	38 2b       	or	r19, r24
     918:	3c 93       	st	X, r19

  SREG = oldSREG; // turn interrupts back on
     91a:	1f bf       	out	0x3f, r17	; 63
     91c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     91e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	f1 f7       	brne	.-4      	; 0x920 <__stack+0x21>
  tunedDelay(_tx_delay);
  
  return 1;
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	50 e0       	ldi	r21, 0x00	; 0
}
     928:	ca 01       	movw	r24, r20
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	08 95       	ret

00000932 <_ZN14SoftwareSerial5flushEv>:

void SoftwareSerial::flush()
{
  if (!isListening())
     932:	20 91 15 03 	lds	r18, 0x0315
     936:	30 91 16 03 	lds	r19, 0x0316
     93a:	28 17       	cp	r18, r24
     93c:	39 07       	cpc	r19, r25
     93e:	39 f4       	brne	.+14     	; 0x94e <_ZN14SoftwareSerial5flushEv+0x1c>
    return;

  uint8_t oldSREG = SREG;
     940:	8f b7       	in	r24, 0x3f	; 63
  cli();
     942:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
     944:	10 92 d4 02 	sts	0x02D4, r1
     948:	10 92 d3 02 	sts	0x02D3, r1
  SREG = oldSREG;
     94c:	8f bf       	out	0x3f, r24	; 63
     94e:	08 95       	ret

00000950 <_ZN14SoftwareSerial4peekEv>:
}

int SoftwareSerial::peek()
{
  if (!isListening())
     950:	20 91 15 03 	lds	r18, 0x0315
     954:	30 91 16 03 	lds	r19, 0x0316
     958:	28 17       	cp	r18, r24
     95a:	39 07       	cpc	r19, r25
     95c:	71 f4       	brne	.+28     	; 0x97a <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     95e:	90 91 d3 02 	lds	r25, 0x02D3
     962:	80 91 d4 02 	lds	r24, 0x02D4
     966:	98 17       	cp	r25, r24
     968:	59 f0       	breq	.+22     	; 0x980 <_ZN14SoftwareSerial4peekEv+0x30>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     96a:	e0 91 d3 02 	lds	r30, 0x02D3
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	eb 52       	subi	r30, 0x2B	; 43
     972:	fd 4f       	sbci	r31, 0xFD	; 253
     974:	80 81       	ld	r24, Z
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	08 95       	ret
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
     97a:	8f ef       	ldi	r24, 0xFF	; 255
     97c:	9f ef       	ldi	r25, 0xFF	; 255
     97e:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
     984:	08 95       	ret

00000986 <_ZN14SoftwareSerial13stopListeningEv>:
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
     986:	e0 91 15 03 	lds	r30, 0x0315
     98a:	f0 91 16 03 	lds	r31, 0x0316
     98e:	e8 17       	cp	r30, r24
     990:	f9 07       	cpc	r31, r25
     992:	69 f4       	brne	.+26     	; 0x9ae <_ZN14SoftwareSerial13stopListeningEv+0x28>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     994:	a3 89       	ldd	r26, Z+19	; 0x13
     996:	b4 89       	ldd	r27, Z+20	; 0x14
     998:	9c 91       	ld	r25, X
     99a:	85 89       	ldd	r24, Z+21	; 0x15
     99c:	80 95       	com	r24
     99e:	89 23       	and	r24, r25
     9a0:	8c 93       	st	X, r24
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
     9a2:	10 92 16 03 	sts	0x0316, r1
     9a6:	10 92 15 03 	sts	0x0315, r1
    return true;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	08 95       	ret
  }
  return false;
     9ae:	80 e0       	ldi	r24, 0x00	; 0
}
     9b0:	08 95       	ret

000009b2 <_ZN14SoftwareSerial6listenEv>:
}

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ec 01       	movw	r28, r24
  if (!_rx_delay_stopbit)
     9b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9bc:	89 2b       	or	r24, r25
     9be:	f1 f0       	breq	.+60     	; 0x9fc <_ZN14SoftwareSerial6listenEv+0x4a>
    return false;

  if (active_object != this)
     9c0:	80 91 15 03 	lds	r24, 0x0315
     9c4:	90 91 16 03 	lds	r25, 0x0316
     9c8:	8c 17       	cp	r24, r28
     9ca:	9d 07       	cpc	r25, r29
     9cc:	c9 f0       	breq	.+50     	; 0xa00 <_ZN14SoftwareSerial6listenEv+0x4e>
  {
    if (active_object)
     9ce:	00 97       	sbiw	r24, 0x00	; 0
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <_ZN14SoftwareSerial6listenEv+0x24>
      active_object->stopListening();
     9d2:	0e 94 c3 04 	call	0x986	; 0x986 <_ZN14SoftwareSerial13stopListeningEv>

    _buffer_overflow = false;
     9d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9d8:	8e 7f       	andi	r24, 0xFE	; 254
     9da:	8e 8f       	std	Y+30, r24	; 0x1e
    _receive_buffer_head = _receive_buffer_tail = 0;
     9dc:	10 92 d4 02 	sts	0x02D4, r1
     9e0:	10 92 d3 02 	sts	0x02D3, r1
    active_object = this;
     9e4:	d0 93 16 03 	sts	0x0316, r29
     9e8:	c0 93 15 03 	sts	0x0315, r28
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     9ec:	eb 89       	ldd	r30, Y+19	; 0x13
     9ee:	fc 89       	ldd	r31, Y+20	; 0x14
     9f0:	90 81       	ld	r25, Z
     9f2:	8d 89       	ldd	r24, Y+21	; 0x15
     9f4:	89 2b       	or	r24, r25
     9f6:	80 83       	st	Z, r24
    _buffer_overflow = false;
    _receive_buffer_head = _receive_buffer_tail = 0;
    active_object = this;

    setRxIntMsk(true);
    return true;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <_ZN14SoftwareSerial6listenEv+0x50>
// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    return false;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <_ZN14SoftwareSerial6listenEv+0x50>

    setRxIntMsk(true);
    return true;
  }

  return false;
     a00:	80 e0       	ldi	r24, 0x00	; 0
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
     a12:	2f 93       	push	r18
     a14:	3f 93       	push	r19
     a16:	4f 93       	push	r20
     a18:	5f 93       	push	r21
     a1a:	6f 93       	push	r22
     a1c:	7f 93       	push	r23
     a1e:	8f 93       	push	r24
     a20:	9f 93       	push	r25
     a22:	af 93       	push	r26
     a24:	bf 93       	push	r27
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
     a2e:	a0 91 15 03 	lds	r26, 0x0315
     a32:	b0 91 16 03 	lds	r27, 0x0316
     a36:	10 97       	sbiw	r26, 0x00	; 0
     a38:	09 f4       	brne	.+2      	; 0xa3c <__vector_3+0x34>
     a3a:	81 c0       	rjmp	.+258    	; 0xb3e <__vector_3+0x136>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     a3c:	5e 96       	adiw	r26, 0x1e	; 30
     a3e:	8c 91       	ld	r24, X
     a40:	5e 97       	sbiw	r26, 0x1e	; 30
     a42:	81 ff       	sbrs	r24, 1
     a44:	0d c0       	rjmp	.+26     	; 0xa60 <__vector_3+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     a46:	1e 96       	adiw	r26, 0x0e	; 14
     a48:	ed 91       	ld	r30, X+
     a4a:	fc 91       	ld	r31, X
     a4c:	1f 97       	sbiw	r26, 0x0f	; 15
     a4e:	90 81       	ld	r25, Z
     a50:	1d 96       	adiw	r26, 0x0d	; 13
     a52:	8c 91       	ld	r24, X
     a54:	1d 97       	sbiw	r26, 0x0d	; 13
     a56:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	71 f4       	brne	.+28     	; 0xa78 <__vector_3+0x70>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0c c0       	rjmp	.+24     	; 0xa78 <__vector_3+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     a60:	1e 96       	adiw	r26, 0x0e	; 14
     a62:	ed 91       	ld	r30, X+
     a64:	fc 91       	ld	r31, X
     a66:	1f 97       	sbiw	r26, 0x0f	; 15
     a68:	90 81       	ld	r25, Z
     a6a:	1d 96       	adiw	r26, 0x0d	; 13
     a6c:	8c 91       	ld	r24, X
     a6e:	1d 97       	sbiw	r26, 0x0d	; 13
     a70:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	09 f0       	breq	.+2      	; 0xa78 <__vector_3+0x70>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	88 23       	and	r24, r24
     a7a:	09 f4       	brne	.+2      	; 0xa7e <__vector_3+0x76>
     a7c:	60 c0       	rjmp	.+192    	; 0xb3e <__vector_3+0x136>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
     a7e:	53 96       	adiw	r26, 0x13	; 19
     a80:	ed 91       	ld	r30, X+
     a82:	fc 91       	ld	r31, X
     a84:	54 97       	sbiw	r26, 0x14	; 20
     a86:	90 81       	ld	r25, Z
     a88:	55 96       	adiw	r26, 0x15	; 21
     a8a:	8c 91       	ld	r24, X
     a8c:	55 97       	sbiw	r26, 0x15	; 21
     a8e:	80 95       	com	r24
     a90:	89 23       	and	r24, r25
     a92:	80 83       	st	Z, r24
     a94:	56 96       	adiw	r26, 0x16	; 22
     a96:	8d 91       	ld	r24, X+
     a98:	9c 91       	ld	r25, X
     a9a:	57 97       	sbiw	r26, 0x17	; 23
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <__vector_3+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
     aa0:	58 96       	adiw	r26, 0x18	; 24
     aa2:	6d 91       	ld	r22, X+
     aa4:	7c 91       	ld	r23, X
     aa6:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     aa8:	1e 96       	adiw	r26, 0x0e	; 14
     aaa:	cd 91       	ld	r28, X+
     aac:	dc 91       	ld	r29, X
     aae:	1f 97       	sbiw	r26, 0x0f	; 15
     ab0:	1d 96       	adiw	r26, 0x0d	; 13
     ab2:	5c 91       	ld	r21, X
     ab4:	1d 97       	sbiw	r26, 0x0d	; 13
     ab6:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	fb 01       	movw	r30, r22
     abc:	31 97       	sbiw	r30, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <__vector_3+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
     ac0:	84 2f       	mov	r24, r20
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	95 95       	asr	r25
     ac6:	87 95       	ror	r24
     ac8:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
     aca:	28 81       	ld	r18, Y
     acc:	25 23       	and	r18, r21
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
     ace:	09 f0       	breq	.+2      	; 0xad2 <__vector_3+0xca>
        d |= 0x80;
     ad0:	40 68       	ori	r20, 0x80	; 128
     ad2:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
     ad4:	91 f7       	brne	.-28     	; 0xaba <__vector_3+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
     ad6:	5e 96       	adiw	r26, 0x1e	; 30
     ad8:	8c 91       	ld	r24, X
     ada:	5e 97       	sbiw	r26, 0x1e	; 30
     adc:	81 fd       	sbrc	r24, 1
      d = ~d;
     ade:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     ae0:	80 91 d4 02 	lds	r24, 0x02D4
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	8f 73       	andi	r24, 0x3F	; 63
     aea:	90 78       	andi	r25, 0x80	; 128
     aec:	99 23       	and	r25, r25
     aee:	24 f4       	brge	.+8      	; 0xaf8 <__vector_3+0xf0>
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	80 6c       	ori	r24, 0xC0	; 192
     af4:	9f 6f       	ori	r25, 0xFF	; 255
     af6:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
     af8:	20 91 d3 02 	lds	r18, 0x02D3
     afc:	28 17       	cp	r18, r24
     afe:	49 f0       	breq	.+18     	; 0xb12 <__vector_3+0x10a>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     b00:	e0 91 d4 02 	lds	r30, 0x02D4
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	eb 52       	subi	r30, 0x2B	; 43
     b08:	fd 4f       	sbci	r31, 0xFD	; 253
     b0a:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
     b0c:	80 93 d4 02 	sts	0x02D4, r24
     b10:	07 c0       	rjmp	.+14     	; 0xb20 <__vector_3+0x118>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
     b12:	5e 96       	adiw	r26, 0x1e	; 30
     b14:	8c 91       	ld	r24, X
     b16:	5e 97       	sbiw	r26, 0x1e	; 30
     b18:	81 60       	ori	r24, 0x01	; 1
     b1a:	5e 96       	adiw	r26, 0x1e	; 30
     b1c:	8c 93       	st	X, r24
     b1e:	5e 97       	sbiw	r26, 0x1e	; 30
     b20:	5a 96       	adiw	r26, 0x1a	; 26
     b22:	8d 91       	ld	r24, X+
     b24:	9c 91       	ld	r25, X
     b26:	5b 97       	sbiw	r26, 0x1b	; 27
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <__vector_3+0x120>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
     b2c:	53 96       	adiw	r26, 0x13	; 19
     b2e:	ed 91       	ld	r30, X+
     b30:	fc 91       	ld	r31, X
     b32:	54 97       	sbiw	r26, 0x14	; 20
     b34:	90 81       	ld	r25, Z
     b36:	55 96       	adiw	r26, 0x15	; 21
     b38:	8c 91       	ld	r24, X
     b3a:	89 2b       	or	r24, r25
     b3c:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
     b3e:	ff 91       	pop	r31
     b40:	ef 91       	pop	r30
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	bf 91       	pop	r27
     b48:	af 91       	pop	r26
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	7f 91       	pop	r23
     b50:	6f 91       	pop	r22
     b52:	5f 91       	pop	r21
     b54:	4f 91       	pop	r20
     b56:	3f 91       	pop	r19
     b58:	2f 91       	pop	r18
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti

00000b64 <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
     b64:	21 e8       	ldi	r18, 0x81	; 129
     b66:	31 e0       	ldi	r19, 0x01	; 1
     b68:	fc 01       	movw	r30, r24
     b6a:	31 83       	std	Z+1, r19	; 0x01
     b6c:	20 83       	st	Z, r18
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
     b6e:	0e 94 c3 04 	call	0x986	; 0x986 <_ZN14SoftwareSerial13stopListeningEv>
     b72:	08 95       	ret

00000b74 <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	ec 01       	movw	r28, r24
     b7c:	16 2f       	mov	r17, r22
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output hihg. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
     b7e:	6e 8d       	ldd	r22, Y+30	; 0x1e
     b80:	66 95       	lsr	r22
     b82:	61 70       	andi	r22, 0x01	; 1
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	68 27       	eor	r22, r24
     b88:	81 2f       	mov	r24, r17
     b8a:	0e 94 38 07 	call	0xe70	; 0xe70 <digitalWrite>
  pinMode(tx, OUTPUT);
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	81 2f       	mov	r24, r17
     b92:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <pinMode>
  _transmitBitMask = digitalPinToBitMask(tx);
     b96:	61 2f       	mov	r22, r17
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	fb 01       	movw	r30, r22
     b9c:	e4 58       	subi	r30, 0x84	; 132
     b9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ba0:	e4 91       	lpm	r30, Z
     ba2:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
     ba4:	fb 01       	movw	r30, r22
     ba6:	e0 57       	subi	r30, 0x70	; 112
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	e2 55       	subi	r30, 0x52	; 82
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	85 91       	lpm	r24, Z+
     bb8:	94 91       	lpm	r25, Z
     bba:	9a 8b       	std	Y+18, r25	; 0x12
     bbc:	89 8b       	std	Y+17, r24	; 0x11
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	08 95       	ret

00000bc6 <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	ec 01       	movw	r28, r24
     bce:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	81 2f       	mov	r24, r17
     bd4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <pinMode>
  if (!_inverse_logic)
     bd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bda:	81 fd       	sbrc	r24, 1
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	81 2f       	mov	r24, r17
     be2:	0e 94 38 07 	call	0xe70	; 0xe70 <digitalWrite>
  _receivePin = rx;
     be6:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
     be8:	61 2f       	mov	r22, r17
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	fb 01       	movw	r30, r22
     bee:	e4 58       	subi	r30, 0x84	; 132
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	e4 91       	lpm	r30, Z
     bf4:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
     bf6:	fb 01       	movw	r30, r22
     bf8:	e0 57       	subi	r30, 0x70	; 112
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	ec 55       	subi	r30, 0x5C	; 92
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	85 91       	lpm	r24, Z+
     c0a:	94 91       	lpm	r25, Z
     c0c:	9f 87       	std	Y+15, r25	; 0x0f
     c0e:	8e 87       	std	Y+14, r24	; 0x0e
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	08 95       	ret

00000c18 <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ec 01       	movw	r28, r24
     c20:	16 2f       	mov	r17, r22
  public:
    Print() : write_error(0) {}
     c22:	1b 82       	std	Y+3, r1	; 0x03
     c24:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     c26:	88 ee       	ldi	r24, 0xE8	; 232
     c28:	93 e0       	ldi	r25, 0x03	; 3
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	8c 83       	std	Y+4, r24	; 0x04
     c30:	9d 83       	std	Y+5, r25	; 0x05
     c32:	ae 83       	std	Y+6, r26	; 0x06
     c34:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
     c36:	81 e8       	ldi	r24, 0x81	; 129
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	99 83       	std	Y+1, r25	; 0x01
     c3c:	88 83       	st	Y, r24
     c3e:	1f 8a       	std	Y+23, r1	; 0x17
     c40:	1e 8a       	std	Y+22, r1	; 0x16
     c42:	19 8e       	std	Y+25, r1	; 0x19
     c44:	18 8e       	std	Y+24, r1	; 0x18
     c46:	1b 8e       	std	Y+27, r1	; 0x1b
     c48:	1a 8e       	std	Y+26, r1	; 0x1a
     c4a:	1d 8e       	std	Y+29, r1	; 0x1d
     c4c:	1c 8e       	std	Y+28, r1	; 0x1c
     c4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c50:	8e 7f       	andi	r24, 0xFE	; 254
     c52:	20 fb       	bst	r18, 0
     c54:	81 f9       	bld	r24, 1
     c56:	8e 8f       	std	Y+30, r24	; 0x1e
{
  setTX(transmitPin);
     c58:	64 2f       	mov	r22, r20
     c5a:	ce 01       	movw	r24, r28
     c5c:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
     c60:	61 2f       	mov	r22, r17
     c62:	ce 01       	movw	r24, r28
     c64:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <_ZN14SoftwareSerial5setRXEh>
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	08 95       	ret

00000c70 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	ec 01       	movw	r28, r24
     c76:	9a 01       	movw	r18, r20
     c78:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     c7a:	1b 8e       	std	Y+27, r1	; 0x1b
     c7c:	1a 8e       	std	Y+26, r1	; 0x1a
     c7e:	19 8e       	std	Y+25, r1	; 0x19
     c80:	18 8e       	std	Y+24, r1	; 0x18
     c82:	1f 8a       	std	Y+23, r1	; 0x17
     c84:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	79 e0       	ldi	r23, 0x09	; 9
     c8a:	8d e3       	ldi	r24, 0x3D	; 61
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 8b 07 	call	0xf16	; 0xf16 <__divmodsi4>
     c92:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     c94:	24 30       	cpi	r18, 0x04	; 4
     c96:	31 05       	cpc	r19, r1
     c98:	18 f0       	brcs	.+6      	; 0xca0 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
     c9a:	c9 01       	movw	r24, r18
     c9c:	03 97       	sbiw	r24, 0x03	; 3
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     ca4:	9d 8f       	std	Y+29, r25	; 0x1d
     ca6:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
     ca8:	8c 85       	ldd	r24, Y+12	; 0x0c
     caa:	86 31       	cpi	r24, 0x16	; 22
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <_ZN14SoftwareSerial5beginEl+0x40>
     cae:	41 c0       	rjmp	.+130    	; 0xd32 <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     cb0:	b9 01       	movw	r22, r18
     cb2:	76 95       	lsr	r23
     cb4:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     cb6:	64 31       	cpi	r22, 0x14	; 20
     cb8:	71 05       	cpc	r23, r1
     cba:	18 f0       	brcs	.+6      	; 0xcc2 <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
     cbc:	63 51       	subi	r22, 0x13	; 19
     cbe:	71 09       	sbc	r23, r1
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     cc6:	7f 8b       	std	Y+23, r23	; 0x17
     cc8:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     cca:	36 97       	sbiw	r30, 0x06	; 6
     ccc:	20 f0       	brcs	.+8      	; 0xcd6 <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
     cce:	b9 01       	movw	r22, r18
     cd0:	65 50       	subi	r22, 0x05	; 5
     cd2:	71 09       	sbc	r23, r1
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     cda:	79 8f       	std	Y+25, r23	; 0x19
     cdc:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     cde:	b9 01       	movw	r22, r18
     ce0:	66 0f       	add	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	26 0f       	add	r18, r22
     ce6:	37 1f       	adc	r19, r23
     ce8:	36 95       	lsr	r19
     cea:	27 95       	ror	r18
     cec:	36 95       	lsr	r19
     cee:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     cf0:	2d 30       	cpi	r18, 0x0D	; 13
     cf2:	31 05       	cpc	r19, r1
     cf4:	10 f1       	brcs	.+68     	; 0xd3a <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
     cf6:	2c 50       	subi	r18, 0x0C	; 12
     cf8:	31 09       	sbc	r19, r1
     cfa:	21 c0       	rjmp	.+66     	; 0xd3e <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	8e 30       	cpi	r24, 0x0E	; 14
     d00:	08 f4       	brcc	.+2      	; 0xd04 <_ZN14SoftwareSerial5beginEl+0x94>
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <_ZN14SoftwareSerial5beginEl+0x9a>
     d08:	88 0f       	add	r24, r24
     d0a:	2a 95       	dec	r18
     d0c:	ea f7       	brpl	.-6      	; 0xd08 <_ZN14SoftwareSerial5beginEl+0x98>
     d0e:	98 2b       	or	r25, r24
     d10:	90 93 68 00 	sts	0x0068, r25
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     d14:	9c 85       	ldd	r25, Y+12	; 0x0c
     d16:	98 30       	cpi	r25, 0x08	; 8
     d18:	d0 f0       	brcs	.+52     	; 0xd4e <_ZN14SoftwareSerial5beginEl+0xde>
     d1a:	9e 30       	cpi	r25, 0x0E	; 14
     d1c:	10 f1       	brcs	.+68     	; 0xd62 <_ZN14SoftwareSerial5beginEl+0xf2>
     d1e:	96 31       	cpi	r25, 0x16	; 22
     d20:	58 f1       	brcs	.+86     	; 0xd78 <_ZN14SoftwareSerial5beginEl+0x108>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	2a c0       	rjmp	.+84     	; 0xd7c <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     d28:	8d 8b       	std	Y+21, r24	; 0x15
     d2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     d32:	ce 01       	movw	r24, r28
     d34:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_ZN14SoftwareSerial6listenEv>
     d38:	2a c0       	rjmp	.+84     	; 0xd8e <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
     d3a:	21 e0       	ldi	r18, 0x01	; 1
     d3c:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     d3e:	3b 8f       	std	Y+27, r19	; 0x1b
     d40:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     d42:	90 91 68 00 	lds	r25, 0x0068
     d46:	88 30       	cpi	r24, 0x08	; 8
     d48:	c8 f6       	brcc	.-78     	; 0xcfc <_ZN14SoftwareSerial5beginEl+0x8c>
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	e0 cf       	rjmp	.-64     	; 0xd0e <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     d4e:	2d e6       	ldi	r18, 0x6D	; 109
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	3c 8b       	std	Y+20, r19	; 0x14
     d54:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <_ZN14SoftwareSerial5beginEl+0xec>
     d5a:	88 0f       	add	r24, r24
     d5c:	9a 95       	dec	r25
     d5e:	ea f7       	brpl	.-6      	; 0xd5a <_ZN14SoftwareSerial5beginEl+0xea>
     d60:	e3 cf       	rjmp	.-58     	; 0xd28 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     d62:	2b e6       	ldi	r18, 0x6B	; 107
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	3c 8b       	std	Y+20, r19	; 0x14
     d68:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     d6a:	98 50       	subi	r25, 0x08	; 8
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <_ZN14SoftwareSerial5beginEl+0x102>
     d70:	88 0f       	add	r24, r24
     d72:	9a 95       	dec	r25
     d74:	ea f7       	brpl	.-6      	; 0xd70 <_ZN14SoftwareSerial5beginEl+0x100>
     d76:	d8 cf       	rjmp	.-80     	; 0xd28 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     d78:	2c e6       	ldi	r18, 0x6C	; 108
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	3c 8b       	std	Y+20, r19	; 0x14
     d7e:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     d80:	9e 50       	subi	r25, 0x0E	; 14
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <_ZN14SoftwareSerial5beginEl+0x118>
     d86:	88 0f       	add	r24, r24
     d88:	9a 95       	dec	r25
     d8a:	ea f7       	brpl	.-6      	; 0xd86 <_ZN14SoftwareSerial5beginEl+0x116>
     d8c:	cd cf       	rjmp	.-102    	; 0xd28 <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	69 f0       	breq	.+26     	; 0xdb2 <turnOffPWM+0x1e>
     d98:	28 f4       	brcc	.+10     	; 0xda4 <turnOffPWM+0x10>
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	b1 f0       	breq	.+44     	; 0xdca <turnOffPWM+0x36>
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	c1 f0       	breq	.+48     	; 0xdd2 <turnOffPWM+0x3e>
     da2:	08 95       	ret
     da4:	87 30       	cpi	r24, 0x07	; 7
     da6:	c9 f0       	breq	.+50     	; 0xdda <turnOffPWM+0x46>
     da8:	88 30       	cpi	r24, 0x08	; 8
     daa:	e9 f0       	breq	.+58     	; 0xde6 <turnOffPWM+0x52>
     dac:	84 30       	cpi	r24, 0x04	; 4
     dae:	01 f5       	brne	.+64     	; 0xdf0 <turnOffPWM+0x5c>
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     db2:	e0 e8       	ldi	r30, 0x80	; 128
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8f 77       	andi	r24, 0x7F	; 127
     dba:	80 83       	st	Z, r24
     dbc:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     dbe:	e0 e8       	ldi	r30, 0x80	; 128
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	8f 7d       	andi	r24, 0xDF	; 223
     dc6:	80 83       	st	Z, r24
     dc8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     dca:	84 b5       	in	r24, 0x24	; 36
     dcc:	8f 77       	andi	r24, 0x7F	; 127
     dce:	84 bd       	out	0x24, r24	; 36
     dd0:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     dd2:	84 b5       	in	r24, 0x24	; 36
     dd4:	8f 7d       	andi	r24, 0xDF	; 223
     dd6:	84 bd       	out	0x24, r24	; 36
     dd8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     dda:	e0 eb       	ldi	r30, 0xB0	; 176
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8f 77       	andi	r24, 0x7F	; 127
     de2:	80 83       	st	Z, r24
     de4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     de6:	e0 eb       	ldi	r30, 0xB0	; 176
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8f 7d       	andi	r24, 0xDF	; 223
     dee:	80 83       	st	Z, r24
     df0:	08 95       	ret

00000df2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	fc 01       	movw	r30, r24
     dfa:	e4 58       	subi	r30, 0x84	; 132
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     e00:	fc 01       	movw	r30, r24
     e02:	e0 57       	subi	r30, 0x70	; 112
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     e08:	88 23       	and	r24, r24
     e0a:	79 f1       	breq	.+94     	; 0xe6a <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	fc 01       	movw	r30, r24
     e14:	e8 54       	subi	r30, 0x48	; 72
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	a5 91       	lpm	r26, Z+
     e1a:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     e1c:	fc 01       	movw	r30, r24
     e1e:	e2 55       	subi	r30, 0x52	; 82
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	c5 91       	lpm	r28, Z+
     e24:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     e26:	61 11       	cpse	r22, r1
     e28:	0c c0       	rjmp	.+24     	; 0xe42 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     e2a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e2c:	f8 94       	cli
		*reg &= ~bit;
     e2e:	8c 91       	ld	r24, X
     e30:	e2 2f       	mov	r30, r18
     e32:	e0 95       	com	r30
     e34:	8e 23       	and	r24, r30
     e36:	8c 93       	st	X, r24
		*out &= ~bit;
     e38:	28 81       	ld	r18, Y
     e3a:	e2 23       	and	r30, r18
     e3c:	e8 83       	st	Y, r30
		SREG = oldSREG;
     e3e:	9f bf       	out	0x3f, r25	; 63
     e40:	14 c0       	rjmp	.+40     	; 0xe6a <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     e42:	62 30       	cpi	r22, 0x02	; 2
     e44:	61 f4       	brne	.+24     	; 0xe5e <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     e46:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e48:	f8 94       	cli
		*reg &= ~bit;
     e4a:	3c 91       	ld	r19, X
     e4c:	82 2f       	mov	r24, r18
     e4e:	80 95       	com	r24
     e50:	83 23       	and	r24, r19
     e52:	8c 93       	st	X, r24
		*out |= bit;
     e54:	e8 81       	ld	r30, Y
     e56:	e2 2b       	or	r30, r18
     e58:	e8 83       	st	Y, r30
		SREG = oldSREG;
     e5a:	9f bf       	out	0x3f, r25	; 63
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     e5e:	8f b7       	in	r24, 0x3f	; 63
                cli();
     e60:	f8 94       	cli
		*reg |= bit;
     e62:	ec 91       	ld	r30, X
     e64:	e2 2b       	or	r30, r18
     e66:	ec 93       	st	X, r30
		SREG = oldSREG;
     e68:	8f bf       	out	0x3f, r24	; 63
	}
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	f9 01       	movw	r30, r18
     e7c:	e8 59       	subi	r30, 0x98	; 152
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     e82:	f9 01       	movw	r30, r18
     e84:	e4 58       	subi	r30, 0x84	; 132
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     e8a:	f9 01       	movw	r30, r18
     e8c:	e0 57       	subi	r30, 0x70	; 112
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     e92:	cc 23       	and	r28, r28
     e94:	d1 f0       	breq	.+52     	; 0xeca <digitalWrite+0x5a>
     e96:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     e98:	81 11       	cpse	r24, r1
     e9a:	0e 94 ca 06 	call	0xd94	; 0xd94 <turnOffPWM>

	out = portOutputRegister(port);
     e9e:	ec 2f       	mov	r30, r28
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	e2 55       	subi	r30, 0x52	; 82
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	a5 91       	lpm	r26, Z+
     eac:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     eae:	8f b7       	in	r24, 0x3f	; 63
	cli();
     eb0:	f8 94       	cli

	if (val == LOW) {
     eb2:	d1 11       	cpse	r29, r1
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <digitalWrite+0x52>
		*out &= ~bit;
     eb6:	9c 91       	ld	r25, X
     eb8:	e1 2f       	mov	r30, r17
     eba:	e0 95       	com	r30
     ebc:	e9 23       	and	r30, r25
     ebe:	ec 93       	st	X, r30
     ec0:	03 c0       	rjmp	.+6      	; 0xec8 <digitalWrite+0x58>
	} else {
		*out |= bit;
     ec2:	ec 91       	ld	r30, X
     ec4:	e1 2b       	or	r30, r17
     ec6:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     ec8:	8f bf       	out	0x3f, r24	; 63
}
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	08 95       	ret

00000ed2 <__udivmodsi4>:
     ed2:	a1 e2       	ldi	r26, 0x21	; 33
     ed4:	1a 2e       	mov	r1, r26
     ed6:	aa 1b       	sub	r26, r26
     ed8:	bb 1b       	sub	r27, r27
     eda:	fd 01       	movw	r30, r26
     edc:	0d c0       	rjmp	.+26     	; 0xef8 <__udivmodsi4_ep>

00000ede <__udivmodsi4_loop>:
     ede:	aa 1f       	adc	r26, r26
     ee0:	bb 1f       	adc	r27, r27
     ee2:	ee 1f       	adc	r30, r30
     ee4:	ff 1f       	adc	r31, r31
     ee6:	a2 17       	cp	r26, r18
     ee8:	b3 07       	cpc	r27, r19
     eea:	e4 07       	cpc	r30, r20
     eec:	f5 07       	cpc	r31, r21
     eee:	20 f0       	brcs	.+8      	; 0xef8 <__udivmodsi4_ep>
     ef0:	a2 1b       	sub	r26, r18
     ef2:	b3 0b       	sbc	r27, r19
     ef4:	e4 0b       	sbc	r30, r20
     ef6:	f5 0b       	sbc	r31, r21

00000ef8 <__udivmodsi4_ep>:
     ef8:	66 1f       	adc	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	1a 94       	dec	r1
     f02:	69 f7       	brne	.-38     	; 0xede <__udivmodsi4_loop>
     f04:	60 95       	com	r22
     f06:	70 95       	com	r23
     f08:	80 95       	com	r24
     f0a:	90 95       	com	r25
     f0c:	9b 01       	movw	r18, r22
     f0e:	ac 01       	movw	r20, r24
     f10:	bd 01       	movw	r22, r26
     f12:	cf 01       	movw	r24, r30
     f14:	08 95       	ret

00000f16 <__divmodsi4>:
     f16:	05 2e       	mov	r0, r21
     f18:	97 fb       	bst	r25, 7
     f1a:	1e f4       	brtc	.+6      	; 0xf22 <__divmodsi4+0xc>
     f1c:	00 94       	com	r0
     f1e:	0e 94 a2 07 	call	0xf44	; 0xf44 <__negsi2>
     f22:	57 fd       	sbrc	r21, 7
     f24:	07 d0       	rcall	.+14     	; 0xf34 <__divmodsi4_neg2>
     f26:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodsi4>
     f2a:	07 fc       	sbrc	r0, 7
     f2c:	03 d0       	rcall	.+6      	; 0xf34 <__divmodsi4_neg2>
     f2e:	4e f4       	brtc	.+18     	; 0xf42 <__divmodsi4_exit>
     f30:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__negsi2>

00000f34 <__divmodsi4_neg2>:
     f34:	50 95       	com	r21
     f36:	40 95       	com	r20
     f38:	30 95       	com	r19
     f3a:	21 95       	neg	r18
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	4f 4f       	sbci	r20, 0xFF	; 255
     f40:	5f 4f       	sbci	r21, 0xFF	; 255

00000f42 <__divmodsi4_exit>:
     f42:	08 95       	ret

00000f44 <__negsi2>:
     f44:	90 95       	com	r25
     f46:	80 95       	com	r24
     f48:	70 95       	com	r23
     f4a:	61 95       	neg	r22
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	8f 4f       	sbci	r24, 0xFF	; 255
     f50:	9f 4f       	sbci	r25, 0xFF	; 255
     f52:	08 95       	ret

00000f54 <__tablejump2__>:
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	05 90       	lpm	r0, Z+
     f5a:	f4 91       	lpm	r31, Z
     f5c:	e0 2d       	mov	r30, r0
     f5e:	09 94       	ijmp

00000f60 <strtol>:
     f60:	a0 e0       	ldi	r26, 0x00	; 0
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e6 eb       	ldi	r30, 0xB6	; 182
     f66:	f7 e0       	ldi	r31, 0x07	; 7
     f68:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__prologue_saves__>
     f6c:	5c 01       	movw	r10, r24
     f6e:	6b 01       	movw	r12, r22
     f70:	7a 01       	movw	r14, r20
     f72:	61 15       	cp	r22, r1
     f74:	71 05       	cpc	r23, r1
     f76:	19 f0       	breq	.+6      	; 0xf7e <strtol+0x1e>
     f78:	fb 01       	movw	r30, r22
     f7a:	91 83       	std	Z+1, r25	; 0x01
     f7c:	80 83       	st	Z, r24
     f7e:	e1 14       	cp	r14, r1
     f80:	f1 04       	cpc	r15, r1
     f82:	29 f0       	breq	.+10     	; 0xf8e <strtol+0x2e>
     f84:	c7 01       	movw	r24, r14
     f86:	02 97       	sbiw	r24, 0x02	; 2
     f88:	83 97       	sbiw	r24, 0x23	; 35
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <strtol+0x2e>
     f8c:	f1 c0       	rjmp	.+482    	; 0x1170 <strtol+0x210>
     f8e:	e5 01       	movw	r28, r10
     f90:	21 96       	adiw	r28, 0x01	; 1
     f92:	f5 01       	movw	r30, r10
     f94:	10 81       	ld	r17, Z
     f96:	81 2f       	mov	r24, r17
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 c1 08 	call	0x1182	; 0x1182 <isspace>
     f9e:	89 2b       	or	r24, r25
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <strtol+0x46>
     fa2:	5e 01       	movw	r10, r28
     fa4:	f4 cf       	rjmp	.-24     	; 0xf8e <strtol+0x2e>
     fa6:	1d 32       	cpi	r17, 0x2D	; 45
     fa8:	29 f4       	brne	.+10     	; 0xfb4 <strtol+0x54>
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	f5 01       	movw	r30, r10
     fae:	11 81       	ldd	r17, Z+1	; 0x01
     fb0:	01 e0       	ldi	r16, 0x01	; 1
     fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <strtol+0x62>
     fb4:	1b 32       	cpi	r17, 0x2B	; 43
     fb6:	21 f4       	brne	.+8      	; 0xfc0 <strtol+0x60>
     fb8:	e5 01       	movw	r28, r10
     fba:	22 96       	adiw	r28, 0x02	; 2
     fbc:	f5 01       	movw	r30, r10
     fbe:	11 81       	ldd	r17, Z+1	; 0x01
     fc0:	00 e0       	ldi	r16, 0x00	; 0
     fc2:	e1 14       	cp	r14, r1
     fc4:	f1 04       	cpc	r15, r1
     fc6:	59 f1       	breq	.+86     	; 0x101e <strtol+0xbe>
     fc8:	f0 e1       	ldi	r31, 0x10	; 16
     fca:	ef 16       	cp	r14, r31
     fcc:	f1 04       	cpc	r15, r1
     fce:	61 f4       	brne	.+24     	; 0xfe8 <strtol+0x88>
     fd0:	10 33       	cpi	r17, 0x30	; 48
     fd2:	e1 f4       	brne	.+56     	; 0x100c <strtol+0xac>
     fd4:	88 81       	ld	r24, Y
     fd6:	8f 7d       	andi	r24, 0xDF	; 223
     fd8:	88 35       	cpi	r24, 0x58	; 88
     fda:	69 f5       	brne	.+90     	; 0x1036 <strtol+0xd6>
     fdc:	19 81       	ldd	r17, Y+1	; 0x01
     fde:	22 96       	adiw	r28, 0x02	; 2
     fe0:	02 60       	ori	r16, 0x02	; 2
     fe2:	70 e1       	ldi	r23, 0x10	; 16
     fe4:	e7 2e       	mov	r14, r23
     fe6:	f1 2c       	mov	r15, r1
     fe8:	88 e0       	ldi	r24, 0x08	; 8
     fea:	e8 16       	cp	r14, r24
     fec:	f1 04       	cpc	r15, r1
     fee:	39 f1       	breq	.+78     	; 0x103e <strtol+0xde>
     ff0:	2c f4       	brge	.+10     	; 0xffc <strtol+0x9c>
     ff2:	f2 e0       	ldi	r31, 0x02	; 2
     ff4:	ef 16       	cp	r14, r31
     ff6:	f1 04       	cpc	r15, r1
     ff8:	c9 f1       	breq	.+114    	; 0x106c <strtol+0x10c>
     ffa:	2a c0       	rjmp	.+84     	; 0x1050 <strtol+0xf0>
     ffc:	8a e0       	ldi	r24, 0x0A	; 10
     ffe:	e8 16       	cp	r14, r24
    1000:	f1 04       	cpc	r15, r1
    1002:	79 f0       	breq	.+30     	; 0x1022 <strtol+0xc2>
    1004:	e0 e1       	ldi	r30, 0x10	; 16
    1006:	ee 16       	cp	r14, r30
    1008:	f1 04       	cpc	r15, r1
    100a:	11 f5       	brne	.+68     	; 0x1050 <strtol+0xf0>
    100c:	50 e1       	ldi	r21, 0x10	; 16
    100e:	e5 2e       	mov	r14, r21
    1010:	f1 2c       	mov	r15, r1
    1012:	81 2c       	mov	r8, r1
    1014:	91 2c       	mov	r9, r1
    1016:	a1 2c       	mov	r10, r1
    1018:	68 e0       	ldi	r22, 0x08	; 8
    101a:	b6 2e       	mov	r11, r22
    101c:	2c c0       	rjmp	.+88     	; 0x1076 <strtol+0x116>
    101e:	10 33       	cpi	r17, 0x30	; 48
    1020:	c9 f2       	breq	.-78     	; 0xfd4 <strtol+0x74>
    1022:	3a e0       	ldi	r19, 0x0A	; 10
    1024:	e3 2e       	mov	r14, r19
    1026:	f1 2c       	mov	r15, r1
    1028:	4c ec       	ldi	r20, 0xCC	; 204
    102a:	84 2e       	mov	r8, r20
    102c:	98 2c       	mov	r9, r8
    102e:	a8 2c       	mov	r10, r8
    1030:	4c e0       	ldi	r20, 0x0C	; 12
    1032:	b4 2e       	mov	r11, r20
    1034:	20 c0       	rjmp	.+64     	; 0x1076 <strtol+0x116>
    1036:	10 e3       	ldi	r17, 0x30	; 48
    1038:	e1 14       	cp	r14, r1
    103a:	f1 04       	cpc	r15, r1
    103c:	a9 f6       	brne	.-86     	; 0xfe8 <strtol+0x88>
    103e:	98 e0       	ldi	r25, 0x08	; 8
    1040:	e9 2e       	mov	r14, r25
    1042:	f1 2c       	mov	r15, r1
    1044:	81 2c       	mov	r8, r1
    1046:	91 2c       	mov	r9, r1
    1048:	a1 2c       	mov	r10, r1
    104a:	20 e1       	ldi	r18, 0x10	; 16
    104c:	b2 2e       	mov	r11, r18
    104e:	13 c0       	rjmp	.+38     	; 0x1076 <strtol+0x116>
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e8       	ldi	r25, 0x80	; 128
    1058:	97 01       	movw	r18, r14
    105a:	0f 2c       	mov	r0, r15
    105c:	00 0c       	add	r0, r0
    105e:	44 0b       	sbc	r20, r20
    1060:	55 0b       	sbc	r21, r21
    1062:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodsi4>
    1066:	49 01       	movw	r8, r18
    1068:	5a 01       	movw	r10, r20
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <strtol+0x116>
    106c:	81 2c       	mov	r8, r1
    106e:	91 2c       	mov	r9, r1
    1070:	a1 2c       	mov	r10, r1
    1072:	80 e4       	ldi	r24, 0x40	; 64
    1074:	b8 2e       	mov	r11, r24
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	a9 01       	movw	r20, r18
    107e:	27 01       	movw	r4, r14
    1080:	0f 2c       	mov	r0, r15
    1082:	00 0c       	add	r0, r0
    1084:	66 08       	sbc	r6, r6
    1086:	77 08       	sbc	r7, r7
    1088:	1e 01       	movw	r2, r28
    108a:	e0 ed       	ldi	r30, 0xD0	; 208
    108c:	e1 0f       	add	r30, r17
    108e:	ea 30       	cpi	r30, 0x0A	; 10
    1090:	60 f0       	brcs	.+24     	; 0x10aa <strtol+0x14a>
    1092:	8f eb       	ldi	r24, 0xBF	; 191
    1094:	81 0f       	add	r24, r17
    1096:	8a 31       	cpi	r24, 0x1A	; 26
    1098:	10 f4       	brcc	.+4      	; 0x109e <strtol+0x13e>
    109a:	e9 ec       	ldi	r30, 0xC9	; 201
    109c:	05 c0       	rjmp	.+10     	; 0x10a8 <strtol+0x148>
    109e:	8f e9       	ldi	r24, 0x9F	; 159
    10a0:	81 0f       	add	r24, r17
    10a2:	8a 31       	cpi	r24, 0x1A	; 26
    10a4:	28 f5       	brcc	.+74     	; 0x10f0 <strtol+0x190>
    10a6:	e9 ea       	ldi	r30, 0xA9	; 169
    10a8:	e1 0f       	add	r30, r17
    10aa:	8e 2f       	mov	r24, r30
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	8e 15       	cp	r24, r14
    10b0:	9f 05       	cpc	r25, r15
    10b2:	f4 f4       	brge	.+60     	; 0x10f0 <strtol+0x190>
    10b4:	67 fd       	sbrc	r22, 7
    10b6:	18 c0       	rjmp	.+48     	; 0x10e8 <strtol+0x188>
    10b8:	82 16       	cp	r8, r18
    10ba:	93 06       	cpc	r9, r19
    10bc:	a4 06       	cpc	r10, r20
    10be:	b5 06       	cpc	r11, r21
    10c0:	90 f0       	brcs	.+36     	; 0x10e6 <strtol+0x186>
    10c2:	c3 01       	movw	r24, r6
    10c4:	b2 01       	movw	r22, r4
    10c6:	0e 94 cd 08 	call	0x119a	; 0x119a <__mulsi3>
    10ca:	9b 01       	movw	r18, r22
    10cc:	ac 01       	movw	r20, r24
    10ce:	2e 0f       	add	r18, r30
    10d0:	31 1d       	adc	r19, r1
    10d2:	41 1d       	adc	r20, r1
    10d4:	51 1d       	adc	r21, r1
    10d6:	21 30       	cpi	r18, 0x01	; 1
    10d8:	31 05       	cpc	r19, r1
    10da:	41 05       	cpc	r20, r1
    10dc:	f0 e8       	ldi	r31, 0x80	; 128
    10de:	5f 07       	cpc	r21, r31
    10e0:	10 f4       	brcc	.+4      	; 0x10e6 <strtol+0x186>
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <strtol+0x188>
    10e6:	6f ef       	ldi	r22, 0xFF	; 255
    10e8:	21 96       	adiw	r28, 0x01	; 1
    10ea:	f1 01       	movw	r30, r2
    10ec:	10 81       	ld	r17, Z
    10ee:	cc cf       	rjmp	.-104    	; 0x1088 <strtol+0x128>
    10f0:	80 2f       	mov	r24, r16
    10f2:	81 70       	andi	r24, 0x01	; 1
    10f4:	c1 14       	cp	r12, r1
    10f6:	d1 04       	cpc	r13, r1
    10f8:	71 f0       	breq	.+28     	; 0x1116 <strtol+0x1b6>
    10fa:	66 23       	and	r22, r22
    10fc:	29 f0       	breq	.+10     	; 0x1108 <strtol+0x1a8>
    10fe:	21 97       	sbiw	r28, 0x01	; 1
    1100:	f6 01       	movw	r30, r12
    1102:	d1 83       	std	Z+1, r29	; 0x01
    1104:	c0 83       	st	Z, r28
    1106:	07 c0       	rjmp	.+14     	; 0x1116 <strtol+0x1b6>
    1108:	01 ff       	sbrs	r16, 1
    110a:	19 c0       	rjmp	.+50     	; 0x113e <strtol+0x1de>
    110c:	22 97       	sbiw	r28, 0x02	; 2
    110e:	f6 01       	movw	r30, r12
    1110:	d1 83       	std	Z+1, r29	; 0x01
    1112:	c0 83       	st	Z, r28
    1114:	14 c0       	rjmp	.+40     	; 0x113e <strtol+0x1de>
    1116:	67 ff       	sbrs	r22, 7
    1118:	12 c0       	rjmp	.+36     	; 0x113e <strtol+0x1de>
    111a:	81 11       	cpse	r24, r1
    111c:	05 c0       	rjmp	.+10     	; 0x1128 <strtol+0x1c8>
    111e:	2f ef       	ldi	r18, 0xFF	; 255
    1120:	3f ef       	ldi	r19, 0xFF	; 255
    1122:	4f ef       	ldi	r20, 0xFF	; 255
    1124:	5f e7       	ldi	r21, 0x7F	; 127
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <strtol+0x1d0>
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e8       	ldi	r21, 0x80	; 128
    1130:	82 e2       	ldi	r24, 0x22	; 34
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	90 93 18 03 	sts	0x0318, r25
    1138:	80 93 17 03 	sts	0x0317, r24
    113c:	16 c0       	rjmp	.+44     	; 0x116a <strtol+0x20a>
    113e:	88 23       	and	r24, r24
    1140:	41 f0       	breq	.+16     	; 0x1152 <strtol+0x1f2>
    1142:	50 95       	com	r21
    1144:	40 95       	com	r20
    1146:	30 95       	com	r19
    1148:	21 95       	neg	r18
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	4f 4f       	sbci	r20, 0xFF	; 255
    114e:	5f 4f       	sbci	r21, 0xFF	; 255
    1150:	0c c0       	rjmp	.+24     	; 0x116a <strtol+0x20a>
    1152:	57 ff       	sbrs	r21, 7
    1154:	0a c0       	rjmp	.+20     	; 0x116a <strtol+0x20a>
    1156:	82 e2       	ldi	r24, 0x22	; 34
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	90 93 18 03 	sts	0x0318, r25
    115e:	80 93 17 03 	sts	0x0317, r24
    1162:	2f ef       	ldi	r18, 0xFF	; 255
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f ef       	ldi	r20, 0xFF	; 255
    1168:	5f e7       	ldi	r21, 0x7F	; 127
    116a:	b9 01       	movw	r22, r18
    116c:	ca 01       	movw	r24, r20
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <strtol+0x218>
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	e2 e1       	ldi	r30, 0x12	; 18
    117e:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__epilogue_restores__>

00001182 <isspace>:
    1182:	91 11       	cpse	r25, r1
    1184:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__ctype_isfalse>
    1188:	80 32       	cpi	r24, 0x20	; 32
    118a:	19 f0       	breq	.+6      	; 0x1192 <isspace+0x10>
    118c:	89 50       	subi	r24, 0x09	; 9
    118e:	85 50       	subi	r24, 0x05	; 5
    1190:	c8 f7       	brcc	.-14     	; 0x1184 <isspace+0x2>
    1192:	08 95       	ret

00001194 <__ctype_isfalse>:
    1194:	99 27       	eor	r25, r25
    1196:	88 27       	eor	r24, r24

00001198 <__ctype_istrue>:
    1198:	08 95       	ret

0000119a <__mulsi3>:
    119a:	db 01       	movw	r26, r22
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__muluhisi3>
    11a4:	bf 91       	pop	r27
    11a6:	af 91       	pop	r26
    11a8:	a2 9f       	mul	r26, r18
    11aa:	80 0d       	add	r24, r0
    11ac:	91 1d       	adc	r25, r1
    11ae:	a3 9f       	mul	r26, r19
    11b0:	90 0d       	add	r25, r0
    11b2:	b2 9f       	mul	r27, r18
    11b4:	90 0d       	add	r25, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	08 95       	ret

000011ba <__muluhisi3>:
    11ba:	0e 94 1f 09 	call	0x123e	; 0x123e <__umulhisi3>
    11be:	a5 9f       	mul	r26, r21
    11c0:	90 0d       	add	r25, r0
    11c2:	b4 9f       	mul	r27, r20
    11c4:	90 0d       	add	r25, r0
    11c6:	a4 9f       	mul	r26, r20
    11c8:	80 0d       	add	r24, r0
    11ca:	91 1d       	adc	r25, r1
    11cc:	11 24       	eor	r1, r1
    11ce:	08 95       	ret

000011d0 <__prologue_saves__>:
    11d0:	2f 92       	push	r2
    11d2:	3f 92       	push	r3
    11d4:	4f 92       	push	r4
    11d6:	5f 92       	push	r5
    11d8:	6f 92       	push	r6
    11da:	7f 92       	push	r7
    11dc:	8f 92       	push	r8
    11de:	9f 92       	push	r9
    11e0:	af 92       	push	r10
    11e2:	bf 92       	push	r11
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	ca 1b       	sub	r28, r26
    11fa:	db 0b       	sbc	r29, r27
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	09 94       	ijmp

00001208 <__epilogue_restores__>:
    1208:	2a 88       	ldd	r2, Y+18	; 0x12
    120a:	39 88       	ldd	r3, Y+17	; 0x11
    120c:	48 88       	ldd	r4, Y+16	; 0x10
    120e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1210:	6e 84       	ldd	r6, Y+14	; 0x0e
    1212:	7d 84       	ldd	r7, Y+13	; 0x0d
    1214:	8c 84       	ldd	r8, Y+12	; 0x0c
    1216:	9b 84       	ldd	r9, Y+11	; 0x0b
    1218:	aa 84       	ldd	r10, Y+10	; 0x0a
    121a:	b9 84       	ldd	r11, Y+9	; 0x09
    121c:	c8 84       	ldd	r12, Y+8	; 0x08
    121e:	df 80       	ldd	r13, Y+7	; 0x07
    1220:	ee 80       	ldd	r14, Y+6	; 0x06
    1222:	fd 80       	ldd	r15, Y+5	; 0x05
    1224:	0c 81       	ldd	r16, Y+4	; 0x04
    1226:	1b 81       	ldd	r17, Y+3	; 0x03
    1228:	aa 81       	ldd	r26, Y+2	; 0x02
    122a:	b9 81       	ldd	r27, Y+1	; 0x01
    122c:	ce 0f       	add	r28, r30
    122e:	d1 1d       	adc	r29, r1
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	ed 01       	movw	r28, r26
    123c:	08 95       	ret

0000123e <__umulhisi3>:
    123e:	a2 9f       	mul	r26, r18
    1240:	b0 01       	movw	r22, r0
    1242:	b3 9f       	mul	r27, r19
    1244:	c0 01       	movw	r24, r0
    1246:	a3 9f       	mul	r26, r19
    1248:	70 0d       	add	r23, r0
    124a:	81 1d       	adc	r24, r1
    124c:	11 24       	eor	r1, r1
    124e:	91 1d       	adc	r25, r1
    1250:	b2 9f       	mul	r27, r18
    1252:	70 0d       	add	r23, r0
    1254:	81 1d       	adc	r24, r1
    1256:	11 24       	eor	r1, r1
    1258:	91 1d       	adc	r25, r1
    125a:	08 95       	ret

0000125c <__do_global_dtors>:
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	c3 e6       	ldi	r28, 0x63	; 99
    1260:	d0 e0       	ldi	r29, 0x00	; 0
    1262:	04 c0       	rjmp	.+8      	; 0x126c <__do_global_dtors+0x10>
    1264:	fe 01       	movw	r30, r28
    1266:	0e 94 aa 07 	call	0xf54	; 0xf54 <__tablejump2__>
    126a:	21 96       	adiw	r28, 0x01	; 1
    126c:	c4 36       	cpi	r28, 0x64	; 100
    126e:	d1 07       	cpc	r29, r17
    1270:	c9 f7       	brne	.-14     	; 0x1264 <__do_global_dtors+0x8>
    1272:	f8 94       	cli

00001274 <__stop_program>:
    1274:	ff cf       	rjmp	.-2      	; 0x1274 <__stop_program>
