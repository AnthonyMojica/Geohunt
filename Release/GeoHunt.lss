
GeoHunt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800100  00003b88  00003c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000373  008001f4  008001f4  00003d10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003d10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000670  00000000  00000000  00003dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000194b2  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003070  00000000  00000000  0001d8ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002440  00000000  00000000  0002093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001830  00000000  00000000  00022d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d38  00000000  00000000  000245b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d1f  00000000  00000000  000282e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c8  00000000  00000000  00030007  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__dtors_end>
       4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
       8:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
       c:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__vector_3>
      10:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__vector_3>
      14:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__vector_3>
      18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      40:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__vector_16>
      44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      48:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__vector_18>
      4c:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_19>
      50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
      64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00 00 40 7a 10 f3 5a     ....$.'.*..@z..Z
      c8:	00 a0 72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48     ..rN..........vH
      d8:	17 00 00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1     .....T.....;....
      e8:	f5 05 00 00 80 96 98 00 00 00 40 42 0f 00 00 00     ..........@B....
      f8:	a0 86 01 00 00 00 10 27 00 00 00 00 e8 03 00 00     .......'........
     108:	00 00 64 00 00 00 00 00 0a 00 00 00 00 00 01 00     ..d.............
     118:	00 00 00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df     ....,v...gO.#...
     128:	ae 59 e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76     .Y.......S.:.Q.v
     138:	96 e8 e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc     .....&....b.@|o.
     148:	ef bc 9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7     ....@...o....Z*.
     158:	5c 93 6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5     \.kl.gm......G..
     168:	20 e6 b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80      ..........5w...
     178:	84 1e 08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33     ..... N......333
     188:	33 0f 98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55     3..n...A..!..;.U
     198:	16 cf fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d     ........K8..|...
     1a8:	a4 bb e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec     ...$ 2.r^"....$.
     1b8:	a1 e5 3d 27                                         ..='

000001bc <__ctors_start>:
     1bc:	e1 04       	cpc	r14, r1
     1be:	c7 07       	cpc	r28, r23
     1c0:	c2 0d       	add	r28, r2

000001c2 <__ctors_end>:
     1c2:	ec 04       	cpc	r14, r12

000001c4 <__dtors_end>:
     1c4:	11 24       	eor	r1, r1
     1c6:	1f be       	out	0x3f, r1	; 63
     1c8:	cf ef       	ldi	r28, 0xFF	; 255
     1ca:	d8 e0       	ldi	r29, 0x08	; 8
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	cd bf       	out	0x3d, r28	; 61

000001d0 <__do_copy_data>:
     1d0:	11 e0       	ldi	r17, 0x01	; 1
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b1 e0       	ldi	r27, 0x01	; 1
     1d6:	e8 e8       	ldi	r30, 0x88	; 136
     1d8:	fb e3       	ldi	r31, 0x3B	; 59
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__do_copy_data+0x10>
     1dc:	05 90       	lpm	r0, Z+
     1de:	0d 92       	st	X+, r0
     1e0:	a4 3f       	cpi	r26, 0xF4	; 244
     1e2:	b1 07       	cpc	r27, r17
     1e4:	d9 f7       	brne	.-10     	; 0x1dc <__do_copy_data+0xc>

000001e6 <__do_clear_bss>:
     1e6:	25 e0       	ldi	r18, 0x05	; 5
     1e8:	a4 ef       	ldi	r26, 0xF4	; 244
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <.do_clear_bss_start>

000001ee <.do_clear_bss_loop>:
     1ee:	1d 92       	st	X+, r1

000001f0 <.do_clear_bss_start>:
     1f0:	a7 36       	cpi	r26, 0x67	; 103
     1f2:	b2 07       	cpc	r27, r18
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <.do_clear_bss_loop>

000001f6 <__do_global_ctors>:
     1f6:	10 e0       	ldi	r17, 0x00	; 0
     1f8:	c1 ee       	ldi	r28, 0xE1	; 225
     1fa:	d0 e0       	ldi	r29, 0x00	; 0
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__do_global_ctors+0x10>
     1fe:	21 97       	sbiw	r28, 0x01	; 1
     200:	fe 01       	movw	r30, r28
     202:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__tablejump2__>
     206:	ce 3d       	cpi	r28, 0xDE	; 222
     208:	d1 07       	cpc	r29, r17
     20a:	c9 f7       	brne	.-14     	; 0x1fe <__do_global_ctors+0x8>
     20c:	0e 94 46 05 	call	0xa8c	; 0xa8c <main>
     210:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__do_global_dtors>

00000214 <__bad_interrupt>:
     214:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000218 <_Z17CalculateDistanceffff>:
     218:	4f 92       	push	r4
     21a:	5f 92       	push	r5
     21c:	6f 92       	push	r6
     21e:	7f 92       	push	r7
     220:	8f 92       	push	r8
     222:	9f 92       	push	r9
     224:	af 92       	push	r10
     226:	bf 92       	push	r11
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	00 d0       	rcall	.+0      	; 0x23a <_Z17CalculateDistanceffff+0x22>
     23a:	00 d0       	rcall	.+0      	; 0x23c <_Z17CalculateDistanceffff+0x24>
     23c:	cd b7       	in	r28, 0x3d	; 61
     23e:	de b7       	in	r29, 0x3e	; 62
     240:	29 01       	movw	r4, r18
     242:	3a 01       	movw	r6, r20
     244:	9b 01       	movw	r18, r22
     246:	ac 01       	movw	r20, r24
     248:	c8 01       	movw	r24, r16
     24a:	b7 01       	movw	r22, r14
     24c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__subsf3>
     250:	69 83       	std	Y+1, r22	; 0x01
     252:	7a 83       	std	Y+2, r23	; 0x02
     254:	8b 83       	std	Y+3, r24	; 0x03
     256:	9c 83       	std	Y+4, r25	; 0x04
     258:	a3 01       	movw	r20, r6
     25a:	92 01       	movw	r18, r4
     25c:	c6 01       	movw	r24, r12
     25e:	b5 01       	movw	r22, r10
     260:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__subsf3>
     264:	6b 01       	movw	r12, r22
     266:	7c 01       	movw	r14, r24
     268:	29 81       	ldd	r18, Y+1	; 0x01
     26a:	3a 81       	ldd	r19, Y+2	; 0x02
     26c:	4b 81       	ldd	r20, Y+3	; 0x03
     26e:	5c 81       	ldd	r21, Y+4	; 0x04
     270:	ca 01       	movw	r24, r20
     272:	b9 01       	movw	r22, r18
     274:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     278:	4b 01       	movw	r8, r22
     27a:	5c 01       	movw	r10, r24
     27c:	a7 01       	movw	r20, r14
     27e:	96 01       	movw	r18, r12
     280:	c7 01       	movw	r24, r14
     282:	b6 01       	movw	r22, r12
     284:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     288:	9b 01       	movw	r18, r22
     28a:	ac 01       	movw	r20, r24
     28c:	c5 01       	movw	r24, r10
     28e:	b4 01       	movw	r22, r8
     290:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     294:	0e 94 67 15 	call	0x2ace	; 0x2ace <sqrt>
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	48 ec       	ldi	r20, 0xC8	; 200
     29e:	52 e4       	ldi	r21, 0x42	; 66
     2a0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     2a4:	2d ec       	ldi	r18, 0xCD	; 205
     2a6:	3c e0       	ldi	r19, 0x0C	; 12
     2a8:	4d e4       	ldi	r20, 0x4D	; 77
     2aa:	55 e4       	ldi	r21, 0x45	; 69
     2ac:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	bf 90       	pop	r11
     2ca:	af 90       	pop	r10
     2cc:	9f 90       	pop	r9
     2ce:	8f 90       	pop	r8
     2d0:	7f 90       	pop	r7
     2d2:	6f 90       	pop	r6
     2d4:	5f 90       	pop	r5
     2d6:	4f 90       	pop	r4
     2d8:	08 95       	ret

000002da <_Z9ParseDataPc>:
     2da:	4f 92       	push	r4
     2dc:	5f 92       	push	r5
     2de:	6f 92       	push	r6
     2e0:	7f 92       	push	r7
     2e2:	8f 92       	push	r8
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	2a 97       	sbiw	r28, 0x0a	; 10
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	2c e2       	ldi	r18, 0x2C	; 44
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	3a 83       	std	Y+2, r19	; 0x02
     310:	29 83       	std	Y+1, r18	; 0x01
     312:	be 01       	movw	r22, r28
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	0e 94 15 18 	call	0x302a	; 0x302a <strtok>
     31c:	be 01       	movw	r22, r28
     31e:	6f 5f       	subi	r22, 0xFF	; 255
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 15 18 	call	0x302a	; 0x302a <strtok>
     32a:	be 01       	movw	r22, r28
     32c:	6f 5f       	subi	r22, 0xFF	; 255
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 15 18 	call	0x302a	; 0x302a <strtok>
     338:	be 01       	movw	r22, r28
     33a:	6f 5f       	subi	r22, 0xFF	; 255
     33c:	7f 4f       	sbci	r23, 0xFF	; 255
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 15 18 	call	0x302a	; 0x302a <strtok>
     346:	8c 01       	movw	r16, r24
     348:	dc 01       	movw	r26, r24
     34a:	6c 91       	ld	r22, X
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	60 53       	subi	r22, 0x30	; 48
     350:	71 09       	sbc	r23, r1
     352:	07 2e       	mov	r0, r23
     354:	00 0c       	add	r0, r0
     356:	88 0b       	sbc	r24, r24
     358:	99 0b       	sbc	r25, r25
     35a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	40 e2       	ldi	r20, 0x20	; 32
     364:	51 e4       	ldi	r21, 0x41	; 65
     366:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     36a:	6b 01       	movw	r12, r22
     36c:	7c 01       	movw	r14, r24
     36e:	f8 01       	movw	r30, r16
     370:	62 81       	ldd	r22, Z+2	; 0x02
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	60 53       	subi	r22, 0x30	; 48
     376:	71 09       	sbc	r23, r1
     378:	07 2e       	mov	r0, r23
     37a:	00 0c       	add	r0, r0
     37c:	88 0b       	sbc	r24, r24
     37e:	99 0b       	sbc	r25, r25
     380:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	40 e2       	ldi	r20, 0x20	; 32
     38a:	51 e4       	ldi	r21, 0x41	; 65
     38c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     390:	6b 83       	std	Y+3, r22	; 0x03
     392:	7c 83       	std	Y+4, r23	; 0x04
     394:	8d 83       	std	Y+5, r24	; 0x05
     396:	9e 83       	std	Y+6, r25	; 0x06
     398:	d8 01       	movw	r26, r16
     39a:	15 96       	adiw	r26, 0x05	; 5
     39c:	6c 91       	ld	r22, X
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	60 53       	subi	r22, 0x30	; 48
     3a2:	71 09       	sbc	r23, r1
     3a4:	07 2e       	mov	r0, r23
     3a6:	00 0c       	add	r0, r0
     3a8:	88 0b       	sbc	r24, r24
     3aa:	99 0b       	sbc	r25, r25
     3ac:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e2       	ldi	r20, 0x20	; 32
     3b6:	51 e4       	ldi	r21, 0x41	; 65
     3b8:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     3bc:	4b 01       	movw	r8, r22
     3be:	5c 01       	movw	r10, r24
     3c0:	f8 01       	movw	r30, r16
     3c2:	66 81       	ldd	r22, Z+6	; 0x06
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	60 53       	subi	r22, 0x30	; 48
     3c8:	71 09       	sbc	r23, r1
     3ca:	07 2e       	mov	r0, r23
     3cc:	00 0c       	add	r0, r0
     3ce:	88 0b       	sbc	r24, r24
     3d0:	99 0b       	sbc	r25, r25
     3d2:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	c5 01       	movw	r24, r10
     3dc:	b4 01       	movw	r22, r8
     3de:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     3e2:	4b 01       	movw	r8, r22
     3e4:	5c 01       	movw	r10, r24
     3e6:	d8 01       	movw	r26, r16
     3e8:	17 96       	adiw	r26, 0x07	; 7
     3ea:	6c 91       	ld	r22, X
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	60 53       	subi	r22, 0x30	; 48
     3f0:	71 09       	sbc	r23, r1
     3f2:	07 2e       	mov	r0, r23
     3f4:	00 0c       	add	r0, r0
     3f6:	88 0b       	sbc	r24, r24
     3f8:	99 0b       	sbc	r25, r25
     3fa:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e2       	ldi	r20, 0x20	; 32
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     40a:	2b 01       	movw	r4, r22
     40c:	3c 01       	movw	r6, r24
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	48 ec       	ldi	r20, 0xC8	; 200
     414:	52 e4       	ldi	r21, 0x42	; 66
     416:	c5 01       	movw	r24, r10
     418:	b4 01       	movw	r22, r8
     41a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     41e:	4b 01       	movw	r8, r22
     420:	5c 01       	movw	r10, r24
     422:	f8 01       	movw	r30, r16
     424:	60 85       	ldd	r22, Z+8	; 0x08
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	60 53       	subi	r22, 0x30	; 48
     42a:	71 09       	sbc	r23, r1
     42c:	07 2e       	mov	r0, r23
     42e:	00 0c       	add	r0, r0
     430:	88 0b       	sbc	r24, r24
     432:	99 0b       	sbc	r25, r25
     434:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     438:	9b 01       	movw	r18, r22
     43a:	ac 01       	movw	r20, r24
     43c:	c3 01       	movw	r24, r6
     43e:	b2 01       	movw	r22, r4
     440:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     444:	9b 01       	movw	r18, r22
     446:	ac 01       	movw	r20, r24
     448:	c5 01       	movw	r24, r10
     44a:	b4 01       	movw	r22, r8
     44c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     450:	4b 01       	movw	r8, r22
     452:	5c 01       	movw	r10, r24
     454:	d8 01       	movw	r26, r16
     456:	11 96       	adiw	r26, 0x01	; 1
     458:	6c 91       	ld	r22, X
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	60 53       	subi	r22, 0x30	; 48
     45e:	71 09       	sbc	r23, r1
     460:	07 2e       	mov	r0, r23
     462:	00 0c       	add	r0, r0
     464:	88 0b       	sbc	r24, r24
     466:	99 0b       	sbc	r25, r25
     468:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     46c:	9b 01       	movw	r18, r22
     46e:	ac 01       	movw	r20, r24
     470:	c7 01       	movw	r24, r14
     472:	b6 01       	movw	r22, r12
     474:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     478:	6b 01       	movw	r12, r22
     47a:	7c 01       	movw	r14, r24
     47c:	f8 01       	movw	r30, r16
     47e:	63 81       	ldd	r22, Z+3	; 0x03
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	60 53       	subi	r22, 0x30	; 48
     484:	71 09       	sbc	r23, r1
     486:	07 2e       	mov	r0, r23
     488:	00 0c       	add	r0, r0
     48a:	88 0b       	sbc	r24, r24
     48c:	99 0b       	sbc	r25, r25
     48e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     492:	9b 01       	movw	r18, r22
     494:	ac 01       	movw	r20, r24
     496:	6b 81       	ldd	r22, Y+3	; 0x03
     498:	7c 81       	ldd	r23, Y+4	; 0x04
     49a:	8d 81       	ldd	r24, Y+5	; 0x05
     49c:	9e 81       	ldd	r25, Y+6	; 0x06
     49e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     4a2:	2b 01       	movw	r4, r22
     4a4:	3c 01       	movw	r6, r24
     4a6:	27 e1       	ldi	r18, 0x17	; 23
     4a8:	37 eb       	ldi	r19, 0xB7	; 183
     4aa:	41 ed       	ldi	r20, 0xD1	; 209
     4ac:	58 e3       	ldi	r21, 0x38	; 56
     4ae:	c5 01       	movw	r24, r10
     4b0:	b4 01       	movw	r22, r8
     4b2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     4b6:	9b 01       	movw	r18, r22
     4b8:	ac 01       	movw	r20, r24
     4ba:	c3 01       	movw	r24, r6
     4bc:	b2 01       	movw	r22, r4
     4be:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e7       	ldi	r20, 0x70	; 112
     4c8:	52 e4       	ldi	r21, 0x42	; 66
     4ca:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__divsf3>
     4ce:	9b 01       	movw	r18, r22
     4d0:	ac 01       	movw	r20, r24
     4d2:	c7 01       	movw	r24, r14
     4d4:	b6 01       	movw	r22, r12
     4d6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     4da:	60 93 f2 03 	sts	0x03F2, r22
     4de:	70 93 f3 03 	sts	0x03F3, r23
     4e2:	80 93 f4 03 	sts	0x03F4, r24
     4e6:	90 93 f5 03 	sts	0x03F5, r25
     4ea:	be 01       	movw	r22, r28
     4ec:	6f 5f       	subi	r22, 0xFF	; 255
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 15 18 	call	0x302a	; 0x302a <strtok>
     4f8:	90 93 e9 03 	sts	0x03E9, r25
     4fc:	80 93 e8 03 	sts	0x03E8, r24
     500:	e0 91 e6 03 	lds	r30, 0x03E6
     504:	f0 91 e7 03 	lds	r31, 0x03E7
     508:	80 81       	ld	r24, Z
     50a:	8f 7d       	andi	r24, 0xDF	; 223
     50c:	83 35       	cpi	r24, 0x53	; 83
     50e:	89 f4       	brne	.+34     	; 0x532 <_Z9ParseDataPc+0x258>
     510:	80 91 f2 03 	lds	r24, 0x03F2
     514:	90 91 f3 03 	lds	r25, 0x03F3
     518:	a0 91 f4 03 	lds	r26, 0x03F4
     51c:	b0 91 f5 03 	lds	r27, 0x03F5
     520:	b0 58       	subi	r27, 0x80	; 128
     522:	80 93 f2 03 	sts	0x03F2, r24
     526:	90 93 f3 03 	sts	0x03F3, r25
     52a:	a0 93 f4 03 	sts	0x03F4, r26
     52e:	b0 93 f5 03 	sts	0x03F5, r27
     532:	be 01       	movw	r22, r28
     534:	6f 5f       	subi	r22, 0xFF	; 255
     536:	7f 4f       	sbci	r23, 0xFF	; 255
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 15 18 	call	0x302a	; 0x302a <strtok>
     540:	8c 01       	movw	r16, r24
     542:	dc 01       	movw	r26, r24
     544:	6c 91       	ld	r22, X
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	60 53       	subi	r22, 0x30	; 48
     54a:	71 09       	sbc	r23, r1
     54c:	07 2e       	mov	r0, r23
     54e:	00 0c       	add	r0, r0
     550:	88 0b       	sbc	r24, r24
     552:	99 0b       	sbc	r25, r25
     554:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     558:	6b 01       	movw	r12, r22
     55a:	7c 01       	movw	r14, r24
     55c:	f8 01       	movw	r30, r16
     55e:	61 81       	ldd	r22, Z+1	; 0x01
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	60 53       	subi	r22, 0x30	; 48
     564:	71 09       	sbc	r23, r1
     566:	07 2e       	mov	r0, r23
     568:	00 0c       	add	r0, r0
     56a:	88 0b       	sbc	r24, r24
     56c:	99 0b       	sbc	r25, r25
     56e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e2       	ldi	r20, 0x20	; 32
     578:	51 e4       	ldi	r21, 0x41	; 65
     57a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     57e:	4b 01       	movw	r8, r22
     580:	5c 01       	movw	r10, r24
     582:	d8 01       	movw	r26, r16
     584:	12 96       	adiw	r26, 0x02	; 2
     586:	8c 91       	ld	r24, X
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	c0 97       	sbiw	r24, 0x30	; 48
     58c:	bc 01       	movw	r22, r24
     58e:	99 0f       	add	r25, r25
     590:	88 0b       	sbc	r24, r24
     592:	99 0b       	sbc	r25, r25
     594:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     598:	9b 01       	movw	r18, r22
     59a:	ac 01       	movw	r20, r24
     59c:	c5 01       	movw	r24, r10
     59e:	b4 01       	movw	r22, r8
     5a0:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     5a4:	6b 83       	std	Y+3, r22	; 0x03
     5a6:	7c 83       	std	Y+4, r23	; 0x04
     5a8:	8d 83       	std	Y+5, r24	; 0x05
     5aa:	9e 83       	std	Y+6, r25	; 0x06
     5ac:	f8 01       	movw	r30, r16
     5ae:	63 81       	ldd	r22, Z+3	; 0x03
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	60 53       	subi	r22, 0x30	; 48
     5b4:	71 09       	sbc	r23, r1
     5b6:	07 2e       	mov	r0, r23
     5b8:	00 0c       	add	r0, r0
     5ba:	88 0b       	sbc	r24, r24
     5bc:	99 0b       	sbc	r25, r25
     5be:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	40 e2       	ldi	r20, 0x20	; 32
     5c8:	51 e4       	ldi	r21, 0x41	; 65
     5ca:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     5ce:	6f 83       	std	Y+7, r22	; 0x07
     5d0:	78 87       	std	Y+8, r23	; 0x08
     5d2:	89 87       	std	Y+9, r24	; 0x09
     5d4:	9a 87       	std	Y+10, r25	; 0x0a
     5d6:	d8 01       	movw	r26, r16
     5d8:	16 96       	adiw	r26, 0x06	; 6
     5da:	6c 91       	ld	r22, X
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	60 53       	subi	r22, 0x30	; 48
     5e0:	71 09       	sbc	r23, r1
     5e2:	07 2e       	mov	r0, r23
     5e4:	00 0c       	add	r0, r0
     5e6:	88 0b       	sbc	r24, r24
     5e8:	99 0b       	sbc	r25, r25
     5ea:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	40 e2       	ldi	r20, 0x20	; 32
     5f4:	51 e4       	ldi	r21, 0x41	; 65
     5f6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     5fa:	4b 01       	movw	r8, r22
     5fc:	5c 01       	movw	r10, r24
     5fe:	f8 01       	movw	r30, r16
     600:	67 81       	ldd	r22, Z+7	; 0x07
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	60 53       	subi	r22, 0x30	; 48
     606:	71 09       	sbc	r23, r1
     608:	07 2e       	mov	r0, r23
     60a:	00 0c       	add	r0, r0
     60c:	88 0b       	sbc	r24, r24
     60e:	99 0b       	sbc	r25, r25
     610:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     614:	9b 01       	movw	r18, r22
     616:	ac 01       	movw	r20, r24
     618:	c5 01       	movw	r24, r10
     61a:	b4 01       	movw	r22, r8
     61c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     620:	4b 01       	movw	r8, r22
     622:	5c 01       	movw	r10, r24
     624:	d8 01       	movw	r26, r16
     626:	18 96       	adiw	r26, 0x08	; 8
     628:	6c 91       	ld	r22, X
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	60 53       	subi	r22, 0x30	; 48
     62e:	71 09       	sbc	r23, r1
     630:	07 2e       	mov	r0, r23
     632:	00 0c       	add	r0, r0
     634:	88 0b       	sbc	r24, r24
     636:	99 0b       	sbc	r25, r25
     638:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e2       	ldi	r20, 0x20	; 32
     642:	51 e4       	ldi	r21, 0x41	; 65
     644:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     648:	2b 01       	movw	r4, r22
     64a:	3c 01       	movw	r6, r24
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	48 ec       	ldi	r20, 0xC8	; 200
     652:	52 e4       	ldi	r21, 0x42	; 66
     654:	c5 01       	movw	r24, r10
     656:	b4 01       	movw	r22, r8
     658:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     65c:	4b 01       	movw	r8, r22
     65e:	5c 01       	movw	r10, r24
     660:	f8 01       	movw	r30, r16
     662:	61 85       	ldd	r22, Z+9	; 0x09
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	60 53       	subi	r22, 0x30	; 48
     668:	71 09       	sbc	r23, r1
     66a:	07 2e       	mov	r0, r23
     66c:	00 0c       	add	r0, r0
     66e:	88 0b       	sbc	r24, r24
     670:	99 0b       	sbc	r25, r25
     672:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	c3 01       	movw	r24, r6
     67c:	b2 01       	movw	r22, r4
     67e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     682:	9b 01       	movw	r18, r22
     684:	ac 01       	movw	r20, r24
     686:	c5 01       	movw	r24, r10
     688:	b4 01       	movw	r22, r8
     68a:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     68e:	4b 01       	movw	r8, r22
     690:	5c 01       	movw	r10, r24
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	48 ec       	ldi	r20, 0xC8	; 200
     698:	52 e4       	ldi	r21, 0x42	; 66
     69a:	c7 01       	movw	r24, r14
     69c:	b6 01       	movw	r22, r12
     69e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     6a2:	9b 01       	movw	r18, r22
     6a4:	ac 01       	movw	r20, r24
     6a6:	6b 81       	ldd	r22, Y+3	; 0x03
     6a8:	7c 81       	ldd	r23, Y+4	; 0x04
     6aa:	8d 81       	ldd	r24, Y+5	; 0x05
     6ac:	9e 81       	ldd	r25, Y+6	; 0x06
     6ae:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     6b2:	6b 01       	movw	r12, r22
     6b4:	7c 01       	movw	r14, r24
     6b6:	d8 01       	movw	r26, r16
     6b8:	14 96       	adiw	r26, 0x04	; 4
     6ba:	6c 91       	ld	r22, X
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	60 53       	subi	r22, 0x30	; 48
     6c0:	71 09       	sbc	r23, r1
     6c2:	07 2e       	mov	r0, r23
     6c4:	00 0c       	add	r0, r0
     6c6:	88 0b       	sbc	r24, r24
     6c8:	99 0b       	sbc	r25, r25
     6ca:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     6ce:	9b 01       	movw	r18, r22
     6d0:	ac 01       	movw	r20, r24
     6d2:	6f 81       	ldd	r22, Y+7	; 0x07
     6d4:	78 85       	ldd	r23, Y+8	; 0x08
     6d6:	89 85       	ldd	r24, Y+9	; 0x09
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     6de:	2b 01       	movw	r4, r22
     6e0:	3c 01       	movw	r6, r24
     6e2:	27 e1       	ldi	r18, 0x17	; 23
     6e4:	37 eb       	ldi	r19, 0xB7	; 183
     6e6:	41 ed       	ldi	r20, 0xD1	; 209
     6e8:	58 e3       	ldi	r21, 0x38	; 56
     6ea:	c5 01       	movw	r24, r10
     6ec:	b4 01       	movw	r22, r8
     6ee:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	c3 01       	movw	r24, r6
     6f8:	b2 01       	movw	r22, r4
     6fa:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e7       	ldi	r20, 0x70	; 112
     704:	52 e4       	ldi	r21, 0x42	; 66
     706:	0e 94 e6 13 	call	0x27cc	; 0x27cc <__divsf3>
     70a:	9b 01       	movw	r18, r22
     70c:	ac 01       	movw	r20, r24
     70e:	c7 01       	movw	r24, r14
     710:	b6 01       	movw	r22, r12
     712:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     716:	60 93 ee 03 	sts	0x03EE, r22
     71a:	70 93 ef 03 	sts	0x03EF, r23
     71e:	80 93 f0 03 	sts	0x03F0, r24
     722:	90 93 f1 03 	sts	0x03F1, r25
     726:	be 01       	movw	r22, r28
     728:	6f 5f       	subi	r22, 0xFF	; 255
     72a:	7f 4f       	sbci	r23, 0xFF	; 255
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 15 18 	call	0x302a	; 0x302a <strtok>
     734:	90 93 e7 03 	sts	0x03E7, r25
     738:	80 93 e6 03 	sts	0x03E6, r24
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	8f 7d       	andi	r24, 0xDF	; 223
     742:	87 35       	cpi	r24, 0x57	; 87
     744:	89 f4       	brne	.+34     	; 0x768 <_Z9ParseDataPc+0x48e>
     746:	80 91 ee 03 	lds	r24, 0x03EE
     74a:	90 91 ef 03 	lds	r25, 0x03EF
     74e:	a0 91 f0 03 	lds	r26, 0x03F0
     752:	b0 91 f1 03 	lds	r27, 0x03F1
     756:	b0 58       	subi	r27, 0x80	; 128
     758:	80 93 ee 03 	sts	0x03EE, r24
     75c:	90 93 ef 03 	sts	0x03EF, r25
     760:	a0 93 f0 03 	sts	0x03F0, r26
     764:	b0 93 f1 03 	sts	0x03F1, r27
     768:	be 01       	movw	r22, r28
     76a:	6f 5f       	subi	r22, 0xFF	; 255
     76c:	7f 4f       	sbci	r23, 0xFF	; 255
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 15 18 	call	0x302a	; 0x302a <strtok>
     776:	be 01       	movw	r22, r28
     778:	6f 5f       	subi	r22, 0xFF	; 255
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 15 18 	call	0x302a	; 0x302a <strtok>
     784:	7c 01       	movw	r14, r24
     786:	fc 01       	movw	r30, r24
     788:	01 90       	ld	r0, Z+
     78a:	00 20       	and	r0, r0
     78c:	e9 f7       	brne	.-6      	; 0x788 <_Z9ParseDataPc+0x4ae>
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	e8 1b       	sub	r30, r24
     792:	f9 0b       	sbc	r31, r25
     794:	dc 01       	movw	r26, r24
     796:	6c 91       	ld	r22, X
     798:	e6 30       	cpi	r30, 0x06	; 6
     79a:	f1 05       	cpc	r31, r1
     79c:	08 f4       	brcc	.+2      	; 0x7a0 <_Z9ParseDataPc+0x4c6>
     79e:	5e c0       	rjmp	.+188    	; 0x85c <_Z9ParseDataPc+0x582>
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	60 53       	subi	r22, 0x30	; 48
     7a4:	71 09       	sbc	r23, r1
     7a6:	07 2e       	mov	r0, r23
     7a8:	00 0c       	add	r0, r0
     7aa:	88 0b       	sbc	r24, r24
     7ac:	99 0b       	sbc	r25, r25
     7ae:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	48 ec       	ldi	r20, 0xC8	; 200
     7b8:	52 e4       	ldi	r21, 0x42	; 66
     7ba:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     7be:	6b 83       	std	Y+3, r22	; 0x03
     7c0:	7c 83       	std	Y+4, r23	; 0x04
     7c2:	8d 83       	std	Y+5, r24	; 0x05
     7c4:	9e 83       	std	Y+6, r25	; 0x06
     7c6:	f7 01       	movw	r30, r14
     7c8:	61 81       	ldd	r22, Z+1	; 0x01
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	60 53       	subi	r22, 0x30	; 48
     7ce:	71 09       	sbc	r23, r1
     7d0:	07 2e       	mov	r0, r23
     7d2:	00 0c       	add	r0, r0
     7d4:	88 0b       	sbc	r24, r24
     7d6:	99 0b       	sbc	r25, r25
     7d8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e2       	ldi	r20, 0x20	; 32
     7e2:	51 e4       	ldi	r21, 0x41	; 65
     7e4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     7e8:	6f 83       	std	Y+7, r22	; 0x07
     7ea:	78 87       	std	Y+8, r23	; 0x08
     7ec:	89 87       	std	Y+9, r24	; 0x09
     7ee:	9a 87       	std	Y+10, r25	; 0x0a
     7f0:	d7 01       	movw	r26, r14
     7f2:	12 96       	adiw	r26, 0x02	; 2
     7f4:	6c 91       	ld	r22, X
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	60 53       	subi	r22, 0x30	; 48
     7fa:	71 09       	sbc	r23, r1
     7fc:	07 2e       	mov	r0, r23
     7fe:	00 0c       	add	r0, r0
     800:	88 0b       	sbc	r24, r24
     802:	99 0b       	sbc	r25, r25
     804:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     808:	2b 01       	movw	r4, r22
     80a:	3c 01       	movw	r6, r24
     80c:	f7 01       	movw	r30, r14
     80e:	64 81       	ldd	r22, Z+4	; 0x04
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	60 53       	subi	r22, 0x30	; 48
     814:	71 09       	sbc	r23, r1
     816:	07 2e       	mov	r0, r23
     818:	00 0c       	add	r0, r0
     81a:	88 0b       	sbc	r24, r24
     81c:	99 0b       	sbc	r25, r25
     81e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     822:	2d ec       	ldi	r18, 0xCD	; 205
     824:	3c ec       	ldi	r19, 0xCC	; 204
     826:	4c ec       	ldi	r20, 0xCC	; 204
     828:	5d e3       	ldi	r21, 0x3D	; 61
     82a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     82e:	4b 01       	movw	r8, r22
     830:	5c 01       	movw	r10, r24
     832:	d7 01       	movw	r26, r14
     834:	15 96       	adiw	r26, 0x05	; 5
     836:	6c 91       	ld	r22, X
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	60 53       	subi	r22, 0x30	; 48
     83c:	71 09       	sbc	r23, r1
     83e:	07 2e       	mov	r0, r23
     840:	00 0c       	add	r0, r0
     842:	88 0b       	sbc	r24, r24
     844:	99 0b       	sbc	r25, r25
     846:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     84a:	2a e0       	ldi	r18, 0x0A	; 10
     84c:	37 ed       	ldi	r19, 0xD7	; 215
     84e:	43 e2       	ldi	r20, 0x23	; 35
     850:	5c e3       	ldi	r21, 0x3C	; 60
     852:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     856:	6b 01       	movw	r12, r22
     858:	7c 01       	movw	r14, r24
     85a:	7e c0       	rjmp	.+252    	; 0x958 <__stack+0x59>
     85c:	dc 01       	movw	r26, r24
     85e:	13 96       	adiw	r26, 0x03	; 3
     860:	1c 91       	ld	r17, X
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	60 53       	subi	r22, 0x30	; 48
     866:	71 09       	sbc	r23, r1
     868:	07 2e       	mov	r0, r23
     86a:	00 0c       	add	r0, r0
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	35 97       	sbiw	r30, 0x05	; 5
     872:	09 f0       	breq	.+2      	; 0x876 <_Z9ParseDataPc+0x59c>
     874:	40 c0       	rjmp	.+128    	; 0x8f6 <_Z9ParseDataPc+0x61c>
     876:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e2       	ldi	r20, 0x20	; 32
     880:	51 e4       	ldi	r21, 0x41	; 65
     882:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     886:	6f 83       	std	Y+7, r22	; 0x07
     888:	78 87       	std	Y+8, r23	; 0x08
     88a:	89 87       	std	Y+9, r24	; 0x09
     88c:	9a 87       	std	Y+10, r25	; 0x0a
     88e:	f7 01       	movw	r30, r14
     890:	61 81       	ldd	r22, Z+1	; 0x01
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	60 53       	subi	r22, 0x30	; 48
     896:	71 09       	sbc	r23, r1
     898:	07 2e       	mov	r0, r23
     89a:	00 0c       	add	r0, r0
     89c:	88 0b       	sbc	r24, r24
     89e:	99 0b       	sbc	r25, r25
     8a0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     8a4:	2b 01       	movw	r4, r22
     8a6:	3c 01       	movw	r6, r24
     8a8:	61 2f       	mov	r22, r17
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	60 53       	subi	r22, 0x30	; 48
     8ae:	71 09       	sbc	r23, r1
     8b0:	07 2e       	mov	r0, r23
     8b2:	00 0c       	add	r0, r0
     8b4:	88 0b       	sbc	r24, r24
     8b6:	99 0b       	sbc	r25, r25
     8b8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     8bc:	2d ec       	ldi	r18, 0xCD	; 205
     8be:	3c ec       	ldi	r19, 0xCC	; 204
     8c0:	4c ec       	ldi	r20, 0xCC	; 204
     8c2:	5d e3       	ldi	r21, 0x3D	; 61
     8c4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     8c8:	4b 01       	movw	r8, r22
     8ca:	5c 01       	movw	r10, r24
     8cc:	d7 01       	movw	r26, r14
     8ce:	14 96       	adiw	r26, 0x04	; 4
     8d0:	6c 91       	ld	r22, X
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	60 53       	subi	r22, 0x30	; 48
     8d6:	71 09       	sbc	r23, r1
     8d8:	07 2e       	mov	r0, r23
     8da:	00 0c       	add	r0, r0
     8dc:	88 0b       	sbc	r24, r24
     8de:	99 0b       	sbc	r25, r25
     8e0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     8e4:	2a e0       	ldi	r18, 0x0A	; 10
     8e6:	37 ed       	ldi	r19, 0xD7	; 215
     8e8:	43 e2       	ldi	r20, 0x23	; 35
     8ea:	5c e3       	ldi	r21, 0x3C	; 60
     8ec:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     8f0:	6b 01       	movw	r12, r22
     8f2:	7c 01       	movw	r14, r24
     8f4:	2d c0       	rjmp	.+90     	; 0x950 <__stack+0x51>
     8f6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     8fa:	2b 01       	movw	r4, r22
     8fc:	3c 01       	movw	r6, r24
     8fe:	f7 01       	movw	r30, r14
     900:	62 81       	ldd	r22, Z+2	; 0x02
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	60 53       	subi	r22, 0x30	; 48
     906:	71 09       	sbc	r23, r1
     908:	07 2e       	mov	r0, r23
     90a:	00 0c       	add	r0, r0
     90c:	88 0b       	sbc	r24, r24
     90e:	99 0b       	sbc	r25, r25
     910:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     914:	2d ec       	ldi	r18, 0xCD	; 205
     916:	3c ec       	ldi	r19, 0xCC	; 204
     918:	4c ec       	ldi	r20, 0xCC	; 204
     91a:	5d e3       	ldi	r21, 0x3D	; 61
     91c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     920:	4b 01       	movw	r8, r22
     922:	5c 01       	movw	r10, r24
     924:	61 2f       	mov	r22, r17
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	60 53       	subi	r22, 0x30	; 48
     92a:	71 09       	sbc	r23, r1
     92c:	07 2e       	mov	r0, r23
     92e:	00 0c       	add	r0, r0
     930:	88 0b       	sbc	r24, r24
     932:	99 0b       	sbc	r25, r25
     934:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__floatsisf>
     938:	2a e0       	ldi	r18, 0x0A	; 10
     93a:	37 ed       	ldi	r19, 0xD7	; 215
     93c:	43 e2       	ldi	r20, 0x23	; 35
     93e:	5c e3       	ldi	r21, 0x3C	; 60
     940:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__mulsf3>
     944:	6b 01       	movw	r12, r22
     946:	7c 01       	movw	r14, r24
     948:	1f 82       	std	Y+7, r1	; 0x07
     94a:	18 86       	std	Y+8, r1	; 0x08
     94c:	19 86       	std	Y+9, r1	; 0x09
     94e:	1a 86       	std	Y+10, r1	; 0x0a
     950:	1b 82       	std	Y+3, r1	; 0x03
     952:	1c 82       	std	Y+4, r1	; 0x04
     954:	1d 82       	std	Y+5, r1	; 0x05
     956:	1e 82       	std	Y+6, r1	; 0x06
     958:	2f 81       	ldd	r18, Y+7	; 0x07
     95a:	38 85       	ldd	r19, Y+8	; 0x08
     95c:	49 85       	ldd	r20, Y+9	; 0x09
     95e:	5a 85       	ldd	r21, Y+10	; 0x0a
     960:	6b 81       	ldd	r22, Y+3	; 0x03
     962:	7c 81       	ldd	r23, Y+4	; 0x04
     964:	8d 81       	ldd	r24, Y+5	; 0x05
     966:	9e 81       	ldd	r25, Y+6	; 0x06
     968:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     96c:	a3 01       	movw	r20, r6
     96e:	92 01       	movw	r18, r4
     970:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     974:	a5 01       	movw	r20, r10
     976:	94 01       	movw	r18, r8
     978:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     97c:	a7 01       	movw	r20, r14
     97e:	96 01       	movw	r18, r12
     980:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__addsf3>
     984:	60 93 ea 03 	sts	0x03EA, r22
     988:	70 93 eb 03 	sts	0x03EB, r23
     98c:	80 93 ec 03 	sts	0x03EC, r24
     990:	90 93 ed 03 	sts	0x03ED, r25
     994:	2a 96       	adiw	r28, 0x0a	; 10
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	bf 90       	pop	r11
     9b2:	af 90       	pop	r10
     9b4:	9f 90       	pop	r9
     9b6:	8f 90       	pop	r8
     9b8:	7f 90       	pop	r7
     9ba:	6f 90       	pop	r6
     9bc:	5f 90       	pop	r5
     9be:	4f 90       	pop	r4
     9c0:	08 95       	ret

000009c2 <_GLOBAL__sub_I_DegLat>:
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	47 e0       	ldi	r20, 0x07	; 7
     9c6:	68 e0       	ldi	r22, 0x08	; 8
     9c8:	87 e4       	ldi	r24, 0x47	; 71
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	0e 94 cf 11 	call	0x239e	; 0x239e <_ZN14SoftwareSerialC1Ehhb>
     9d0:	86 ef       	ldi	r24, 0xF6	; 246
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <_ZN14TerminalShieldC1Ev>

000009d8 <_GLOBAL__sub_D_DegLat>:
     9d8:	87 e4       	ldi	r24, 0x47	; 71
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <_ZN14SoftwareSerialD1Ev>

000009e0 <_Z13getGPSMessagev>:
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	80 e8       	ldi	r24, 0x80	; 128
     9e6:	e6 e6       	ldi	r30, 0x66	; 102
     9e8:	f2 e0       	ldi	r31, 0x02	; 2
     9ea:	df 01       	movw	r26, r30
     9ec:	1d 92       	st	X+, r1
     9ee:	8a 95       	dec	r24
     9f0:	e9 f7       	brne	.-6      	; 0x9ec <_Z13getGPSMessagev+0xc>
     9f2:	c0 e0       	ldi	r28, 0x00	; 0
     9f4:	87 e4       	ldi	r24, 0x47	; 71
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN14SoftwareSerial4peekEv>
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	d1 f3       	breq	.-12     	; 0x9f4 <_Z13getGPSMessagev+0x14>
     a00:	87 e4       	ldi	r24, 0x47	; 71
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN14SoftwareSerial4readEv>
     a08:	ec 2f       	mov	r30, r28
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	ea 59       	subi	r30, 0x9A	; 154
     a0e:	fd 4f       	sbci	r31, 0xFD	; 253
     a10:	80 83       	st	Z, r24
     a12:	cc 23       	and	r28, r28
     a14:	29 f0       	breq	.+10     	; 0xa20 <_Z13getGPSMessagev+0x40>
     a16:	84 32       	cpi	r24, 0x24	; 36
     a18:	19 f4       	brne	.+6      	; 0xa20 <_Z13getGPSMessagev+0x40>
     a1a:	80 93 66 02 	sts	0x0266, r24
     a1e:	c0 e0       	ldi	r28, 0x00	; 0
     a20:	80 91 66 02 	lds	r24, 0x0266
     a24:	84 32       	cpi	r24, 0x24	; 36
     a26:	31 f7       	brne	.-52     	; 0x9f4 <_Z13getGPSMessagev+0x14>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	8c 0f       	add	r24, r28
     a2c:	ec 2f       	mov	r30, r28
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	ea 59       	subi	r30, 0x9A	; 154
     a32:	fd 4f       	sbci	r31, 0xFD	; 253
     a34:	90 81       	ld	r25, Z
     a36:	9a 30       	cpi	r25, 0x0A	; 10
     a38:	11 f0       	breq	.+4      	; 0xa3e <_Z13getGPSMessagev+0x5e>
     a3a:	c8 2f       	mov	r28, r24
     a3c:	db cf       	rjmp	.-74     	; 0x9f4 <_Z13getGPSMessagev+0x14>
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	fc 01       	movw	r30, r24
     a42:	ec 59       	subi	r30, 0x9C	; 156
     a44:	fd 4f       	sbci	r31, 0xFD	; 253
     a46:	10 82       	st	Z, r1
     a48:	ec 01       	movw	r28, r24
     a4a:	25 97       	sbiw	r28, 0x05	; 5
     a4c:	fe 01       	movw	r30, r28
     a4e:	ea 59       	subi	r30, 0x9A	; 154
     a50:	fd 4f       	sbci	r31, 0xFD	; 253
     a52:	20 81       	ld	r18, Z
     a54:	2a 32       	cpi	r18, 0x2A	; 42
     a56:	69 f6       	brne	.-102    	; 0x9f2 <_Z13getGPSMessagev+0x12>
     a58:	40 e1       	ldi	r20, 0x10	; 16
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	8e 59       	subi	r24, 0x9E	; 158
     a62:	9d 4f       	sbci	r25, 0xFD	; 253
     a64:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <strtol>
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	82 2f       	mov	r24, r18
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	8c 17       	cp	r24, r28
     a70:	9d 07       	cpc	r25, r29
     a72:	3c f4       	brge	.+14     	; 0xa82 <_Z13getGPSMessagev+0xa2>
     a74:	fc 01       	movw	r30, r24
     a76:	ea 59       	subi	r30, 0x9A	; 154
     a78:	fd 4f       	sbci	r31, 0xFD	; 253
     a7a:	80 81       	ld	r24, Z
     a7c:	68 27       	eor	r22, r24
     a7e:	2f 5f       	subi	r18, 0xFF	; 255
     a80:	f4 cf       	rjmp	.-24     	; 0xa6a <_Z13getGPSMessagev+0x8a>
     a82:	61 11       	cpse	r22, r1
     a84:	b6 cf       	rjmp	.-148    	; 0x9f2 <_Z13getGPSMessagev+0x12>
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <main>:
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	ee 97       	sbiw	r28, 0x3e	; 62
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	0e 94 ab 08 	call	0x1156	; 0x1156 <init>
     aa4:	26 e0       	ldi	r18, 0x06	; 6
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	52 ec       	ldi	r21, 0xC2	; 194
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	86 ef       	ldi	r24, 0xF6	; 246
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN14HardwareSerial5beginEmh>
     ab6:	8c e9       	ldi	r24, 0x9C	; 156
     ab8:	94 e0       	ldi	r25, 0x04	; 4
     aba:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN14OneSheeldClass5beginEv>
     abe:	40 e8       	ldi	r20, 0x80	; 128
     ac0:	55 e2       	ldi	r21, 0x25	; 37
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	87 e4       	ldi	r24, 0x47	; 71
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <_ZN14SoftwareSerial5beginEl>
     ace:	66 e0       	ldi	r22, 0x06	; 6
     ad0:	71 e0       	ldi	r23, 0x01	; 1
     ad2:	87 e4       	ldi	r24, 0x47	; 71
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN5Print7printlnEPKc>
     ada:	67 e1       	ldi	r22, 0x17	; 23
     adc:	71 e0       	ldi	r23, 0x01	; 1
     ade:	87 e4       	ldi	r24, 0x47	; 71
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN5Print7printlnEPKc>
     ae6:	60 e3       	ldi	r22, 0x30	; 48
     ae8:	71 e0       	ldi	r23, 0x01	; 1
     aea:	87 e4       	ldi	r24, 0x47	; 71
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN5Print7printlnEPKc>
     af2:	ce 01       	movw	r24, r28
     af4:	c1 96       	adiw	r24, 0x31	; 49
     af6:	9e af       	std	Y+62, r25	; 0x3e
     af8:	8d af       	std	Y+61, r24	; 0x3d
     afa:	4e 01       	movw	r8, r28
     afc:	95 e2       	ldi	r25, 0x25	; 37
     afe:	89 0e       	add	r8, r25
     b00:	91 1c       	adc	r9, r1
     b02:	3e 01       	movw	r6, r28
     b04:	a9 e1       	ldi	r26, 0x19	; 25
     b06:	6a 0e       	add	r6, r26
     b08:	71 1c       	adc	r7, r1
     b0a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <_Z13getGPSMessagev>
     b0e:	86 e6       	ldi	r24, 0x66	; 102
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z9ParseDataPc>
     b16:	20 90 f2 03 	lds	r2, 0x03F2
     b1a:	30 90 f3 03 	lds	r3, 0x03F3
     b1e:	40 90 f4 03 	lds	r4, 0x03F4
     b22:	50 90 f5 03 	lds	r5, 0x03F5
     b26:	60 91 ee 03 	lds	r22, 0x03EE
     b2a:	70 91 ef 03 	lds	r23, 0x03EF
     b2e:	80 91 f0 03 	lds	r24, 0x03F0
     b32:	90 91 f1 03 	lds	r25, 0x03F1
     b36:	2d e2       	ldi	r18, 0x2D	; 45
     b38:	a2 2e       	mov	r10, r18
     b3a:	23 ec       	ldi	r18, 0xC3	; 195
     b3c:	b2 2e       	mov	r11, r18
     b3e:	24 ee       	ldi	r18, 0xE4	; 228
     b40:	c2 2e       	mov	r12, r18
     b42:	21 e4       	ldi	r18, 0x41	; 65
     b44:	d2 2e       	mov	r13, r18
     b46:	18 e7       	ldi	r17, 0x78	; 120
     b48:	e1 2e       	mov	r14, r17
     b4a:	1c e9       	ldi	r17, 0x9C	; 156
     b4c:	f1 2e       	mov	r15, r17
     b4e:	02 ea       	ldi	r16, 0xA2	; 162
     b50:	12 ec       	ldi	r17, 0xC2	; 194
     b52:	a2 01       	movw	r20, r4
     b54:	91 01       	movw	r18, r2
     b56:	0e 94 0c 01 	call	0x218	; 0x218 <_Z17CalculateDistanceffff>
     b5a:	6b 01       	movw	r12, r22
     b5c:	7c 01       	movw	r14, r24
     b5e:	8e 01       	movw	r16, r28
     b60:	0f 5c       	subi	r16, 0xCF	; 207
     b62:	1f 4f       	sbci	r17, 0xFF	; 255
     b64:	24 e0       	ldi	r18, 0x04	; 4
     b66:	44 e0       	ldi	r20, 0x04	; 4
     b68:	c2 01       	movw	r24, r4
     b6a:	b1 01       	movw	r22, r2
     b6c:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <dtostrf>
     b70:	60 91 ee 03 	lds	r22, 0x03EE
     b74:	70 91 ef 03 	lds	r23, 0x03EF
     b78:	80 91 f0 03 	lds	r24, 0x03F0
     b7c:	90 91 f1 03 	lds	r25, 0x03F1
     b80:	84 01       	movw	r16, r8
     b82:	24 e0       	ldi	r18, 0x04	; 4
     b84:	44 e0       	ldi	r20, 0x04	; 4
     b86:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <dtostrf>
     b8a:	60 91 ea 03 	lds	r22, 0x03EA
     b8e:	70 91 eb 03 	lds	r23, 0x03EB
     b92:	80 91 ec 03 	lds	r24, 0x03EC
     b96:	90 91 ed 03 	lds	r25, 0x03ED
     b9a:	83 01       	movw	r16, r6
     b9c:	22 e0       	ldi	r18, 0x02	; 2
     b9e:	45 e0       	ldi	r20, 0x05	; 5
     ba0:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <dtostrf>
     ba4:	7f 92       	push	r7
     ba6:	6f 92       	push	r6
     ba8:	80 91 e7 03 	lds	r24, 0x03E7
     bac:	8f 93       	push	r24
     bae:	80 91 e6 03 	lds	r24, 0x03E6
     bb2:	8f 93       	push	r24
     bb4:	9f 92       	push	r9
     bb6:	8f 92       	push	r8
     bb8:	80 91 e9 03 	lds	r24, 0x03E9
     bbc:	8f 93       	push	r24
     bbe:	80 91 e8 03 	lds	r24, 0x03E8
     bc2:	8f 93       	push	r24
     bc4:	be ad       	ldd	r27, Y+62	; 0x3e
     bc6:	bf 93       	push	r27
     bc8:	8d ad       	ldd	r24, Y+61	; 0x3d
     bca:	8f 93       	push	r24
     bcc:	a2 e6       	ldi	r26, 0x62	; 98
     bce:	b1 e0       	ldi	r27, 0x01	; 1
     bd0:	bf 93       	push	r27
     bd2:	af 93       	push	r26
     bd4:	a6 ee       	ldi	r26, 0xE6	; 230
     bd6:	b2 e0       	ldi	r27, 0x02	; 2
     bd8:	bf 93       	push	r27
     bda:	af 93       	push	r26
     bdc:	0e 94 4c 18 	call	0x3098	; 0x3098 <sprintf>
     be0:	66 ee       	ldi	r22, 0xE6	; 230
     be2:	72 e0       	ldi	r23, 0x02	; 2
     be4:	8c ef       	ldi	r24, 0xFC	; 252
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN12PrintlnClass7printlnEPKc>
     bec:	8e 01       	movw	r16, r28
     bee:	03 5f       	subi	r16, 0xF3	; 243
     bf0:	1f 4f       	sbci	r17, 0xFF	; 255
     bf2:	24 e0       	ldi	r18, 0x04	; 4
     bf4:	44 e0       	ldi	r20, 0x04	; 4
     bf6:	c7 01       	movw	r24, r14
     bf8:	b6 01       	movw	r22, r12
     bfa:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <dtostrf>
     bfe:	b8 01       	movw	r22, r16
     c00:	8c ef       	ldi	r24, 0xFC	; 252
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN12PrintlnClass7printlnEPKc>
     c08:	0c 50       	subi	r16, 0x0C	; 12
     c0a:	11 09       	sbc	r17, r1
     c0c:	24 e0       	ldi	r18, 0x04	; 4
     c0e:	44 e0       	ldi	r20, 0x04	; 4
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	cb 01       	movw	r24, r22
     c16:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <dtostrf>
     c1a:	b8 01       	movw	r22, r16
     c1c:	8c ef       	ldi	r24, 0xFC	; 252
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <_ZN12PrintlnClass7printlnEPKc>
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	8d e4       	ldi	r24, 0x4D	; 77
     c30:	96 e0       	ldi	r25, 0x06	; 6
     c32:	89 2b       	or	r24, r25
     c34:	09 f4       	brne	.+2      	; 0xc38 <main+0x1ac>
     c36:	69 cf       	rjmp	.-302    	; 0xb0a <main+0x7e>
     c38:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_Z14serialEventRunv>
     c3c:	66 cf       	rjmp	.-308    	; 0xb0a <main+0x7e>

00000c3e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     c3e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     c40:	91 8d       	ldd	r25, Z+25	; 0x19
     c42:	22 8d       	ldd	r18, Z+26	; 0x1a
     c44:	89 2f       	mov	r24, r25
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	80 5c       	subi	r24, 0xC0	; 192
     c4a:	9f 4f       	sbci	r25, 0xFF	; 255
     c4c:	82 1b       	sub	r24, r18
     c4e:	91 09       	sbc	r25, r1
}
     c50:	8f 73       	andi	r24, 0x3F	; 63
     c52:	99 27       	eor	r25, r25
     c54:	08 95       	ret

00000c56 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     c56:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     c58:	91 8d       	ldd	r25, Z+25	; 0x19
     c5a:	82 8d       	ldd	r24, Z+26	; 0x1a
     c5c:	98 17       	cp	r25, r24
     c5e:	31 f0       	breq	.+12     	; 0xc6c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     c60:	82 8d       	ldd	r24, Z+26	; 0x1a
     c62:	e8 0f       	add	r30, r24
     c64:	f1 1d       	adc	r31, r1
     c66:	85 8d       	ldd	r24, Z+29	; 0x1d
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     c70:	08 95       	ret

00000c72 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     c72:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     c74:	91 8d       	ldd	r25, Z+25	; 0x19
     c76:	82 8d       	ldd	r24, Z+26	; 0x1a
     c78:	98 17       	cp	r25, r24
     c7a:	61 f0       	breq	.+24     	; 0xc94 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     c7c:	82 8d       	ldd	r24, Z+26	; 0x1a
     c7e:	df 01       	movw	r26, r30
     c80:	a8 0f       	add	r26, r24
     c82:	b1 1d       	adc	r27, r1
     c84:	5d 96       	adiw	r26, 0x1d	; 29
     c86:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     c88:	92 8d       	ldd	r25, Z+26	; 0x1a
     c8a:	9f 5f       	subi	r25, 0xFF	; 255
     c8c:	9f 73       	andi	r25, 0x3F	; 63
     c8e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     c94:	8f ef       	ldi	r24, 0xFF	; 255
     c96:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     c98:	08 95       	ret

00000c9a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     c9a:	8d eb       	ldi	r24, 0xBD	; 189
     c9c:	97 e0       	ldi	r25, 0x07	; 7
     c9e:	89 2b       	or	r24, r25
     ca0:	49 f0       	breq	.+18     	; 0xcb4 <_Z14serialEventRunv+0x1a>
     ca2:	8d eb       	ldi	r24, 0xBD	; 189
     ca4:	9d e0       	ldi	r25, 0x0D	; 13
     ca6:	89 2b       	or	r24, r25
     ca8:	29 f0       	breq	.+10     	; 0xcb4 <_Z14serialEventRunv+0x1a>
     caa:	0e 94 bd 07 	call	0xf7a	; 0xf7a <_Z17Serial0_availablev>
     cae:	81 11       	cpse	r24, r1
     cb0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_Z11serialEventv>
     cb4:	08 95       	ret

00000cb6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     cb6:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     cb8:	84 8d       	ldd	r24, Z+28	; 0x1c
     cba:	df 01       	movw	r26, r30
     cbc:	a8 0f       	add	r26, r24
     cbe:	b1 1d       	adc	r27, r1
     cc0:	a3 5a       	subi	r26, 0xA3	; 163
     cc2:	bf 4f       	sbci	r27, 0xFF	; 255
     cc4:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     cc6:	24 8d       	ldd	r18, Z+28	; 0x1c
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	2f 5f       	subi	r18, 0xFF	; 255
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	2f 73       	andi	r18, 0x3F	; 63
     cd0:	30 78       	andi	r19, 0x80	; 128
     cd2:	33 23       	and	r19, r19
     cd4:	34 f4       	brge	.+12     	; 0xce2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     cd6:	21 50       	subi	r18, 0x01	; 1
     cd8:	31 09       	sbc	r19, r1
     cda:	20 6c       	ori	r18, 0xC0	; 192
     cdc:	3f 6f       	ori	r19, 0xFF	; 255
     cde:	2f 5f       	subi	r18, 0xFF	; 255
     ce0:	3f 4f       	sbci	r19, 0xFF	; 255
     ce2:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     ce4:	a6 89       	ldd	r26, Z+22	; 0x16
     ce6:	b7 89       	ldd	r27, Z+23	; 0x17
     ce8:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     cea:	a0 89       	ldd	r26, Z+16	; 0x10
     cec:	b1 89       	ldd	r27, Z+17	; 0x11
     cee:	8c 91       	ld	r24, X
     cf0:	80 64       	ori	r24, 0x40	; 64
     cf2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     cf4:	93 8d       	ldd	r25, Z+27	; 0x1b
     cf6:	84 8d       	ldd	r24, Z+28	; 0x1c
     cf8:	98 13       	cpse	r25, r24
     cfa:	06 c0       	rjmp	.+12     	; 0xd08 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     cfc:	02 88       	ldd	r0, Z+18	; 0x12
     cfe:	f3 89       	ldd	r31, Z+19	; 0x13
     d00:	e0 2d       	mov	r30, r0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7d       	andi	r24, 0xDF	; 223
     d06:	80 83       	st	Z, r24
     d08:	08 95       	ret

00000d0a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     d10:	88 8d       	ldd	r24, Y+24	; 0x18
     d12:	81 11       	cpse	r24, r1
     d14:	0f c0       	rjmp	.+30     	; 0xd34 <_ZN14HardwareSerial5flushEv+0x2a>
     d16:	18 c0       	rjmp	.+48     	; 0xd48 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	07 fc       	sbrc	r0, 7
     d1c:	0d c0       	rjmp	.+26     	; 0xd38 <_ZN14HardwareSerial5flushEv+0x2e>
     d1e:	90 81       	ld	r25, Z
     d20:	95 ff       	sbrs	r25, 5
     d22:	0a c0       	rjmp	.+20     	; 0xd38 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     d24:	a8 89       	ldd	r26, Y+16	; 0x10
     d26:	b9 89       	ldd	r27, Y+17	; 0x11
     d28:	8c 91       	ld	r24, X
     d2a:	85 ff       	sbrs	r24, 5
     d2c:	05 c0       	rjmp	.+10     	; 0xd38 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
     d2e:	ce 01       	movw	r24, r28
     d30:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     d34:	ea 89       	ldd	r30, Y+18	; 0x12
     d36:	fb 89       	ldd	r31, Y+19	; 0x13
     d38:	90 81       	ld	r25, Z
     d3a:	95 fd       	sbrc	r25, 5
     d3c:	ed cf       	rjmp	.-38     	; 0xd18 <_ZN14HardwareSerial5flushEv+0xe>
     d3e:	a8 89       	ldd	r26, Y+16	; 0x10
     d40:	b9 89       	ldd	r27, Y+17	; 0x11
     d42:	8c 91       	ld	r24, X
     d44:	86 ff       	sbrs	r24, 6
     d46:	e8 cf       	rjmp	.-48     	; 0xd18 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	fc 01       	movw	r30, r24
  _written = true;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     d5c:	93 8d       	ldd	r25, Z+27	; 0x1b
     d5e:	84 8d       	ldd	r24, Z+28	; 0x1c
     d60:	98 13       	cpse	r25, r24
     d62:	22 c0       	rjmp	.+68     	; 0xda8 <_ZN14HardwareSerial5writeEh+0x5a>
     d64:	a0 89       	ldd	r26, Z+16	; 0x10
     d66:	b1 89       	ldd	r27, Z+17	; 0x11
     d68:	8c 91       	ld	r24, X
     d6a:	85 fd       	sbrc	r24, 5
     d6c:	2f c0       	rjmp	.+94     	; 0xdcc <_ZN14HardwareSerial5writeEh+0x7e>
     d6e:	1c c0       	rjmp	.+56     	; 0xda8 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	07 fc       	sbrc	r0, 7
     d74:	08 c0       	rjmp	.+16     	; 0xd86 <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     d76:	e8 89       	ldd	r30, Y+16	; 0x10
     d78:	f9 89       	ldd	r31, Y+17	; 0x11
     d7a:	80 81       	ld	r24, Z
     d7c:	85 ff       	sbrs	r24, 5
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     d86:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d88:	09 17       	cp	r16, r25
     d8a:	91 f3       	breq	.-28     	; 0xd70 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     d8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d8e:	fe 01       	movw	r30, r28
     d90:	e8 0f       	add	r30, r24
     d92:	f1 1d       	adc	r31, r1
     d94:	e3 5a       	subi	r30, 0xA3	; 163
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     d9a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     d9c:	ea 89       	ldd	r30, Y+18	; 0x12
     d9e:	fb 89       	ldd	r31, Y+19	; 0x13
     da0:	80 81       	ld	r24, Z
     da2:	80 62       	ori	r24, 0x20	; 32
     da4:	80 83       	st	Z, r24
  
  return 1;
     da6:	1b c0       	rjmp	.+54     	; 0xdde <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     da8:	23 8d       	ldd	r18, Z+27	; 0x1b
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	2f 5f       	subi	r18, 0xFF	; 255
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
     db0:	2f 73       	andi	r18, 0x3F	; 63
     db2:	30 78       	andi	r19, 0x80	; 128
     db4:	33 23       	and	r19, r19
     db6:	34 f4       	brge	.+12     	; 0xdc4 <_ZN14HardwareSerial5writeEh+0x76>
     db8:	21 50       	subi	r18, 0x01	; 1
     dba:	31 09       	sbc	r19, r1
     dbc:	20 6c       	ori	r18, 0xC0	; 192
     dbe:	3f 6f       	ori	r19, 0xFF	; 255
     dc0:	2f 5f       	subi	r18, 0xFF	; 255
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	16 2f       	mov	r17, r22
     dc6:	ef 01       	movw	r28, r30
     dc8:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     dca:	dd cf       	rjmp	.-70     	; 0xd86 <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     dcc:	a6 89       	ldd	r26, Z+22	; 0x16
     dce:	b7 89       	ldd	r27, Z+23	; 0x17
     dd0:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     dd2:	00 88       	ldd	r0, Z+16	; 0x10
     dd4:	f1 89       	ldd	r31, Z+17	; 0x11
     dd6:	e0 2d       	mov	r30, r0
     dd8:	80 81       	ld	r24, Z
     dda:	80 64       	ori	r24, 0x40	; 64
     ddc:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	ec 01       	movw	r28, r24
     e00:	6a 01       	movw	r12, r20
     e02:	7b 01       	movw	r14, r22
     e04:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     e06:	e8 89       	ldd	r30, Y+16	; 0x10
     e08:	f9 89       	ldd	r31, Y+17	; 0x11
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e0e:	41 15       	cp	r20, r1
     e10:	51 4e       	sbci	r21, 0xE1	; 225
     e12:	61 05       	cpc	r22, r1
     e14:	71 05       	cpc	r23, r1
     e16:	b1 f0       	breq	.+44     	; 0xe44 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	79 e0       	ldi	r23, 0x09	; 9
     e1c:	8d e3       	ldi	r24, 0x3D	; 61
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	a7 01       	movw	r20, r14
     e22:	96 01       	movw	r18, r12
     e24:	0e 94 32 13 	call	0x2664	; 0x2664 <__udivmodsi4>
     e28:	89 01       	movw	r16, r18
     e2a:	9a 01       	movw	r18, r20
     e2c:	01 50       	subi	r16, 0x01	; 1
     e2e:	11 09       	sbc	r17, r1
     e30:	21 09       	sbc	r18, r1
     e32:	31 09       	sbc	r19, r1
     e34:	36 95       	lsr	r19
     e36:	27 95       	ror	r18
     e38:	17 95       	ror	r17
     e3a:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     e3c:	01 15       	cp	r16, r1
     e3e:	80 e1       	ldi	r24, 0x10	; 16
     e40:	18 07       	cpc	r17, r24
     e42:	a8 f0       	brcs	.+42     	; 0xe6e <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
     e44:	e8 89       	ldd	r30, Y+16	; 0x10
     e46:	f9 89       	ldd	r31, Y+17	; 0x11
     e48:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     e4a:	60 e8       	ldi	r22, 0x80	; 128
     e4c:	74 e8       	ldi	r23, 0x84	; 132
     e4e:	8e e1       	ldi	r24, 0x1E	; 30
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a7 01       	movw	r20, r14
     e54:	96 01       	movw	r18, r12
     e56:	0e 94 32 13 	call	0x2664	; 0x2664 <__udivmodsi4>
     e5a:	da 01       	movw	r26, r20
     e5c:	c9 01       	movw	r24, r18
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	a1 09       	sbc	r26, r1
     e62:	b1 09       	sbc	r27, r1
     e64:	b6 95       	lsr	r27
     e66:	a7 95       	ror	r26
     e68:	97 95       	ror	r25
     e6a:	87 95       	ror	r24
     e6c:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     e6e:	ec 85       	ldd	r30, Y+12	; 0x0c
     e70:	fd 85       	ldd	r31, Y+13	; 0x0d
     e72:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
     e74:	ee 85       	ldd	r30, Y+14	; 0x0e
     e76:	ff 85       	ldd	r31, Y+15	; 0x0f
     e78:	00 83       	st	Z, r16

  _written = false;
     e7a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     e7c:	ec 89       	ldd	r30, Y+20	; 0x14
     e7e:	fd 89       	ldd	r31, Y+21	; 0x15
     e80:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     e82:	ea 89       	ldd	r30, Y+18	; 0x12
     e84:	fb 89       	ldd	r31, Y+19	; 0x13
     e86:	80 81       	ld	r24, Z
     e88:	80 61       	ori	r24, 0x10	; 16
     e8a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     e8c:	ea 89       	ldd	r30, Y+18	; 0x12
     e8e:	fb 89       	ldd	r31, Y+19	; 0x13
     e90:	80 81       	ld	r24, Z
     e92:	88 60       	ori	r24, 0x08	; 8
     e94:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     e96:	ea 89       	ldd	r30, Y+18	; 0x12
     e98:	fb 89       	ldd	r31, Y+19	; 0x13
     e9a:	80 81       	ld	r24, Z
     e9c:	80 68       	ori	r24, 0x80	; 128
     e9e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     ea0:	ea 89       	ldd	r30, Y+18	; 0x12
     ea2:	fb 89       	ldd	r31, Y+19	; 0x13
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 7d       	andi	r24, 0xDF	; 223
     ea8:	80 83       	st	Z, r24
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	08 95       	ret

00000ebe <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	2f 93       	push	r18
     eca:	8f 93       	push	r24
     ecc:	9f 93       	push	r25
     ece:	af 93       	push	r26
     ed0:	bf 93       	push	r27
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     ed6:	e0 91 06 04 	lds	r30, 0x0406
     eda:	f0 91 07 04 	lds	r31, 0x0407
     ede:	80 81       	ld	r24, Z
     ee0:	82 fd       	sbrc	r24, 2
     ee2:	14 c0       	rjmp	.+40     	; 0xf0c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     ee4:	e6 ef       	ldi	r30, 0xF6	; 246
     ee6:	f3 e0       	ldi	r31, 0x03	; 3
     ee8:	a6 89       	ldd	r26, Z+22	; 0x16
     eea:	b7 89       	ldd	r27, Z+23	; 0x17
     eec:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     eee:	81 8d       	ldd	r24, Z+25	; 0x19
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     ef4:	92 8d       	ldd	r25, Z+26	; 0x1a
     ef6:	89 17       	cp	r24, r25
     ef8:	71 f0       	breq	.+28     	; 0xf16 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     efa:	df 01       	movw	r26, r30
     efc:	e1 8d       	ldd	r30, Z+25	; 0x19
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	ea 50       	subi	r30, 0x0A	; 10
     f02:	fc 4f       	sbci	r31, 0xFC	; 252
     f04:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     f06:	59 96       	adiw	r26, 0x19	; 25
     f08:	8c 93       	st	X, r24
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     f0c:	e0 91 0c 04 	lds	r30, 0x040C
     f10:	f0 91 0d 04 	lds	r31, 0x040D
     f14:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     f16:	ff 91       	pop	r31
     f18:	ef 91       	pop	r30
     f1a:	bf 91       	pop	r27
     f1c:	af 91       	pop	r26
     f1e:	9f 91       	pop	r25
     f20:	8f 91       	pop	r24
     f22:	2f 91       	pop	r18
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	2f 93       	push	r18
     f3a:	3f 93       	push	r19
     f3c:	4f 93       	push	r20
     f3e:	5f 93       	push	r21
     f40:	6f 93       	push	r22
     f42:	7f 93       	push	r23
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
     f4c:	ef 93       	push	r30
     f4e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     f50:	86 ef       	ldi	r24, 0xF6	; 246
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     f7a:	86 ef       	ldi	r24, 0xF6	; 246
     f7c:	93 e0       	ldi	r25, 0x03	; 3
     f7e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_ZN14HardwareSerial9availableEv>
     f82:	21 e0       	ldi	r18, 0x01	; 1
     f84:	89 2b       	or	r24, r25
     f86:	09 f4       	brne	.+2      	; 0xf8a <_Z17Serial0_availablev+0x10>
     f88:	20 e0       	ldi	r18, 0x00	; 0
}
     f8a:	82 2f       	mov	r24, r18
     f8c:	08 95       	ret

00000f8e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     f8e:	e6 ef       	ldi	r30, 0xF6	; 246
     f90:	f3 e0       	ldi	r31, 0x03	; 3
     f92:	13 82       	std	Z+3, r1	; 0x03
     f94:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     f96:	88 ee       	ldi	r24, 0xE8	; 232
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	84 83       	std	Z+4, r24	; 0x04
     fa0:	95 83       	std	Z+5, r25	; 0x05
     fa2:	a6 83       	std	Z+6, r26	; 0x06
     fa4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     fa6:	8b e7       	ldi	r24, 0x7B	; 123
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24
     fae:	85 ec       	ldi	r24, 0xC5	; 197
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	95 87       	std	Z+13, r25	; 0x0d
     fb4:	84 87       	std	Z+12, r24	; 0x0c
     fb6:	84 ec       	ldi	r24, 0xC4	; 196
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	97 87       	std	Z+15, r25	; 0x0f
     fbc:	86 87       	std	Z+14, r24	; 0x0e
     fbe:	80 ec       	ldi	r24, 0xC0	; 192
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	91 8b       	std	Z+17, r25	; 0x11
     fc4:	80 8b       	std	Z+16, r24	; 0x10
     fc6:	81 ec       	ldi	r24, 0xC1	; 193
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	93 8b       	std	Z+19, r25	; 0x13
     fcc:	82 8b       	std	Z+18, r24	; 0x12
     fce:	82 ec       	ldi	r24, 0xC2	; 194
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	95 8b       	std	Z+21, r25	; 0x15
     fd4:	84 8b       	std	Z+20, r24	; 0x14
     fd6:	86 ec       	ldi	r24, 0xC6	; 198
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	97 8b       	std	Z+23, r25	; 0x17
     fdc:	86 8b       	std	Z+22, r24	; 0x16
     fde:	11 8e       	std	Z+25, r1	; 0x19
     fe0:	12 8e       	std	Z+26, r1	; 0x1a
     fe2:	13 8e       	std	Z+27, r1	; 0x1b
     fe4:	14 8e       	std	Z+28, r1	; 0x1c
     fe6:	08 95       	ret

00000fe8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
     ff8:	41 15       	cp	r20, r1
     ffa:	51 05       	cpc	r21, r1
     ffc:	b1 f0       	breq	.+44     	; 0x102a <_ZN5Print5writeEPKhj+0x42>
     ffe:	8c 01       	movw	r16, r24
    1000:	e6 2e       	mov	r14, r22
    1002:	f7 2e       	mov	r15, r23
    1004:	ea 01       	movw	r28, r20
    1006:	c1 2c       	mov	r12, r1
    1008:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
    100a:	d7 01       	movw	r26, r14
    100c:	6d 91       	ld	r22, X+
    100e:	7d 01       	movw	r14, r26
    1010:	d8 01       	movw	r26, r16
    1012:	ed 91       	ld	r30, X+
    1014:	fc 91       	ld	r31, X
    1016:	01 90       	ld	r0, Z+
    1018:	f0 81       	ld	r31, Z
    101a:	e0 2d       	mov	r30, r0
    101c:	c8 01       	movw	r24, r16
    101e:	09 95       	icall
    1020:	c8 0e       	add	r12, r24
    1022:	d9 1e       	adc	r13, r25
    1024:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1026:	89 f7       	brne	.-30     	; 0x100a <_ZN5Print5writeEPKhj+0x22>
    1028:	02 c0       	rjmp	.+4      	; 0x102e <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    102a:	c1 2c       	mov	r12, r1
    102c:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    102e:	c6 01       	movw	r24, r12
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	08 95       	ret

00001042 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1042:	61 15       	cp	r22, r1
    1044:	71 05       	cpc	r23, r1
    1046:	81 f0       	breq	.+32     	; 0x1068 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    1048:	fb 01       	movw	r30, r22
    104a:	01 90       	ld	r0, Z+
    104c:	00 20       	and	r0, r0
    104e:	e9 f7       	brne	.-6      	; 0x104a <_ZN5Print5printEPKc+0x8>
    1050:	31 97       	sbiw	r30, 0x01	; 1
    1052:	af 01       	movw	r20, r30
    1054:	46 1b       	sub	r20, r22
    1056:	57 0b       	sbc	r21, r23
    1058:	dc 01       	movw	r26, r24
    105a:	ed 91       	ld	r30, X+
    105c:	fc 91       	ld	r31, X
    105e:	02 80       	ldd	r0, Z+2	; 0x02
    1060:	f3 81       	ldd	r31, Z+3	; 0x03
    1062:	e0 2d       	mov	r30, r0
    1064:	09 95       	icall
    1066:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
    106c:	08 95       	ret

0000106e <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
    106e:	dc 01       	movw	r26, r24
    1070:	ed 91       	ld	r30, X+
    1072:	fc 91       	ld	r31, X
    1074:	02 80       	ldd	r0, Z+2	; 0x02
    1076:	f3 81       	ldd	r31, Z+3	; 0x03
    1078:	e0 2d       	mov	r30, r0
    107a:	42 e0       	ldi	r20, 0x02	; 2
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	67 e8       	ldi	r22, 0x87	; 135
    1080:	71 e0       	ldi	r23, 0x01	; 1
    1082:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
    1084:	08 95       	ret

00001086 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	ec 01       	movw	r28, r24
  size_t n = print(c);
    1090:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
    1094:	8c 01       	movw	r16, r24
  n += println();
    1096:	ce 01       	movw	r24, r28
    1098:	0e 94 37 08 	call	0x106e	; 0x106e <_ZN5Print7printlnEv>
  return n;
}
    109c:	80 0f       	add	r24, r16
    109e:	91 1f       	adc	r25, r17
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	08 95       	ret

000010aa <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    10aa:	1f 92       	push	r1
    10ac:	0f 92       	push	r0
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	0f 92       	push	r0
    10b2:	11 24       	eor	r1, r1
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	af 93       	push	r26
    10be:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    10c0:	80 91 94 04 	lds	r24, 0x0494
    10c4:	90 91 95 04 	lds	r25, 0x0495
    10c8:	a0 91 96 04 	lds	r26, 0x0496
    10cc:	b0 91 97 04 	lds	r27, 0x0497
	unsigned char f = timer0_fract;
    10d0:	30 91 93 04 	lds	r19, 0x0493

	m += MILLIS_INC;
	f += FRACT_INC;
    10d4:	23 e0       	ldi	r18, 0x03	; 3
    10d6:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    10d8:	2d 37       	cpi	r18, 0x7D	; 125
    10da:	20 f4       	brcc	.+8      	; 0x10e4 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	a1 1d       	adc	r26, r1
    10e0:	b1 1d       	adc	r27, r1
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    10e4:	26 e8       	ldi	r18, 0x86	; 134
    10e6:	23 0f       	add	r18, r19
		m += 1;
    10e8:	02 96       	adiw	r24, 0x02	; 2
    10ea:	a1 1d       	adc	r26, r1
    10ec:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    10ee:	20 93 93 04 	sts	0x0493, r18
	timer0_millis = m;
    10f2:	80 93 94 04 	sts	0x0494, r24
    10f6:	90 93 95 04 	sts	0x0495, r25
    10fa:	a0 93 96 04 	sts	0x0496, r26
    10fe:	b0 93 97 04 	sts	0x0497, r27
	timer0_overflow_count++;
    1102:	80 91 98 04 	lds	r24, 0x0498
    1106:	90 91 99 04 	lds	r25, 0x0499
    110a:	a0 91 9a 04 	lds	r26, 0x049A
    110e:	b0 91 9b 04 	lds	r27, 0x049B
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	a1 1d       	adc	r26, r1
    1116:	b1 1d       	adc	r27, r1
    1118:	80 93 98 04 	sts	0x0498, r24
    111c:	90 93 99 04 	sts	0x0499, r25
    1120:	a0 93 9a 04 	sts	0x049A, r26
    1124:	b0 93 9b 04 	sts	0x049B, r27
}
    1128:	bf 91       	pop	r27
    112a:	af 91       	pop	r26
    112c:	9f 91       	pop	r25
    112e:	8f 91       	pop	r24
    1130:	3f 91       	pop	r19
    1132:	2f 91       	pop	r18
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    113e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1140:	f8 94       	cli
	m = timer0_millis;
    1142:	60 91 94 04 	lds	r22, 0x0494
    1146:	70 91 95 04 	lds	r23, 0x0495
    114a:	80 91 96 04 	lds	r24, 0x0496
    114e:	90 91 97 04 	lds	r25, 0x0497
	SREG = oldSREG;
    1152:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1154:	08 95       	ret

00001156 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1156:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1158:	84 b5       	in	r24, 0x24	; 36
    115a:	82 60       	ori	r24, 0x02	; 2
    115c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    115e:	84 b5       	in	r24, 0x24	; 36
    1160:	81 60       	ori	r24, 0x01	; 1
    1162:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1164:	85 b5       	in	r24, 0x25	; 37
    1166:	82 60       	ori	r24, 0x02	; 2
    1168:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    116a:	85 b5       	in	r24, 0x25	; 37
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1170:	ee e6       	ldi	r30, 0x6E	; 110
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	81 60       	ori	r24, 0x01	; 1
    1178:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    117a:	e1 e8       	ldi	r30, 0x81	; 129
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1180:	80 81       	ld	r24, Z
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1186:	80 81       	ld	r24, Z
    1188:	81 60       	ori	r24, 0x01	; 1
    118a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    118c:	e0 e8       	ldi	r30, 0x80	; 128
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1196:	e1 eb       	ldi	r30, 0xB1	; 177
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	84 60       	ori	r24, 0x04	; 4
    119e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    11a0:	e0 eb       	ldi	r30, 0xB0	; 176
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	81 60       	ori	r24, 0x01	; 1
    11a8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    11aa:	ea e7       	ldi	r30, 0x7A	; 122
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	84 60       	ori	r24, 0x04	; 4
    11b2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    11b4:	80 81       	ld	r24, Z
    11b6:	82 60       	ori	r24, 0x02	; 2
    11b8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    11ba:	80 81       	ld	r24, Z
    11bc:	81 60       	ori	r24, 0x01	; 1
    11be:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    11c0:	80 81       	ld	r24, Z
    11c2:	80 68       	ori	r24, 0x80	; 128
    11c4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    11c6:	10 92 c1 00 	sts	0x00C1, r1
    11ca:	08 95       	ret

000011cc <_ZN14OneSheeldClassC1ER6Stream>:
// #ifdef INTERNET_SHIELD
byte OneSheeldClass::requestsCounter=0;
HttpRequest ** OneSheeldClass::requestsArray=(HttpRequest**)malloc(sizeof(HttpRequest*)*MAX_NO_OF_REQUESTS);
// #endif
//Class Constructor
OneSheeldClass::OneSheeldClass(Stream &s) :OneSheeldSerial(s)
    11cc:	fc 01       	movw	r30, r24
    11ce:	71 83       	std	Z+1, r23	; 0x01
    11d0:	60 83       	st	Z, r22
{
      shield=0;
    11d2:	16 86       	std	Z+14, r1	; 0x0e
      instance=0;
    11d4:	17 86       	std	Z+15, r1	; 0x0f
      functions=0;
    11d6:	10 8a       	std	Z+16, r1	; 0x10
      counter=0;
    11d8:	11 8a       	std	Z+17, r1	; 0x11
      argumentcounter=0;
    11da:	12 8a       	std	Z+18, r1	; 0x12
      datalengthcounter=0;
    11dc:	13 8a       	std	Z+19, r1	; 0x13
      argumentnumber=0;
    11de:	14 8a       	std	Z+20, r1	; 0x14
      endFrame=0;
    11e0:	11 8e       	std	Z+25, r1	; 0x19
      numberOfDataMalloced=0;
    11e2:	15 86       	std	Z+13, r1	; 0x0d
      isArgumentsNumberMalloced=false;
    11e4:	16 82       	std	Z+6, r1	; 0x06
      isArgumentLengthMalloced=false;
    11e6:	17 82       	std	Z+7, r1	; 0x07
      callbacksInterrupts=false;
    11e8:	10 92 12 05 	sts	0x0512, r1
      framestart =false;
    11ec:	14 86       	std	Z+12, r1	; 0x0c
      isOneSheeldConnected =false;
    11ee:	10 86       	std	Z+8, r1	; 0x08
      isAppConnectionCallBack = false;
    11f0:	11 86       	std	Z+9, r1	; 0x09
      isShieldFrameCallback = false;
    11f2:	12 86       	std	Z+10, r1	; 0x0a
      isSerialDataCallback = false;
    11f4:	13 86       	std	Z+11, r1	; 0x0b
    11f6:	08 95       	ret

000011f8 <_ZN14OneSheeldClass5beginEl>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    11f8:	26 e0       	ldi	r18, 0x06	; 6
    11fa:	86 ef       	ldi	r24, 0xF6	; 246
    11fc:	93 e0       	ldi	r25, 0x03	; 3
    11fe:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN14HardwareSerial5beginEmh>
    1202:	08 95       	ret

00001204 <_ZN14OneSheeldClass17addToShieldsArrayEP12ShieldParent>:
  // #endif
}

void OneSheeldClass::addToShieldsArray(ShieldParent * shield)
{
  if(shieldsCounter==SHIELDS_NO) return;
    1204:	e0 91 18 05 	lds	r30, 0x0518
    1208:	e9 32       	cpi	r30, 0x29	; 41
    120a:	59 f0       	breq	.+22     	; 0x1222 <_ZN14OneSheeldClass17addToShieldsArrayEP12ShieldParent+0x1e>
  shieldsArray[shieldsCounter++] = shield;  
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	2e 0f       	add	r18, r30
    1210:	20 93 18 05 	sts	0x0518, r18
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	e1 54       	subi	r30, 0x41	; 65
    121c:	fb 4f       	sbci	r31, 0xFB	; 251
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	80 83       	st	Z, r24
    1222:	08 95       	ret

00001224 <_ZN14OneSheeldClass11getShieldIdEv>:
}
//Shield_ID Getter
byte OneSheeldClass::getShieldId()
{
  return shield;
} 
    1224:	fc 01       	movw	r30, r24
    1226:	86 85       	ldd	r24, Z+14	; 0x0e
    1228:	08 95       	ret

0000122a <_ZN14OneSheeldClass13getFunctionIdEv>:
} 
//Funtcion_ID Getter
byte OneSheeldClass::getFunctionId()
{
  return functions;
}
    122a:	fc 01       	movw	r30, r24
    122c:	80 89       	ldd	r24, Z+16	; 0x10
    122e:	08 95       	ret

00001230 <_ZN14OneSheeldClass17getArgumentLengthEh>:
  return argumentnumber;
} 
//ArgumentLength Getter
byte OneSheeldClass::getArgumentLength(byte x)
{
  return argumentL[x];
    1230:	dc 01       	movw	r26, r24
    1232:	57 96       	adiw	r26, 0x17	; 23
    1234:	ed 91       	ld	r30, X+
    1236:	fc 91       	ld	r31, X
    1238:	58 97       	sbiw	r26, 0x18	; 24
    123a:	e6 0f       	add	r30, r22
    123c:	f1 1d       	adc	r31, r1
}
    123e:	80 81       	ld	r24, Z
    1240:	08 95       	ret

00001242 <_ZN14OneSheeldClass15getArgumentDataEh>:
//Data Getter
byte * OneSheeldClass::getArgumentData(byte x)
{
  if(argumentL[x]!=0)
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	dc 01       	movw	r26, r24
    1246:	57 96       	adiw	r26, 0x17	; 23
    1248:	ed 91       	ld	r30, X+
    124a:	fc 91       	ld	r31, X
    124c:	58 97       	sbiw	r26, 0x18	; 24
    124e:	e6 0f       	add	r30, r22
    1250:	f7 1f       	adc	r31, r23
    1252:	20 81       	ld	r18, Z
    1254:	22 23       	and	r18, r18
    1256:	59 f0       	breq	.+22     	; 0x126e <_ZN14OneSheeldClass15getArgumentDataEh+0x2c>
    return arguments[x];
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	55 96       	adiw	r26, 0x15	; 21
    125e:	ed 91       	ld	r30, X+
    1260:	fc 91       	ld	r31, X
    1262:	56 97       	sbiw	r26, 0x16	; 22
    1264:	e6 0f       	add	r30, r22
    1266:	f7 1f       	adc	r31, r23
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	08 95       	ret
  else return NULL;
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
}
    1272:	08 95       	ret

00001274 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>:
    if(isSerialDataCallback)
      serialDataCallback(data);
  }
}

void OneSheeldClass::freeMemoryAllocated(){
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	8c 01       	movw	r16, r24
  framestart=false;
    127e:	dc 01       	movw	r26, r24
    1280:	1c 96       	adiw	r26, 0x0c	; 12
    1282:	1c 92       	st	X, r1
    1284:	1c 97       	sbiw	r26, 0x0c	; 12
  if(isArgumentsNumberMalloced){
    1286:	16 96       	adiw	r26, 0x06	; 6
    1288:	8c 91       	ld	r24, X
    128a:	16 97       	sbiw	r26, 0x06	; 6
    128c:	88 23       	and	r24, r24
    128e:	a9 f1       	breq	.+106    	; 0x12fa <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0x86>
          for(int i=0;i<numberOfDataMalloced;i++)
    1290:	1d 96       	adiw	r26, 0x0d	; 13
    1292:	8c 91       	ld	r24, X
    1294:	88 23       	and	r24, r24
    1296:	f9 f0       	breq	.+62     	; 0x12d6 <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0x62>
    1298:	c0 e0       	ldi	r28, 0x00	; 0
    129a:	d0 e0       	ldi	r29, 0x00	; 0
          {
            if(arguments[i]!=NULL)free(arguments[i]);
    129c:	d8 01       	movw	r26, r16
    129e:	55 96       	adiw	r26, 0x15	; 21
    12a0:	ed 91       	ld	r30, X+
    12a2:	fc 91       	ld	r31, X
    12a4:	56 97       	sbiw	r26, 0x16	; 22
    12a6:	9e 01       	movw	r18, r28
    12a8:	22 0f       	add	r18, r18
    12aa:	33 1f       	adc	r19, r19
    12ac:	e2 0f       	add	r30, r18
    12ae:	f3 1f       	adc	r31, r19
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	11 f0       	breq	.+4      	; 0x12bc <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0x48>
    12b8:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <free>
            #ifdef DEBUG
            Serial.print("F3 ");
    12bc:	68 e9       	ldi	r22, 0x98	; 152
    12be:	71 e0       	ldi	r23, 0x01	; 1
    12c0:	86 ef       	ldi	r24, 0xF6	; 246
    12c2:	93 e0       	ldi	r25, 0x03	; 3
    12c4:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
}

void OneSheeldClass::freeMemoryAllocated(){
  framestart=false;
  if(isArgumentsNumberMalloced){
          for(int i=0;i<numberOfDataMalloced;i++)
    12c8:	21 96       	adiw	r28, 0x01	; 1
    12ca:	f8 01       	movw	r30, r16
    12cc:	25 85       	ldd	r18, Z+13	; 0x0d
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	c2 17       	cp	r28, r18
    12d2:	d3 07       	cpc	r29, r19
    12d4:	1c f3       	brlt	.-58     	; 0x129c <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0x28>
            if(arguments[i]!=NULL)free(arguments[i]);
            #ifdef DEBUG
            Serial.print("F3 ");
            #endif
          }
          numberOfDataMalloced=0;
    12d6:	d8 01       	movw	r26, r16
    12d8:	1d 96       	adiw	r26, 0x0d	; 13
    12da:	1c 92       	st	X, r1
    12dc:	1d 97       	sbiw	r26, 0x0d	; 13
          free(arguments);
    12de:	55 96       	adiw	r26, 0x15	; 21
    12e0:	8d 91       	ld	r24, X+
    12e2:	9c 91       	ld	r25, X
    12e4:	56 97       	sbiw	r26, 0x16	; 22
    12e6:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <free>
          #ifdef DEBUG
          Serial.print("F1 ");
    12ea:	6c e9       	ldi	r22, 0x9C	; 156
    12ec:	71 e0       	ldi	r23, 0x01	; 1
    12ee:	86 ef       	ldi	r24, 0xF6	; 246
    12f0:	93 e0       	ldi	r25, 0x03	; 3
    12f2:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
          #endif
          isArgumentsNumberMalloced=false;
    12f6:	f8 01       	movw	r30, r16
    12f8:	16 82       	std	Z+6, r1	; 0x06
        }
        if(isArgumentLengthMalloced){
    12fa:	d8 01       	movw	r26, r16
    12fc:	17 96       	adiw	r26, 0x07	; 7
    12fe:	8c 91       	ld	r24, X
    1300:	17 97       	sbiw	r26, 0x07	; 7
    1302:	88 23       	and	r24, r24
    1304:	71 f0       	breq	.+28     	; 0x1322 <_ZN14OneSheeldClass19freeMemoryAllocatedEv+0xae>
          free(argumentL);
    1306:	57 96       	adiw	r26, 0x17	; 23
    1308:	8d 91       	ld	r24, X+
    130a:	9c 91       	ld	r25, X
    130c:	58 97       	sbiw	r26, 0x18	; 24
    130e:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <free>
          #ifdef DEBUG
          Serial.println("F2 ");
    1312:	60 ea       	ldi	r22, 0xA0	; 160
    1314:	71 e0       	ldi	r23, 0x01	; 1
    1316:	86 ef       	ldi	r24, 0xF6	; 246
    1318:	93 e0       	ldi	r25, 0x03	; 3
    131a:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN5Print7printlnEPKc>
          #endif
          isArgumentLengthMalloced=false;
    131e:	f8 01       	movw	r30, r16
    1320:	17 82       	std	Z+7, r1	; 0x07
        }
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	08 95       	ret

0000132c <_ZN14OneSheeldClass12processFrameEv>:
      shieldsArray[i]->processFrame();
    }
  }
}

void OneSheeldClass::processFrame(){
    132c:	fc 01       	movw	r30, r24
  return instance;
} 
//Funtcion_ID Getter
byte OneSheeldClass::getFunctionId()
{
  return functions;
    132e:	80 89       	ldd	r24, Z+16	; 0x10
}

void OneSheeldClass::processFrame(){
  byte functionId = getFunctionId();
  //Check  the function ID 
  if(functionId == DISCONNECTION_CHECK_FUNCTION)
    1330:	82 30       	cpi	r24, 0x02	; 2
    1332:	51 f4       	brne	.+20     	; 0x1348 <_ZN14OneSheeldClass12processFrameEv+0x1c>
  {
      isOneSheeldConnected=false;
    1334:	10 86       	std	Z+8, r1	; 0x08
      if(isAppConnectionCallBack)(*isAppConnectedCallBack)(isOneSheeldConnected);
    1336:	81 85       	ldd	r24, Z+9	; 0x09
    1338:	88 23       	and	r24, r24
    133a:	19 f1       	breq	.+70     	; 0x1382 <_ZN14OneSheeldClass12processFrameEv+0x56>
    133c:	02 8c       	ldd	r0, Z+26	; 0x1a
    133e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1340:	e0 2d       	mov	r30, r0
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	09 95       	icall
    1346:	08 95       	ret
  }
  else if(functionId == CONNECTION_CHECK_FUNCTION)
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	51 f4       	brne	.+20     	; 0x1360 <_ZN14OneSheeldClass12processFrameEv+0x34>
  {
      isOneSheeldConnected=true;
    134c:	80 87       	std	Z+8, r24	; 0x08
      if(isAppConnectionCallBack)(*isAppConnectedCallBack)(isOneSheeldConnected);
    134e:	81 85       	ldd	r24, Z+9	; 0x09
    1350:	88 23       	and	r24, r24
    1352:	b9 f0       	breq	.+46     	; 0x1382 <_ZN14OneSheeldClass12processFrameEv+0x56>
    1354:	02 8c       	ldd	r0, Z+26	; 0x1a
    1356:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1358:	e0 2d       	mov	r30, r0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	09 95       	icall
    135e:	08 95       	ret
  }
  else if(functionId == LIBRARY_VERSION_REQUEST)
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	79 f4       	brne	.+30     	; 0x1382 <_ZN14OneSheeldClass12processFrameEv+0x56>
  {
    sendShieldFrame(ONESHEELD_ID,0,SEND_LIBRARY_VERSION,0);
    1364:	1f 92       	push	r1
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	8f 93       	push	r24
    136a:	1f 92       	push	r1
    136c:	1f 92       	push	r1
    136e:	ff 93       	push	r31
    1370:	ef 93       	push	r30
    1372:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	08 95       	ret

00001384 <_ZN14OneSheeldClass13sendToShieldsEv>:
        }
}

//Data Sender to Input Shields
void OneSheeldClass::sendToShields()
{
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
  //Checking the Shield-ID    
  byte number_Of_Shield= OneSheeld.getShieldId();     
  switch (number_Of_Shield)
    138c:	20 91 aa 04 	lds	r18, 0x04AA
    1390:	22 23       	and	r18, r18
    1392:	29 f0       	breq	.+10     	; 0x139e <_ZN14OneSheeldClass13sendToShieldsEv+0x1a>
  {
    case ONESHEELD_ID            :processFrame();break;
    default:
    for(int i=0 ;i<shieldsCounter;i++)
    1394:	80 91 18 05 	lds	r24, 0x0518
    1398:	81 11       	cpse	r24, r1
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <_ZN14OneSheeldClass13sendToShieldsEv+0x20>
    139c:	19 c0       	rjmp	.+50     	; 0x13d0 <_ZN14OneSheeldClass13sendToShieldsEv+0x4c>
{
  //Checking the Shield-ID    
  byte number_Of_Shield= OneSheeld.getShieldId();     
  switch (number_Of_Shield)
  {
    case ONESHEELD_ID            :processFrame();break;
    139e:	0e 94 96 09 	call	0x132c	; 0x132c <_ZN14OneSheeldClass12processFrameEv>
    13a2:	16 c0       	rjmp	.+44     	; 0x13d0 <_ZN14OneSheeldClass13sendToShieldsEv+0x4c>
    13a4:	0f eb       	ldi	r16, 0xBF	; 191
    13a6:	14 e0       	ldi	r17, 0x04	; 4
    default:
    for(int i=0 ;i<shieldsCounter;i++)
    13a8:	c0 e0       	ldi	r28, 0x00	; 0
    13aa:	d0 e0       	ldi	r29, 0x00	; 0
    {
      shieldsArray[i]->processFrame();
    13ac:	d8 01       	movw	r26, r16
    13ae:	8d 91       	ld	r24, X+
    13b0:	9d 91       	ld	r25, X+
    13b2:	8d 01       	movw	r16, r26
    13b4:	dc 01       	movw	r26, r24
    13b6:	ed 91       	ld	r30, X+
    13b8:	fc 91       	ld	r31, X
    13ba:	01 90       	ld	r0, Z+
    13bc:	f0 81       	ld	r31, Z
    13be:	e0 2d       	mov	r30, r0
    13c0:	09 95       	icall
  byte number_Of_Shield= OneSheeld.getShieldId();     
  switch (number_Of_Shield)
  {
    case ONESHEELD_ID            :processFrame();break;
    default:
    for(int i=0 ;i<shieldsCounter;i++)
    13c2:	21 96       	adiw	r28, 0x01	; 1
    13c4:	80 91 18 05 	lds	r24, 0x0518
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	c8 17       	cp	r28, r24
    13cc:	d9 07       	cpc	r29, r25
    13ce:	74 f3       	brlt	.-36     	; 0x13ac <_ZN14OneSheeldClass13sendToShieldsEv+0x28>
    {
      shieldsArray[i]->processFrame();
    }
  }
}
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	08 95       	ret

000013da <_ZN14OneSheeldClass12processInputEi>:
  return convertFloatUnion.number;
} 

//Incomming Frames processing 
void OneSheeldClass::processInput(int data) 
{
    13da:	bf 92       	push	r11
    13dc:	cf 92       	push	r12
    13de:	df 92       	push	r13
    13e0:	ef 92       	push	r14
    13e2:	ff 92       	push	r15
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	ec 01       	movw	r28, r24
    13ee:	8b 01       	movw	r16, r22
    if(data==-1)return;
    13f0:	6f 3f       	cpi	r22, 0xFF	; 255
    13f2:	8f ef       	ldi	r24, 0xFF	; 255
    13f4:	78 07       	cpc	r23, r24
    13f6:	09 f4       	brne	.+2      	; 0x13fa <_ZN14OneSheeldClass12processInputEi+0x20>
    13f8:	78 c1       	rjmp	.+752    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
     if(!framestart&&data==START_OF_FRAME)
    13fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    13fc:	91 11       	cpse	r25, r1
    13fe:	69 c1       	rjmp	.+722    	; 0x16d2 <_ZN14OneSheeldClass12processInputEi+0x2f8>
    1400:	6f 3f       	cpi	r22, 0xFF	; 255
    1402:	71 05       	cpc	r23, r1
    1404:	89 f4       	brne	.+34     	; 0x1428 <_ZN14OneSheeldClass12processInputEi+0x4e>
          {
              freeMemoryAllocated();
    1406:	ce 01       	movw	r24, r28
    1408:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
              counter=0;
              framestart=true;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	8c 87       	std	Y+12, r24	; 0x0c
              arguments=0;
    1410:	1e 8a       	std	Y+22, r1	; 0x16
    1412:	1d 8a       	std	Y+21, r1	; 0x15
              argumentL=0;
    1414:	18 8e       	std	Y+24, r1	; 0x18
    1416:	1f 8a       	std	Y+23, r1	; 0x17
              counter++;
    1418:	89 8b       	std	Y+17, r24	; 0x11
              #ifdef DEBUG
              Serial.print("C1 ");
    141a:	64 ea       	ldi	r22, 0xA4	; 164
    141c:	71 e0       	ldi	r23, 0x01	; 1
    141e:	86 ef       	ldi	r24, 0xF6	; 246
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
    1426:	61 c1       	rjmp	.+706    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
              #endif
          }
          else if(counter==4&&framestart)                      //data is the no of arguments
    1428:	89 89       	ldd	r24, Y+17	; 0x11
    142a:	84 30       	cpi	r24, 0x04	; 4
    142c:	09 f0       	breq	.+2      	; 0x1430 <_ZN14OneSheeldClass12processInputEi+0x56>
    142e:	55 c1       	rjmp	.+682    	; 0x16da <_ZN14OneSheeldClass12processInputEi+0x300>
    1430:	5c c1       	rjmp	.+696    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
          {
              #ifdef DEBUG
              Serial.print("C4 ");
    1432:	68 ea       	ldi	r22, 0xA8	; 168
    1434:	71 e0       	ldi	r23, 0x01	; 1
    1436:	86 ef       	ldi	r24, 0xF6	; 246
    1438:	93 e0       	ldi	r25, 0x03	; 3
    143a:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
              #endif
              datalengthcounter=0;
    143e:	1b 8a       	std	Y+19, r1	; 0x13
              argumentcounter=0;
    1440:	1a 8a       	std	Y+18, r1	; 0x12
              argumentnumber=data;
    1442:	0c 8b       	std	Y+20, r16	; 0x14
              counter++;
    1444:	89 89       	ldd	r24, Y+17	; 0x11
    1446:	8f 5f       	subi	r24, 0xFF	; 255
    1448:	89 8b       	std	Y+17, r24	; 0x11
    144a:	4f c1       	rjmp	.+670    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
          }
          else if(counter==5&&framestart)                      //data is the no of arguments
          {
              #ifdef DEBUG
              Serial.print("C5 ");
    144c:	6c ea       	ldi	r22, 0xAC	; 172
    144e:	71 e0       	ldi	r23, 0x01	; 1
    1450:	86 ef       	ldi	r24, 0xF6	; 246
    1452:	93 e0       	ldi	r25, 0x03	; 3
    1454:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
              #endif
              if((255-argumentnumber)==data&&argumentnumber==0){
    1458:	2c 89       	ldd	r18, Y+20	; 0x14
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	82 1b       	sub	r24, r18
    1460:	91 09       	sbc	r25, r1
    1462:	80 17       	cp	r24, r16
    1464:	91 07       	cpc	r25, r17
    1466:	31 f5       	brne	.+76     	; 0x14b4 <_ZN14OneSheeldClass12processInputEi+0xda>
    1468:	21 11       	cpse	r18, r1
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <_ZN14OneSheeldClass12processInputEi+0x98>
                counter=9;
    146c:	89 e0       	ldi	r24, 0x09	; 9
    146e:	89 8b       	std	Y+17, r24	; 0x11
                return;
    1470:	3c c1       	rjmp	.+632    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
              }
              else if((255-argumentnumber)==data){
              arguments=(byte**)malloc(sizeof(byte*)*argumentnumber);//new byte*[argumentnumber];          //assigning the first dimension of the pointer (allocating dynamically space for 2d array)
    1472:	82 2f       	mov	r24, r18
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <malloc>
    147e:	9e 8b       	std	Y+22, r25	; 0x16
    1480:	8d 8b       	std	Y+21, r24	; 0x15
              #ifdef DEBUG
              Serial.print("M1 ");
    1482:	60 eb       	ldi	r22, 0xB0	; 176
    1484:	71 e0       	ldi	r23, 0x01	; 1
    1486:	86 ef       	ldi	r24, 0xF6	; 246
    1488:	93 e0       	ldi	r25, 0x03	; 3
    148a:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
              #endif
              isArgumentsNumberMalloced=true;
    148e:	11 e0       	ldi	r17, 0x01	; 1
    1490:	1e 83       	std	Y+6, r17	; 0x06
              argumentL=(byte*)malloc(sizeof(byte)*argumentnumber);//new byte [argumentnumber];
    1492:	8c 89       	ldd	r24, Y+20	; 0x14
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <malloc>
    149a:	98 8f       	std	Y+24, r25	; 0x18
    149c:	8f 8b       	std	Y+23, r24	; 0x17
              #ifdef DEBUG
              Serial.print("M2 ");
    149e:	64 eb       	ldi	r22, 0xB4	; 180
    14a0:	71 e0       	ldi	r23, 0x01	; 1
    14a2:	86 ef       	ldi	r24, 0xF6	; 246
    14a4:	93 e0       	ldi	r25, 0x03	; 3
    14a6:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
              #endif
              isArgumentLengthMalloced=true;
    14aa:	1f 83       	std	Y+7, r17	; 0x07
              counter++;
    14ac:	89 89       	ldd	r24, Y+17	; 0x11
    14ae:	8f 5f       	subi	r24, 0xFF	; 255
    14b0:	89 8b       	std	Y+17, r24	; 0x11
          else if(counter==5&&framestart)                      //data is the no of arguments
          {
              #ifdef DEBUG
              Serial.print("C5 ");
              #endif
              if((255-argumentnumber)==data&&argumentnumber==0){
    14b2:	1b c1       	rjmp	.+566    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
              #endif
              isArgumentLengthMalloced=true;
              counter++;
              }
              else{
                framestart=false;
    14b4:	1c 86       	std	Y+12, r1	; 0x0c
                freeMemoryAllocated();
    14b6:	ce 01       	movw	r24, r28
    14b8:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
                return;
    14bc:	16 c1       	rjmp	.+556    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
              }


          }
          else if (counter==6&&framestart)                    // data is the first argument length
    14be:	86 30       	cpi	r24, 0x06	; 6
    14c0:	99 f4       	brne	.+38     	; 0x14e8 <_ZN14OneSheeldClass12processInputEi+0x10e>
    14c2:	99 23       	and	r25, r25
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <_ZN14OneSheeldClass12processInputEi+0xee>
    14c6:	11 c1       	rjmp	.+546    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
          {
              #ifdef DEBUG
              Serial.print("C6 ");
    14c8:	68 eb       	ldi	r22, 0xB8	; 184
    14ca:	71 e0       	ldi	r23, 0x01	; 1
    14cc:	86 ef       	ldi	r24, 0xF6	; 246
    14ce:	93 e0       	ldi	r25, 0x03	; 3
    14d0:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
              #endif
              argumentL[argumentcounter]=data;
    14d4:	8a 89       	ldd	r24, Y+18	; 0x12
    14d6:	ef 89       	ldd	r30, Y+23	; 0x17
    14d8:	f8 8d       	ldd	r31, Y+24	; 0x18
    14da:	e8 0f       	add	r30, r24
    14dc:	f1 1d       	adc	r31, r1
    14de:	00 83       	st	Z, r16
              counter++;
    14e0:	89 89       	ldd	r24, Y+17	; 0x11
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	89 8b       	std	Y+17, r24	; 0x11
    14e6:	01 c1       	rjmp	.+514    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
          }
          else if (counter==7&&framestart)                    // data is the first argument Data information
    14e8:	87 30       	cpi	r24, 0x07	; 7
    14ea:	09 f0       	breq	.+2      	; 0x14ee <_ZN14OneSheeldClass12processInputEi+0x114>
    14ec:	4c c0       	rjmp	.+152    	; 0x1586 <_ZN14OneSheeldClass12processInputEi+0x1ac>
    14ee:	99 23       	and	r25, r25
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <_ZN14OneSheeldClass12processInputEi+0x11a>
    14f2:	fb c0       	rjmp	.+502    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
          {
            #ifdef DEBUG
            Serial.print("C7 ");
    14f4:	6c eb       	ldi	r22, 0xBC	; 188
    14f6:	71 e0       	ldi	r23, 0x01	; 1
    14f8:	86 ef       	ldi	r24, 0xF6	; 246
    14fa:	93 e0       	ldi	r25, 0x03	; 3
    14fc:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
            #endif
            if((255-argumentL[argumentcounter])==data){
    1500:	2a 89       	ldd	r18, Y+18	; 0x12
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	ef 89       	ldd	r30, Y+23	; 0x17
    1506:	f8 8d       	ldd	r31, Y+24	; 0x18
    1508:	e2 0f       	add	r30, r18
    150a:	f3 1f       	adc	r31, r19
    150c:	80 81       	ld	r24, Z
    150e:	4f ef       	ldi	r20, 0xFF	; 255
    1510:	50 e0       	ldi	r21, 0x00	; 0
    1512:	48 1b       	sub	r20, r24
    1514:	51 09       	sbc	r21, r1
    1516:	40 17       	cp	r20, r16
    1518:	51 07       	cpc	r21, r17
    151a:	81 f5       	brne	.+96     	; 0x157c <_ZN14OneSheeldClass12processInputEi+0x1a2>
              if(argumentL[argumentcounter]!=0)
    151c:	88 23       	and	r24, r24
    151e:	b1 f0       	breq	.+44     	; 0x154c <_ZN14OneSheeldClass12processInputEi+0x172>
              {
                arguments[argumentcounter]=(byte*)malloc(sizeof(byte)*argumentL[argumentcounter]); // assigning the second dimensional of the pointer
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	0d 89       	ldd	r16, Y+21	; 0x15
    1526:	1e 89       	ldd	r17, Y+22	; 0x16
    1528:	02 0f       	add	r16, r18
    152a:	13 1f       	adc	r17, r19
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <malloc>
    1532:	f8 01       	movw	r30, r16
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
                #ifdef DEBUG
                Serial.print("M3 ");
    1538:	60 ec       	ldi	r22, 0xC0	; 192
    153a:	71 e0       	ldi	r23, 0x01	; 1
    153c:	86 ef       	ldi	r24, 0xF6	; 246
    153e:	93 e0       	ldi	r25, 0x03	; 3
    1540:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
                #endif
                counter++;
    1544:	89 89       	ldd	r24, Y+17	; 0x11
    1546:	8f 5f       	subi	r24, 0xFF	; 255
    1548:	89 8b       	std	Y+17, r24	; 0x11
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <_ZN14OneSheeldClass12processInputEi+0x19a>
              }
              else
              {
                arguments[argumentcounter]=NULL;
    154c:	22 0f       	add	r18, r18
    154e:	33 1f       	adc	r19, r19
    1550:	ed 89       	ldd	r30, Y+21	; 0x15
    1552:	fe 89       	ldd	r31, Y+22	; 0x16
    1554:	e2 0f       	add	r30, r18
    1556:	f3 1f       	adc	r31, r19
    1558:	11 82       	std	Z+1, r1	; 0x01
    155a:	10 82       	st	Z, r1
                datalengthcounter=0;
    155c:	1b 8a       	std	Y+19, r1	; 0x13
                argumentcounter++;
    155e:	8a 89       	ldd	r24, Y+18	; 0x12
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	8a 8b       	std	Y+18, r24	; 0x12
                if(argumentcounter==argumentnumber)
    1564:	9c 89       	ldd	r25, Y+20	; 0x14
    1566:	89 13       	cpse	r24, r25
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <_ZN14OneSheeldClass12processInputEi+0x196>
                  counter=9;
    156a:	89 e0       	ldi	r24, 0x09	; 9
    156c:	89 8b       	std	Y+17, r24	; 0x11
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <_ZN14OneSheeldClass12processInputEi+0x19a>
                else
                  counter=6;
    1570:	86 e0       	ldi	r24, 0x06	; 6
    1572:	89 8b       	std	Y+17, r24	; 0x11
              }
              numberOfDataMalloced++;
    1574:	8d 85       	ldd	r24, Y+13	; 0x0d
    1576:	8f 5f       	subi	r24, 0xFF	; 255
    1578:	8d 87       	std	Y+13, r24	; 0x0d
          else if (counter==7&&framestart)                    // data is the first argument Data information
          {
            #ifdef DEBUG
            Serial.print("C7 ");
            #endif
            if((255-argumentL[argumentcounter])==data){
    157a:	b7 c0       	rjmp	.+366    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
                  counter=6;
              }
              numberOfDataMalloced++;
            }
            else{
                framestart=false;
    157c:	1c 86       	std	Y+12, r1	; 0x0c
                freeMemoryAllocated();
    157e:	ce 01       	movw	r24, r28
    1580:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
                return;
    1584:	b2 c0       	rjmp	.+356    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
              }
          }
          else if (counter==8&&framestart)
    1586:	88 30       	cpi	r24, 0x08	; 8
    1588:	99 f5       	brne	.+102    	; 0x15f0 <_ZN14OneSheeldClass12processInputEi+0x216>
    158a:	99 23       	and	r25, r25
    158c:	09 f4       	brne	.+2      	; 0x1590 <_ZN14OneSheeldClass12processInputEi+0x1b6>
    158e:	ad c0       	rjmp	.+346    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
          {
              #ifdef DEBUG
              Serial.print("C8 ");
    1590:	64 ec       	ldi	r22, 0xC4	; 196
    1592:	71 e0       	ldi	r23, 0x01	; 1
    1594:	86 ef       	ldi	r24, 0xF6	; 246
    1596:	93 e0       	ldi	r25, 0x03	; 3
    1598:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
              #endif
              if(arguments[argumentcounter]!=NULL)arguments[argumentcounter][datalengthcounter++]=data;
    159c:	ea 89       	ldd	r30, Y+18	; 0x12
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	ee 0f       	add	r30, r30
    15a2:	ff 1f       	adc	r31, r31
    15a4:	8d 89       	ldd	r24, Y+21	; 0x15
    15a6:	9e 89       	ldd	r25, Y+22	; 0x16
    15a8:	e8 0f       	add	r30, r24
    15aa:	f9 1f       	adc	r31, r25
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	41 f0       	breq	.+16     	; 0x15c4 <_ZN14OneSheeldClass12processInputEi+0x1ea>
    15b4:	2b 89       	ldd	r18, Y+19	; 0x13
    15b6:	31 e0       	ldi	r19, 0x01	; 1
    15b8:	32 0f       	add	r19, r18
    15ba:	3b 8b       	std	Y+19, r19	; 0x13
    15bc:	fc 01       	movw	r30, r24
    15be:	e2 0f       	add	r30, r18
    15c0:	f1 1d       	adc	r31, r1
    15c2:	00 83       	st	Z, r16
              if (datalengthcounter==argumentL[argumentcounter])
    15c4:	8a 89       	ldd	r24, Y+18	; 0x12
    15c6:	ef 89       	ldd	r30, Y+23	; 0x17
    15c8:	f8 8d       	ldd	r31, Y+24	; 0x18
    15ca:	e8 0f       	add	r30, r24
    15cc:	f1 1d       	adc	r31, r1
    15ce:	2b 89       	ldd	r18, Y+19	; 0x13
    15d0:	90 81       	ld	r25, Z
    15d2:	29 13       	cpse	r18, r25
    15d4:	8a c0       	rjmp	.+276    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
              {
                  datalengthcounter=0;
    15d6:	1b 8a       	std	Y+19, r1	; 0x13
                  argumentcounter++;
    15d8:	8f 5f       	subi	r24, 0xFF	; 255
    15da:	8a 8b       	std	Y+18, r24	; 0x12
                  if(argumentcounter==argumentnumber)
    15dc:	9c 89       	ldd	r25, Y+20	; 0x14
    15de:	89 13       	cpse	r24, r25
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <_ZN14OneSheeldClass12processInputEi+0x210>
                  {
                    counter++;                                    //increment the counter to take the last byte which is the end of the frame
    15e2:	89 89       	ldd	r24, Y+17	; 0x11
    15e4:	8f 5f       	subi	r24, 0xFF	; 255
    15e6:	89 8b       	std	Y+17, r24	; 0x11
    15e8:	80 c0       	rjmp	.+256    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>

                  }
                  else
                  {
                    counter=6;
    15ea:	86 e0       	ldi	r24, 0x06	; 6
    15ec:	89 8b       	std	Y+17, r24	; 0x11
    15ee:	7d c0       	rjmp	.+250    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
                  }

              }

          }
          else if(counter==9&&framestart)
    15f0:	89 30       	cpi	r24, 0x09	; 9
    15f2:	29 f5       	brne	.+74     	; 0x163e <_ZN14OneSheeldClass12processInputEi+0x264>
    15f4:	99 23       	and	r25, r25
    15f6:	09 f4       	brne	.+2      	; 0x15fa <_ZN14OneSheeldClass12processInputEi+0x220>
    15f8:	78 c0       	rjmp	.+240    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
          {
              #ifdef DEBUG
              Serial.print("C9 ");
    15fa:	68 ec       	ldi	r22, 0xC8	; 200
    15fc:	71 e0       	ldi	r23, 0x01	; 1
    15fe:	86 ef       	ldi	r24, 0xF6	; 246
    1600:	93 e0       	ldi	r25, 0x03	; 3
    1602:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
              #endif
            endFrame=data;
    1606:	09 8f       	std	Y+25, r16	; 0x19
              if(endFrame==END_OF_FRAME)                                   //if the endframe is equal to zero send to shields and free memory
    1608:	01 11       	cpse	r16, r1
    160a:	15 c0       	rjmp	.+42     	; 0x1636 <_ZN14OneSheeldClass12processInputEi+0x25c>
              {
                      sendToShields();
    160c:	ce 01       	movw	r24, r28
    160e:	0e 94 c2 09 	call	0x1384	; 0x1384 <_ZN14OneSheeldClass13sendToShieldsEv>
                      if(isShieldFrameCallback)
    1612:	8a 85       	ldd	r24, Y+10	; 0x0a
    1614:	88 23       	and	r24, r24
    1616:	59 f0       	breq	.+22     	; 0x162e <_ZN14OneSheeldClass12processInputEi+0x254>
                        shieldFrameCallback(shield,instance,functions,argumentnumber,argumentL,arguments);
    1618:	ed 88       	ldd	r14, Y+21	; 0x15
    161a:	fe 88       	ldd	r15, Y+22	; 0x16
    161c:	0f 89       	ldd	r16, Y+23	; 0x17
    161e:	18 8d       	ldd	r17, Y+24	; 0x18
    1620:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1622:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1624:	2c 89       	ldd	r18, Y+20	; 0x14
    1626:	48 89       	ldd	r20, Y+16	; 0x10
    1628:	6f 85       	ldd	r22, Y+15	; 0x0f
    162a:	8e 85       	ldd	r24, Y+14	; 0x0e
    162c:	09 95       	icall
                      freeMemoryAllocated();
    162e:	ce 01       	movw	r24, r28
    1630:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
    1634:	5a c0       	rjmp	.+180    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
                      
              }
              else                                            //if endframe wasn't equal to zero make sure that the memory is free anyway
              {
                freeMemoryAllocated();
    1636:	ce 01       	movw	r24, r28
    1638:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
    163c:	56 c0       	rjmp	.+172    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
              }
          }
          else if(framestart){
    163e:	99 23       	and	r25, r25
    1640:	09 f4       	brne	.+2      	; 0x1644 <_ZN14OneSheeldClass12processInputEi+0x26a>
    1642:	53 c0       	rjmp	.+166    	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
                if(counter==1){
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	71 f5       	brne	.+92     	; 0x16a4 <_ZN14OneSheeldClass12processInputEi+0x2ca>
                  shield=data;
    1648:	0e 87       	std	Y+14, r16	; 0x0e
                  bool found = false;
                  if(shield == ONESHEELD_ID || isShieldFrameCallback) found = true;
    164a:	00 23       	and	r16, r16
    164c:	f1 f1       	breq	.+124    	; 0x16ca <_ZN14OneSheeldClass12processInputEi+0x2f0>
    164e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1650:	81 11       	cpse	r24, r1
    1652:	3b c0       	rjmp	.+118    	; 0x16ca <_ZN14OneSheeldClass12processInputEi+0x2f0>
                  else 
                  for (int i=0;i<shieldsCounter;i++) {
    1654:	80 91 18 05 	lds	r24, 0x0518
    1658:	88 23       	and	r24, r24
    165a:	f9 f0       	breq	.+62     	; 0x169a <_ZN14OneSheeldClass12processInputEi+0x2c0>
    165c:	0f 2e       	mov	r0, r31
    165e:	ff eb       	ldi	r31, 0xBF	; 191
    1660:	ef 2e       	mov	r14, r31
    1662:	f4 e0       	ldi	r31, 0x04	; 4
    1664:	ff 2e       	mov	r15, r31
    1666:	f0 2d       	mov	r31, r0
    1668:	00 e0       	ldi	r16, 0x00	; 0
    166a:	10 e0       	ldi	r17, 0x00	; 0
    166c:	c1 2c       	mov	r12, r1
                    if (shield == shieldsArray[i]->getShieldId()){
                      found = true;
    166e:	bb 24       	eor	r11, r11
    1670:	b3 94       	inc	r11
                  shield=data;
                  bool found = false;
                  if(shield == ONESHEELD_ID || isShieldFrameCallback) found = true;
                  else 
                  for (int i=0;i<shieldsCounter;i++) {
                    if (shield == shieldsArray[i]->getShieldId()){
    1672:	de 84       	ldd	r13, Y+14	; 0x0e
    1674:	f7 01       	movw	r30, r14
    1676:	81 91       	ld	r24, Z+
    1678:	91 91       	ld	r25, Z+
    167a:	7f 01       	movw	r14, r30
    167c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_ZN12ShieldParent11getShieldIdEv>
    1680:	d8 12       	cpse	r13, r24
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <_ZN14OneSheeldClass12processInputEi+0x2ac>
                      found = true;
    1684:	cb 2c       	mov	r12, r11
                if(counter==1){
                  shield=data;
                  bool found = false;
                  if(shield == ONESHEELD_ID || isShieldFrameCallback) found = true;
                  else 
                  for (int i=0;i<shieldsCounter;i++) {
    1686:	0f 5f       	subi	r16, 0xFF	; 255
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	80 91 18 05 	lds	r24, 0x0518
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	08 17       	cp	r16, r24
    1692:	19 07       	cpc	r17, r25
    1694:	74 f3       	brlt	.-36     	; 0x1672 <_ZN14OneSheeldClass12processInputEi+0x298>
                    if (shield == shieldsArray[i]->getShieldId()){
                      found = true;
                      
                    }
                  }
                  if (!found) {
    1696:	c1 10       	cpse	r12, r1
    1698:	18 c0       	rjmp	.+48     	; 0x16ca <_ZN14OneSheeldClass12processInputEi+0x2f0>
                    framestart=false;
    169a:	1c 86       	std	Y+12, r1	; 0x0c
                    freeMemoryAllocated();
    169c:	ce 01       	movw	r24, r28
    169e:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN14OneSheeldClass19freeMemoryAllocatedEv>
                    return;
    16a2:	23 c0       	rjmp	.+70     	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
                  }
                }
                else if(counter==2){
    16a4:	82 30       	cpi	r24, 0x02	; 2
    16a6:	41 f4       	brne	.+16     	; 0x16b8 <_ZN14OneSheeldClass12processInputEi+0x2de>
                  instance=data;
    16a8:	0f 87       	std	Y+15, r16	; 0x0f
                  #ifdef DEBUG
                  Serial.print("C2 ");
    16aa:	6c ec       	ldi	r22, 0xCC	; 204
    16ac:	71 e0       	ldi	r23, 0x01	; 1
    16ae:	86 ef       	ldi	r24, 0xF6	; 246
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
    16b6:	09 c0       	rjmp	.+18     	; 0x16ca <_ZN14OneSheeldClass12processInputEi+0x2f0>
                  #endif
                }
                else if(counter==3){
    16b8:	83 30       	cpi	r24, 0x03	; 3
    16ba:	39 f4       	brne	.+14     	; 0x16ca <_ZN14OneSheeldClass12processInputEi+0x2f0>
                  functions=data;
    16bc:	08 8b       	std	Y+16, r16	; 0x10
                  #ifdef DEBUG
                  Serial.print("C3 ");
    16be:	60 ed       	ldi	r22, 0xD0	; 208
    16c0:	71 e0       	ldi	r23, 0x01	; 1
    16c2:	86 ef       	ldi	r24, 0xF6	; 246
    16c4:	93 e0       	ldi	r25, 0x03	; 3
    16c6:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5Print5printEPKc>
                  #endif
                }
            counter++;
    16ca:	89 89       	ldd	r24, Y+17	; 0x11
    16cc:	8f 5f       	subi	r24, 0xFF	; 255
    16ce:	89 8b       	std	Y+17, r24	; 0x11
    16d0:	0c c0       	rjmp	.+24     	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
              counter++;
              #ifdef DEBUG
              Serial.print("C1 ");
              #endif
          }
          else if(counter==4&&framestart)                      //data is the no of arguments
    16d2:	89 89       	ldd	r24, Y+17	; 0x11
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	29 f4       	brne	.+10     	; 0x16e2 <_ZN14OneSheeldClass12processInputEi+0x308>
    16d8:	ac ce       	rjmp	.-680    	; 0x1432 <_ZN14OneSheeldClass12processInputEi+0x58>
              datalengthcounter=0;
              argumentcounter=0;
              argumentnumber=data;
              counter++;
          }
          else if(counter==5&&framestart)                      //data is the no of arguments
    16da:	85 30       	cpi	r24, 0x05	; 5
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <_ZN14OneSheeldClass12processInputEi+0x306>
    16de:	ef ce       	rjmp	.-546    	; 0x14be <_ZN14OneSheeldClass12processInputEi+0xe4>
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <_ZN14OneSheeldClass12processInputEi+0x310>
    16e2:	85 30       	cpi	r24, 0x05	; 5
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <_ZN14OneSheeldClass12processInputEi+0x30e>
    16e6:	eb ce       	rjmp	.-554    	; 0x14be <_ZN14OneSheeldClass12processInputEi+0xe4>
    16e8:	b1 ce       	rjmp	.-670    	; 0x144c <_ZN14OneSheeldClass12processInputEi+0x72>
                  #endif
                }
            counter++;
          }

}
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	cf 90       	pop	r12
    16fa:	bf 90       	pop	r11
    16fc:	08 95       	ret

000016fe <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>:
  serialDataCallback=userFunction;
}

//Frame Sender for Output Shields
void OneSheeldClass::sendShieldFrame(byte shieldID, byte instanceID, byte functionID, byte argNo, ...)
{
    16fe:	3f 92       	push	r3
    1700:	4f 92       	push	r4
    1702:	5f 92       	push	r5
    1704:	6f 92       	push	r6
    1706:	7f 92       	push	r7
    1708:	8f 92       	push	r8
    170a:	9f 92       	push	r9
    170c:	af 92       	push	r10
    170e:	bf 92       	push	r11
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	a0 97       	sbiw	r28, 0x20	; 32
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	cc a8       	ldd	r12, Y+52	; 0x34
    1732:	dd a8       	ldd	r13, Y+53	; 0x35
    1734:	3e a8       	ldd	r3, Y+54	; 0x36
    1736:	69 ac       	ldd	r6, Y+57	; 0x39
  unsigned long mill=millis()+1;
    1738:	0e 94 9f 08 	call	0x113e	; 0x113e <millis>
  unsigned long localLastTimeFrameSent=lastTimeFrameSent;
    173c:	80 90 14 05 	lds	r8, 0x0514
    1740:	90 90 15 05 	lds	r9, 0x0515
    1744:	a0 90 16 05 	lds	r10, 0x0516
    1748:	b0 90 17 05 	lds	r11, 0x0517
  if(shieldID!=ONESHEELD_ID&&isFirstFrame&&localLastTimeFrameSent&&(mill-localLastTimeFrameSent)<TIME_GAP){
    174c:	33 20       	and	r3, r3
    174e:	09 f4       	brne	.+2      	; 0x1752 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x54>
    1750:	82 c0       	rjmp	.+260    	; 0x1856 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x158>
    1752:	20 91 11 05 	lds	r18, 0x0511
    1756:	22 23       	and	r18, r18
    1758:	09 f4       	brne	.+2      	; 0x175c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x5e>
    175a:	7d c0       	rjmp	.+250    	; 0x1856 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x158>
    175c:	81 14       	cp	r8, r1
    175e:	91 04       	cpc	r9, r1
    1760:	a1 04       	cpc	r10, r1
    1762:	b1 04       	cpc	r11, r1
    1764:	09 f4       	brne	.+2      	; 0x1768 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x6a>
    1766:	77 c0       	rjmp	.+238    	; 0x1856 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x158>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	88 19       	sub	r24, r8
    176e:	99 09       	sbc	r25, r9
    1770:	aa 09       	sbc	r26, r10
    1772:	bb 09       	sbc	r27, r11
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	a1 1d       	adc	r26, r1
    1778:	b1 1d       	adc	r27, r1
    177a:	88 3c       	cpi	r24, 0xC8	; 200
    177c:	91 05       	cpc	r25, r1
    177e:	a1 05       	cpc	r26, r1
    1780:	b1 05       	cpc	r27, r1
    1782:	08 f0       	brcs	.+2      	; 0x1786 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x88>
    1784:	68 c0       	rjmp	.+208    	; 0x1856 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x158>
  if(inACallback){
    1786:	80 91 13 05 	lds	r24, 0x0513
    178a:	88 23       	and	r24, r24
    178c:	09 f4       	brne	.+2      	; 0x1790 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x92>
    178e:	53 c0       	rjmp	.+166    	; 0x1836 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x138>
     OneSheeldClass TempOneSheeld(OneSheeldSerial);
    1790:	d6 01       	movw	r26, r12
    1792:	6d 91       	ld	r22, X+
    1794:	7c 91       	ld	r23, X
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_ZN14OneSheeldClassC1ER6Stream>
     ShieldParent::setOneSheeldInstance(TempOneSheeld);
    179e:	ce 01       	movw	r24, r28
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <_ZN12ShieldParent20setOneSheeldInstanceER14OneSheeldClass>
     while((millis()<(TIME_GAP+localLastTimeFrameSent))||TempOneSheeld.framestart)
    17a6:	b8 ec       	ldi	r27, 0xC8	; 200
    17a8:	8b 0e       	add	r8, r27
    17aa:	91 1c       	adc	r9, r1
    17ac:	a1 1c       	adc	r10, r1
    17ae:	b1 1c       	adc	r11, r1
    17b0:	19 c0       	rjmp	.+50     	; 0x17e4 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xe6>
     {
        if(TempOneSheeld.OneSheeldSerial.available())
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	dc 01       	movw	r26, r24
    17b8:	ed 91       	ld	r30, X+
    17ba:	fc 91       	ld	r31, X
    17bc:	04 80       	ldd	r0, Z+4	; 0x04
    17be:	f5 81       	ldd	r31, Z+5	; 0x05
    17c0:	e0 2d       	mov	r30, r0
    17c2:	09 95       	icall
    17c4:	89 2b       	or	r24, r25
    17c6:	71 f0       	breq	.+28     	; 0x17e4 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xe6>
          TempOneSheeld.processInput(TempOneSheeld.OneSheeldSerial.read());
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	dc 01       	movw	r26, r24
    17ce:	ed 91       	ld	r30, X+
    17d0:	fc 91       	ld	r31, X
    17d2:	06 80       	ldd	r0, Z+6	; 0x06
    17d4:	f7 81       	ldd	r31, Z+7	; 0x07
    17d6:	e0 2d       	mov	r30, r0
    17d8:	09 95       	icall
    17da:	bc 01       	movw	r22, r24
    17dc:	ce 01       	movw	r24, r28
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	0e 94 ed 09 	call	0x13da	; 0x13da <_ZN14OneSheeldClass12processInputEi>
  unsigned long localLastTimeFrameSent=lastTimeFrameSent;
  if(shieldID!=ONESHEELD_ID&&isFirstFrame&&localLastTimeFrameSent&&(mill-localLastTimeFrameSent)<TIME_GAP){
  if(inACallback){
     OneSheeldClass TempOneSheeld(OneSheeldSerial);
     ShieldParent::setOneSheeldInstance(TempOneSheeld);
     while((millis()<(TIME_GAP+localLastTimeFrameSent))||TempOneSheeld.framestart)
    17e4:	0e 94 9f 08 	call	0x113e	; 0x113e <millis>
    17e8:	68 15       	cp	r22, r8
    17ea:	79 05       	cpc	r23, r9
    17ec:	8a 05       	cpc	r24, r10
    17ee:	9b 05       	cpc	r25, r11
    17f0:	00 f3       	brcs	.-64     	; 0x17b2 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xb4>
    17f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f4:	81 11       	cpse	r24, r1
    17f6:	dd cf       	rjmp	.-70     	; 0x17b2 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0xb4>
     {
        if(TempOneSheeld.OneSheeldSerial.available())
          TempOneSheeld.processInput(TempOneSheeld.OneSheeldSerial.read());
     }
      ShieldParent::unSetOneSheeldInstance();
    17f8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_ZN12ShieldParent22unSetOneSheeldInstanceEv>
    17fc:	2c c0       	rjmp	.+88     	; 0x1856 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x158>
   }else
      while((millis()<(TIME_GAP+localLastTimeFrameSent))||framestart)
      {
        if(OneSheeldSerial.available())
    17fe:	f6 01       	movw	r30, r12
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	dc 01       	movw	r26, r24
    1806:	ed 91       	ld	r30, X+
    1808:	fc 91       	ld	r31, X
    180a:	04 80       	ldd	r0, Z+4	; 0x04
    180c:	f5 81       	ldd	r31, Z+5	; 0x05
    180e:	e0 2d       	mov	r30, r0
    1810:	09 95       	icall
    1812:	89 2b       	or	r24, r25
    1814:	a9 f0       	breq	.+42     	; 0x1840 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x142>
          OneSheeld.processInput(OneSheeldSerial.read());
    1816:	f6 01       	movw	r30, r12
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	dc 01       	movw	r26, r24
    181e:	ed 91       	ld	r30, X+
    1820:	fc 91       	ld	r31, X
    1822:	06 80       	ldd	r0, Z+6	; 0x06
    1824:	f7 81       	ldd	r31, Z+7	; 0x07
    1826:	e0 2d       	mov	r30, r0
    1828:	09 95       	icall
    182a:	bc 01       	movw	r22, r24
    182c:	8c e9       	ldi	r24, 0x9C	; 156
    182e:	94 e0       	ldi	r25, 0x04	; 4
    1830:	0e 94 ed 09 	call	0x13da	; 0x13da <_ZN14OneSheeldClass12processInputEi>
    1834:	05 c0       	rjmp	.+10     	; 0x1840 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x142>
        if(TempOneSheeld.OneSheeldSerial.available())
          TempOneSheeld.processInput(TempOneSheeld.OneSheeldSerial.read());
     }
      ShieldParent::unSetOneSheeldInstance();
   }else
      while((millis()<(TIME_GAP+localLastTimeFrameSent))||framestart)
    1836:	b8 ec       	ldi	r27, 0xC8	; 200
    1838:	8b 0e       	add	r8, r27
    183a:	91 1c       	adc	r9, r1
    183c:	a1 1c       	adc	r10, r1
    183e:	b1 1c       	adc	r11, r1
    1840:	0e 94 9f 08 	call	0x113e	; 0x113e <millis>
    1844:	68 15       	cp	r22, r8
    1846:	79 05       	cpc	r23, r9
    1848:	8a 05       	cpc	r24, r10
    184a:	9b 05       	cpc	r25, r11
    184c:	c0 f2       	brcs	.-80     	; 0x17fe <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x100>
    184e:	f6 01       	movw	r30, r12
    1850:	84 85       	ldd	r24, Z+12	; 0x0c
    1852:	81 11       	cpse	r24, r1
    1854:	d4 cf       	rjmp	.-88     	; 0x17fe <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x100>
        if(OneSheeldSerial.available())
          OneSheeld.processInput(OneSheeldSerial.read());
      }
  }

  isFirstFrame=true;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	80 93 11 05 	sts	0x0511, r24
  va_list arguments ;
  va_start (arguments,argNo);
    185c:	4e 01       	movw	r8, r28
    185e:	fa e3       	ldi	r31, 0x3A	; 58
    1860:	8f 0e       	add	r8, r31
    1862:	91 1c       	adc	r9, r1
  OneSheeldSerial.write((byte)START_OF_FRAME);
    1864:	d6 01       	movw	r26, r12
    1866:	8d 91       	ld	r24, X+
    1868:	9c 91       	ld	r25, X
    186a:	dc 01       	movw	r26, r24
    186c:	ed 91       	ld	r30, X+
    186e:	fc 91       	ld	r31, X
    1870:	01 90       	ld	r0, Z+
    1872:	f0 81       	ld	r31, Z
    1874:	e0 2d       	mov	r30, r0
    1876:	6f ef       	ldi	r22, 0xFF	; 255
    1878:	09 95       	icall
  OneSheeldSerial.write(LIBRARY_VERSION);
    187a:	f6 01       	movw	r30, r12
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	dc 01       	movw	r26, r24
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	01 90       	ld	r0, Z+
    1888:	f0 81       	ld	r31, Z
    188a:	e0 2d       	mov	r30, r0
    188c:	68 e0       	ldi	r22, 0x08	; 8
    188e:	09 95       	icall
  OneSheeldSerial.write(shieldID);
    1890:	f6 01       	movw	r30, r12
    1892:	80 81       	ld	r24, Z
    1894:	91 81       	ldd	r25, Z+1	; 0x01
    1896:	dc 01       	movw	r26, r24
    1898:	ed 91       	ld	r30, X+
    189a:	fc 91       	ld	r31, X
    189c:	01 90       	ld	r0, Z+
    189e:	f0 81       	ld	r31, Z
    18a0:	e0 2d       	mov	r30, r0
    18a2:	63 2d       	mov	r22, r3
    18a4:	09 95       	icall
  OneSheeldSerial.write(instanceID);
    18a6:	f6 01       	movw	r30, r12
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	dc 01       	movw	r26, r24
    18ae:	ed 91       	ld	r30, X+
    18b0:	fc 91       	ld	r31, X
    18b2:	01 90       	ld	r0, Z+
    18b4:	f0 81       	ld	r31, Z
    18b6:	e0 2d       	mov	r30, r0
    18b8:	6f a9       	ldd	r22, Y+55	; 0x37
    18ba:	09 95       	icall
  OneSheeldSerial.write(functionID);
    18bc:	f6 01       	movw	r30, r12
    18be:	80 81       	ld	r24, Z
    18c0:	91 81       	ldd	r25, Z+1	; 0x01
    18c2:	dc 01       	movw	r26, r24
    18c4:	ed 91       	ld	r30, X+
    18c6:	fc 91       	ld	r31, X
    18c8:	01 90       	ld	r0, Z+
    18ca:	f0 81       	ld	r31, Z
    18cc:	e0 2d       	mov	r30, r0
    18ce:	68 ad       	ldd	r22, Y+56	; 0x38
    18d0:	09 95       	icall
  OneSheeldSerial.write(argNo);
    18d2:	f6 01       	movw	r30, r12
    18d4:	80 81       	ld	r24, Z
    18d6:	91 81       	ldd	r25, Z+1	; 0x01
    18d8:	dc 01       	movw	r26, r24
    18da:	ed 91       	ld	r30, X+
    18dc:	fc 91       	ld	r31, X
    18de:	01 90       	ld	r0, Z+
    18e0:	f0 81       	ld	r31, Z
    18e2:	e0 2d       	mov	r30, r0
    18e4:	66 2d       	mov	r22, r6
    18e6:	09 95       	icall
  OneSheeldSerial.write(255-argNo);
    18e8:	f6 01       	movw	r30, r12
    18ea:	80 81       	ld	r24, Z
    18ec:	91 81       	ldd	r25, Z+1	; 0x01
    18ee:	dc 01       	movw	r26, r24
    18f0:	ed 91       	ld	r30, X+
    18f2:	fc 91       	ld	r31, X
    18f4:	66 2d       	mov	r22, r6
    18f6:	60 95       	com	r22
    18f8:	01 90       	ld	r0, Z+
    18fa:	f0 81       	ld	r31, Z
    18fc:	e0 2d       	mov	r30, r0
    18fe:	09 95       	icall


  for (int i=0 ; i<argNo ; i++)
    1900:	71 2c       	mov	r7, r1
    1902:	16 14       	cp	r1, r6
    1904:	17 04       	cpc	r1, r7
    1906:	0c f0       	brlt	.+2      	; 0x190a <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x20c>
    1908:	57 c0       	rjmp	.+174    	; 0x19b8 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x2ba>
    190a:	a1 2c       	mov	r10, r1
    190c:	b1 2c       	mov	r11, r1
  {
    FunctionArg * temp = va_arg(arguments, FunctionArg *);
    OneSheeldSerial.write(temp->getLength());
    OneSheeldSerial.write(255-(temp->getLength()));

      for (int j=0 ; j<temp->getLength() ; j++)
    190e:	41 2c       	mov	r4, r1
    1910:	51 2c       	mov	r5, r1
  OneSheeldSerial.write(255-argNo);


  for (int i=0 ; i<argNo ; i++)
  {
    FunctionArg * temp = va_arg(arguments, FunctionArg *);
    1912:	f4 01       	movw	r30, r8
    1914:	e0 80       	ld	r14, Z
    1916:	f1 80       	ldd	r15, Z+1	; 0x01
    1918:	b2 e0       	ldi	r27, 0x02	; 2
    191a:	8b 0e       	add	r8, r27
    191c:	91 1c       	adc	r9, r1
    OneSheeldSerial.write(temp->getLength());
    191e:	f6 01       	movw	r30, r12
    1920:	80 81       	ld	r24, Z
    1922:	91 81       	ldd	r25, Z+1	; 0x01
    1924:	dc 01       	movw	r26, r24
    1926:	ed 91       	ld	r30, X+
    1928:	fc 91       	ld	r31, X
    192a:	01 90       	ld	r0, Z+
    192c:	f0 81       	ld	r31, Z
    192e:	e0 2d       	mov	r30, r0
    1930:	d7 01       	movw	r26, r14
    1932:	6c 91       	ld	r22, X
    1934:	09 95       	icall
    OneSheeldSerial.write(255-(temp->getLength()));
    1936:	f6 01       	movw	r30, r12
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	dc 01       	movw	r26, r24
    193e:	ed 91       	ld	r30, X+
    1940:	fc 91       	ld	r31, X
    1942:	d7 01       	movw	r26, r14
    1944:	6c 91       	ld	r22, X
    1946:	60 95       	com	r22
    1948:	01 90       	ld	r0, Z+
    194a:	f0 81       	ld	r31, Z
    194c:	e0 2d       	mov	r30, r0
    194e:	09 95       	icall

      for (int j=0 ; j<temp->getLength() ; j++)
    1950:	f7 01       	movw	r30, r14
    1952:	80 81       	ld	r24, Z
    1954:	88 23       	and	r24, r24
    1956:	d9 f0       	breq	.+54     	; 0x198e <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x290>
    1958:	04 2d       	mov	r16, r4
    195a:	15 2d       	mov	r17, r5
      {
        byte* tempData=temp->getData();
        OneSheeldSerial.write(tempData[j]);
    195c:	d6 01       	movw	r26, r12
    195e:	8d 91       	ld	r24, X+
    1960:	9c 91       	ld	r25, X
    1962:	fc 01       	movw	r30, r24
    1964:	20 81       	ld	r18, Z
    1966:	31 81       	ldd	r19, Z+1	; 0x01
    1968:	f7 01       	movw	r30, r14
    196a:	a1 81       	ldd	r26, Z+1	; 0x01
    196c:	b2 81       	ldd	r27, Z+2	; 0x02
    196e:	a0 0f       	add	r26, r16
    1970:	b1 1f       	adc	r27, r17
    1972:	f9 01       	movw	r30, r18
    1974:	20 81       	ld	r18, Z
    1976:	31 81       	ldd	r19, Z+1	; 0x01
    1978:	6c 91       	ld	r22, X
    197a:	f9 01       	movw	r30, r18
    197c:	09 95       	icall
  {
    FunctionArg * temp = va_arg(arguments, FunctionArg *);
    OneSheeldSerial.write(temp->getLength());
    OneSheeldSerial.write(255-(temp->getLength()));

      for (int j=0 ; j<temp->getLength() ; j++)
    197e:	0f 5f       	subi	r16, 0xFF	; 255
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	d7 01       	movw	r26, r14
    1984:	8c 91       	ld	r24, X
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	08 17       	cp	r16, r24
    198a:	19 07       	cpc	r17, r25
    198c:	3c f3       	brlt	.-50     	; 0x195c <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x25e>
      {
        byte* tempData=temp->getData();
        OneSheeldSerial.write(tempData[j]);
      }
    delete(temp);
    198e:	e1 14       	cp	r14, r1
    1990:	f1 04       	cpc	r15, r1
    1992:	59 f0       	breq	.+22     	; 0x19aa <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x2ac>
	{
		return data;
	}
	~FunctionArg()
	{
		if(saveData)free(data);
    1994:	f7 01       	movw	r30, r14
    1996:	83 81       	ldd	r24, Z+3	; 0x03
    1998:	88 23       	and	r24, r24
    199a:	21 f0       	breq	.+8      	; 0x19a4 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x2a6>
    199c:	81 81       	ldd	r24, Z+1	; 0x01
    199e:	92 81       	ldd	r25, Z+2	; 0x02
    19a0:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <free>
    19a4:	c7 01       	movw	r24, r14
    19a6:	0e 94 90 12 	call	0x2520	; 0x2520 <_ZdlPv>
  OneSheeldSerial.write(functionID);
  OneSheeldSerial.write(argNo);
  OneSheeldSerial.write(255-argNo);


  for (int i=0 ; i<argNo ; i++)
    19aa:	ff ef       	ldi	r31, 0xFF	; 255
    19ac:	af 1a       	sub	r10, r31
    19ae:	bf 0a       	sbc	r11, r31
    19b0:	a6 14       	cp	r10, r6
    19b2:	b7 04       	cpc	r11, r7
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x2ba>
    19b6:	ad cf       	rjmp	.-166    	; 0x1912 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x214>
        OneSheeldSerial.write(tempData[j]);
      }
    delete(temp);

 }
    OneSheeldSerial.write((byte)END_OF_FRAME);
    19b8:	d6 01       	movw	r26, r12
    19ba:	8d 91       	ld	r24, X+
    19bc:	9c 91       	ld	r25, X
    19be:	dc 01       	movw	r26, r24
    19c0:	ed 91       	ld	r30, X+
    19c2:	fc 91       	ld	r31, X
    19c4:	01 90       	ld	r0, Z+
    19c6:	f0 81       	ld	r31, Z
    19c8:	e0 2d       	mov	r30, r0
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	09 95       	icall
    va_end(arguments);
    if(shieldID!=ONESHEELD_ID)lastTimeFrameSent=millis()+1;
    19ce:	33 20       	and	r3, r3
    19d0:	79 f0       	breq	.+30     	; 0x19f0 <_ZN14OneSheeldClass15sendShieldFrameEhhhhz+0x2f2>
    19d2:	0e 94 9f 08 	call	0x113e	; 0x113e <millis>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	a1 1d       	adc	r26, r1
    19de:	b1 1d       	adc	r27, r1
    19e0:	80 93 14 05 	sts	0x0514, r24
    19e4:	90 93 15 05 	sts	0x0515, r25
    19e8:	a0 93 16 05 	sts	0x0516, r26
    19ec:	b0 93 17 05 	sts	0x0517, r27
}
    19f0:	a0 96       	adiw	r28, 0x20	; 32
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	df 90       	pop	r13
    1a0a:	cf 90       	pop	r12
    1a0c:	bf 90       	pop	r11
    1a0e:	af 90       	pop	r10
    1a10:	9f 90       	pop	r9
    1a12:	8f 90       	pop	r8
    1a14:	7f 90       	pop	r7
    1a16:	6f 90       	pop	r6
    1a18:	5f 90       	pop	r5
    1a1a:	4f 90       	pop	r4
    1a1c:	3f 90       	pop	r3
    1a1e:	08 95       	ret

00001a20 <_ZN14OneSheeldClass5beginEv>:
  }

}
//Library Starter
void OneSheeldClass::begin()
{
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	c8 2f       	mov	r28, r24
    1a26:	d9 2f       	mov	r29, r25
  begin(115200);
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	52 ec       	ldi	r21, 0xC2	; 194
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	70 e0       	ldi	r23, 0x00	; 0
    1a30:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN14OneSheeldClass5beginEl>
  sendShieldFrame(ONESHEELD_ID,0,CHECK_APP_CONNECTION,0);
    1a34:	1f 92       	push	r1
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	8f 93       	push	r24
    1a3a:	1f 92       	push	r1
    1a3c:	1f 92       	push	r1
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
  isInit=true;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	80 93 19 05 	sts	0x0519, r24
  // #ifdef INTERNET_SHIELD
  for(int i=0;i<requestsCounter;i++)
    1a4c:	80 91 be 04 	lds	r24, 0x04BE
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	88 23       	and	r24, r24
    1a5e:	b1 f0       	breq	.+44     	; 0x1a8c <_ZN14OneSheeldClass5beginEv+0x6c>
    1a60:	c0 e0       	ldi	r28, 0x00	; 0
    1a62:	d0 e0       	ldi	r29, 0x00	; 0
    requestsArray[i]->sendInitFrame();
    1a64:	ce 01       	movw	r24, r28
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	e0 91 bc 04 	lds	r30, 0x04BC
    1a6e:	f0 91 bd 04 	lds	r31, 0x04BD
    1a72:	e8 0f       	add	r30, r24
    1a74:	f9 1f       	adc	r31, r25
    1a76:	80 81       	ld	r24, Z
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN11HttpRequest13sendInitFrameEv>
{
  begin(115200);
  sendShieldFrame(ONESHEELD_ID,0,CHECK_APP_CONNECTION,0);
  isInit=true;
  // #ifdef INTERNET_SHIELD
  for(int i=0;i<requestsCounter;i++)
    1a7e:	21 96       	adiw	r28, 0x01	; 1
    1a80:	80 91 be 04 	lds	r24, 0x04BE
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	c8 17       	cp	r28, r24
    1a88:	d9 07       	cpc	r29, r25
    1a8a:	64 f3       	brlt	.-40     	; 0x1a64 <_ZN14OneSheeldClass5beginEv+0x44>
    requestsArray[i]->sendInitFrame();
  free(requestsArray);
    1a8c:	80 91 bc 04 	lds	r24, 0x04BC
    1a90:	90 91 bd 04 	lds	r25, 0x04BD
    1a94:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <free>
  // #endif
}
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	08 95       	ret

00001a9e <_ZN14OneSheeldClass12processInputEv>:
          }

}

void OneSheeldClass::processInput()
{
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	ec 01       	movw	r28, r24
  while(OneSheeldSerial.available())
    1aa8:	16 c0       	rjmp	.+44     	; 0x1ad6 <_ZN14OneSheeldClass12processInputEv+0x38>
  {
    byte data=OneSheeldSerial.read();
    1aaa:	88 81       	ld	r24, Y
    1aac:	99 81       	ldd	r25, Y+1	; 0x01
    1aae:	dc 01       	movw	r26, r24
    1ab0:	ed 91       	ld	r30, X+
    1ab2:	fc 91       	ld	r31, X
    1ab4:	06 80       	ldd	r0, Z+6	; 0x06
    1ab6:	f7 81       	ldd	r31, Z+7	; 0x07
    1ab8:	e0 2d       	mov	r30, r0
    1aba:	09 95       	icall
    1abc:	8c 01       	movw	r16, r24
    processInput(data);
    1abe:	bc 01       	movw	r22, r24
    1ac0:	77 27       	eor	r23, r23
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	0e 94 ed 09 	call	0x13da	; 0x13da <_ZN14OneSheeldClass12processInputEi>
    if(isSerialDataCallback)
    1ac8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aca:	88 23       	and	r24, r24
    1acc:	21 f0       	breq	.+8      	; 0x1ad6 <_ZN14OneSheeldClass12processInputEv+0x38>
      serialDataCallback(data);
    1ace:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1ad0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1ad2:	80 2f       	mov	r24, r16
    1ad4:	09 95       	icall

}

void OneSheeldClass::processInput()
{
  while(OneSheeldSerial.available())
    1ad6:	88 81       	ld	r24, Y
    1ad8:	99 81       	ldd	r25, Y+1	; 0x01
    1ada:	dc 01       	movw	r26, r24
    1adc:	ed 91       	ld	r30, X+
    1ade:	fc 91       	ld	r31, X
    1ae0:	04 80       	ldd	r0, Z+4	; 0x04
    1ae2:	f5 81       	ldd	r31, Z+5	; 0x05
    1ae4:	e0 2d       	mov	r30, r0
    1ae6:	09 95       	icall
    1ae8:	89 2b       	or	r24, r25
    1aea:	f9 f6       	brne	.-66     	; 0x1aaa <_ZN14OneSheeldClass12processInputEv+0xc>
    byte data=OneSheeldSerial.read();
    processInput(data);
    if(isSerialDataCallback)
      serialDataCallback(data);
  }
}
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	08 95       	ret

00001af6 <_ZN14OneSheeldClass13isInACallbackEv>:
  }
}

bool OneSheeldClass::isInACallback()
{
  return inACallback && !callbacksInterrupts;
    1af6:	80 91 13 05 	lds	r24, 0x0513
    1afa:	88 23       	and	r24, r24
    1afc:	21 f0       	breq	.+8      	; 0x1b06 <_ZN14OneSheeldClass13isInACallbackEv+0x10>
    1afe:	90 91 12 05 	lds	r25, 0x0512
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 27       	eor	r24, r25
}
    1b06:	08 95       	ret

00001b08 <_ZN14OneSheeldClass17enteringACallbackEv>:
    unsigned char pwm_out=(unsigned char)(ceil)(fraction*255);
    return pwm_out;
}

void OneSheeldClass::enteringACallback()
{
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	c8 2f       	mov	r28, r24
    1b0e:	d9 2f       	mov	r29, r25
  if(!isInACallback())
    1b10:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN14OneSheeldClass13isInACallbackEv>
    1b14:	81 11       	cpse	r24, r1
    1b16:	12 c0       	rjmp	.+36     	; 0x1b3c <_ZN14OneSheeldClass17enteringACallbackEv+0x34>
  {
    inACallback=true;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	80 93 13 05 	sts	0x0513, r24
    sendShieldFrame(ONESHEELD_ID,0,CALLBACK_ENTERED,0);
    1b1e:	1f 92       	push	r1
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	8f 93       	push	r24
    1b24:	1f 92       	push	r1
    1b26:	1f 92       	push	r1
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
  }
}
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	08 95       	ret

00001b42 <_ZN14OneSheeldClass16exitingACallbackEv>:

void OneSheeldClass::exitingACallback()
{
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	c8 2f       	mov	r28, r24
    1b48:	d9 2f       	mov	r29, r25
  if(isInACallback())
    1b4a:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN14OneSheeldClass13isInACallbackEv>
    1b4e:	88 23       	and	r24, r24
    1b50:	89 f0       	breq	.+34     	; 0x1b74 <_ZN14OneSheeldClass16exitingACallbackEv+0x32>
  {
    inACallback=false;
    1b52:	10 92 13 05 	sts	0x0513, r1
    sendShieldFrame(ONESHEELD_ID,0,CALLBACK_EXITED,0);
    1b56:	1f 92       	push	r1
    1b58:	84 e0       	ldi	r24, 0x04	; 4
    1b5a:	8f 93       	push	r24
    1b5c:	1f 92       	push	r1
    1b5e:	1f 92       	push	r1
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
  }
}
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret

00001b7a <_Z11serialEventv>:
#else
OneSheeldClass OneSheeld(Serial);
void serialEvent()
#endif
{
  OneSheeld.processInput();      
    1b7a:	8c e9       	ldi	r24, 0x9C	; 156
    1b7c:	94 e0       	ldi	r25, 0x04	; 4
    1b7e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <_ZN14OneSheeldClass12processInputEv>
    1b82:	08 95       	ret

00001b84 <_GLOBAL__sub_I__ZN14OneSheeldClass6isInitE>:
bool OneSheeldClass::callbacksInterrupts=false;
bool OneSheeldClass::isFirstFrame=false;
ShieldParent * OneSheeldClass::shieldsArray[]={0};
// #ifdef INTERNET_SHIELD
byte OneSheeldClass::requestsCounter=0;
HttpRequest ** OneSheeldClass::requestsArray=(HttpRequest**)malloc(sizeof(HttpRequest*)*MAX_NO_OF_REQUESTS);
    1b84:	88 e2       	ldi	r24, 0x28	; 40
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <malloc>
    1b8c:	90 93 bd 04 	sts	0x04BD, r25
    1b90:	80 93 bc 04 	sts	0x04BC, r24
//Instantiating Object
#if defined(__AVR_ATmega32U4__) || defined(ARDUINO_LINUX)
OneSheeldClass OneSheeld(Serial1);
void serialEvent1()
#else
OneSheeldClass OneSheeld(Serial);
    1b94:	66 ef       	ldi	r22, 0xF6	; 246
    1b96:	73 e0       	ldi	r23, 0x03	; 3
    1b98:	8c e9       	ldi	r24, 0x9C	; 156
    1b9a:	94 e0       	ldi	r25, 0x04	; 4
    1b9c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <_ZN14OneSheeldClassC1ER6Stream>
    1ba0:	08 95       	ret

00001ba2 <_ZN12PrintlnClassC1Ehhh>:
#define FROM_ONESHEELD_LIBRARY
#include "OneSheeld.h"
#include "OneSheeldPrintln.h"

//Constructor
PrintlnClass::PrintlnClass(byte shid,byte writefnid, byte printfnid):PrintClass(shid,writefnid,printfnid)
    1ba2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <_ZN10PrintClassC1Ehhh>
    1ba6:	08 95       	ret

00001ba8 <_ZN12PrintlnClass7printlnEPKc>:
	
	print(stringPointer);
}
//Print string with newline
void PrintlnClass::println(const char * stringData)
{
    1ba8:	cf 92       	push	r12
    1baa:	df 92       	push	r13
    1bac:	ef 92       	push	r14
    1bae:	ff 92       	push	r15
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	7c 01       	movw	r14, r24
	stringNewLine[0]='\0';
	strcat(stringNewLine,stringData);
	strcat(stringNewLine,"\r\n");

	print(stringNewLine);
}
    1bbe:	0d b7       	in	r16, 0x3d	; 61
    1bc0:	1e b7       	in	r17, 0x3e	; 62
	print(stringPointer);
}
//Print string with newline
void PrintlnClass::println(const char * stringData)
{
	char stringNewLine[strlen(stringData)+3];
    1bc2:	fb 01       	movw	r30, r22
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	00 20       	and	r0, r0
    1bc8:	e9 f7       	brne	.-6      	; 0x1bc4 <_ZN12PrintlnClass7printlnEPKc+0x1c>
    1bca:	9f 01       	movw	r18, r30
    1bcc:	26 1b       	sub	r18, r22
    1bce:	37 0b       	sbc	r19, r23
    1bd0:	2e 5f       	subi	r18, 0xFE	; 254
    1bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd4:	8d b7       	in	r24, 0x3d	; 61
    1bd6:	9e b7       	in	r25, 0x3e	; 62
    1bd8:	82 1b       	sub	r24, r18
    1bda:	93 0b       	sbc	r25, r19
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	9e bf       	out	0x3e, r25	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	8d bf       	out	0x3d, r24	; 61
    1be6:	ed b7       	in	r30, 0x3d	; 61
    1be8:	fe b7       	in	r31, 0x3e	; 62
    1bea:	31 96       	adiw	r30, 0x01	; 1
    1bec:	6f 01       	movw	r12, r30
	stringNewLine[0]='\0';
    1bee:	ed b7       	in	r30, 0x3d	; 61
    1bf0:	fe b7       	in	r31, 0x3e	; 62
    1bf2:	11 82       	std	Z+1, r1	; 0x01
	strcat(stringNewLine,stringData);
    1bf4:	c6 01       	movw	r24, r12
    1bf6:	0e 94 1a 18 	call	0x3034	; 0x3034 <strcat>
	strcat(stringNewLine,"\r\n");
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	01 90       	ld	r0, Z+
    1bfe:	00 20       	and	r0, r0
    1c00:	e9 f7       	brne	.-6      	; 0x1bfc <_ZN12PrintlnClass7printlnEPKc+0x54>
    1c02:	31 97       	sbiw	r30, 0x01	; 1
    1c04:	8d e0       	ldi	r24, 0x0D	; 13
    1c06:	9a e0       	ldi	r25, 0x0A	; 10
    1c08:	a0 e0       	ldi	r26, 0x00	; 0
    1c0a:	80 83       	st	Z, r24
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	a2 83       	std	Z+2, r26	; 0x02

	print(stringNewLine);
    1c10:	b6 01       	movw	r22, r12
    1c12:	c7 01       	movw	r24, r14
    1c14:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <_ZN10PrintClass5printEPKc>
}
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	1e bf       	out	0x3e, r17	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	0d bf       	out	0x3d, r16	; 61
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
    1c32:	08 95       	ret

00001c34 <_ZN12ShieldParent11processDataEv>:
class ShieldParent
{
protected:
	ShieldParent(byte);
	virtual void processFrame(void);
	virtual void processData(void){};
    1c34:	08 95       	ret

00001c36 <_ZN12ShieldParentC1Eh>:
#include "OneSheeld.h"

OneSheeldClass * ShieldParent::oneSheeldInstance=NULL;
bool ShieldParent::oneSheeldInstanceAvailable=false;

ShieldParent::ShieldParent(byte shieldNo)
    1c36:	28 ed       	ldi	r18, 0xD8	; 216
    1c38:	31 e0       	ldi	r19, 0x01	; 1
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	31 83       	std	Z+1, r19	; 0x01
    1c3e:	20 83       	st	Z, r18
{
	shieldID = shieldNo ;
    1c40:	63 83       	std	Z+3, r22	; 0x03
	isCallBackSet=false;
    1c42:	12 82       	std	Z+2, r1	; 0x02
	OneSheeldClass::addToShieldsArray(this);
    1c44:	0e 94 02 09 	call	0x1204	; 0x1204 <_ZN14OneSheeldClass17addToShieldsArrayEP12ShieldParent>
    1c48:	08 95       	ret

00001c4a <_ZN12ShieldParent11getShieldIdEv>:
}

byte ShieldParent::getShieldId()
{
	return shieldID;
}
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	83 81       	ldd	r24, Z+3	; 0x03
    1c4e:	08 95       	ret

00001c50 <_ZN12ShieldParent20setOneSheeldInstanceER14OneSheeldClass>:
  return OneSheeld.isInACallback();
}

void ShieldParent::setOneSheeldInstance(OneSheeldClass & instance)
{
	oneSheeldInstance=&instance;
    1c50:	90 93 1c 05 	sts	0x051C, r25
    1c54:	80 93 1b 05 	sts	0x051B, r24
	oneSheeldInstanceAvailable=true;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	80 93 1a 05 	sts	0x051A, r24
    1c5e:	08 95       	ret

00001c60 <_ZN12ShieldParent22unSetOneSheeldInstanceEv>:
}

void ShieldParent::unSetOneSheeldInstance()
{
	oneSheeldInstance=NULL;
    1c60:	10 92 1c 05 	sts	0x051C, r1
    1c64:	10 92 1b 05 	sts	0x051B, r1
	oneSheeldInstanceAvailable=false;
    1c68:	10 92 1a 05 	sts	0x051A, r1
    1c6c:	08 95       	ret

00001c6e <_ZN12ShieldParent20getOneSheeldInstanceEv>:
}

OneSheeldClass & ShieldParent::getOneSheeldInstance()
{
	if(oneSheeldInstanceAvailable)return *oneSheeldInstance;
    1c6e:	80 91 1a 05 	lds	r24, 0x051A
    1c72:	88 23       	and	r24, r24
    1c74:	29 f0       	breq	.+10     	; 0x1c80 <_ZN12ShieldParent20getOneSheeldInstanceEv+0x12>
    1c76:	80 91 1b 05 	lds	r24, 0x051B
    1c7a:	90 91 1c 05 	lds	r25, 0x051C
    1c7e:	08 95       	ret
	else return OneSheeld;
    1c80:	8c e9       	ldi	r24, 0x9C	; 156
    1c82:	94 e0       	ldi	r25, 0x04	; 4
}
    1c84:	08 95       	ret

00001c86 <_ZN12ShieldParent12processFrameEv>:

void ShieldParent::processFrame()
{
    1c86:	1f 93       	push	r17
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	ec 01       	movw	r28, r24
	if(shieldID!=getOneSheeldInstance().getShieldId())return;
    1c8e:	1b 81       	ldd	r17, Y+3	; 0x03
    1c90:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_ZN12ShieldParent20getOneSheeldInstanceEv>
    1c94:	0e 94 12 09 	call	0x1224	; 0x1224 <_ZN14OneSheeldClass11getShieldIdEv>
    1c98:	18 13       	cpse	r17, r24
    1c9a:	23 c0       	rjmp	.+70     	; 0x1ce2 <_ZN12ShieldParent12processFrameEv+0x5c>
	byte functionID = getOneSheeldInstance().getFunctionId();
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_ZN12ShieldParent20getOneSheeldInstanceEv>
    1ca2:	0e 94 15 09 	call	0x122a	; 0x122a <_ZN14OneSheeldClass13getFunctionIdEv>

	if(functionID == CHECK_SELECTED)
    1ca6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ca8:	a9 f4       	brne	.+42     	; 0x1cd4 <_ZN12ShieldParent12processFrameEv+0x4e>
	{
		if(isCallBackSet && !isInACallback())
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	88 23       	and	r24, r24
    1cae:	c9 f0       	breq	.+50     	; 0x1ce2 <_ZN12ShieldParent12processFrameEv+0x5c>
  OneSheeld.exitingACallback();
}

bool ShieldParent::isInACallback()
{
  return OneSheeld.isInACallback();
    1cb0:	8c e9       	ldi	r24, 0x9C	; 156
    1cb2:	94 e0       	ldi	r25, 0x04	; 4
    1cb4:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN14OneSheeldClass13isInACallbackEv>
	if(shieldID!=getOneSheeldInstance().getShieldId())return;
	byte functionID = getOneSheeldInstance().getFunctionId();

	if(functionID == CHECK_SELECTED)
	{
		if(isCallBackSet && !isInACallback())
    1cb8:	81 11       	cpse	r24, r1
    1cba:	13 c0       	rjmp	.+38     	; 0x1ce2 <_ZN12ShieldParent12processFrameEv+0x5c>
	return shieldID;
}

void ShieldParent::enteringACallback()
{
  OneSheeld.enteringACallback();
    1cbc:	8c e9       	ldi	r24, 0x9C	; 156
    1cbe:	94 e0       	ldi	r25, 0x04	; 4
    1cc0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_ZN14OneSheeldClass17enteringACallbackEv>
	if(functionID == CHECK_SELECTED)
	{
		if(isCallBackSet && !isInACallback())
		{
				enteringACallback();
				(*selectedCallBack)();
    1cc4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cc6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc8:	09 95       	icall
  OneSheeld.enteringACallback();
}

void ShieldParent::exitingACallback()
{
  OneSheeld.exitingACallback();
    1cca:	8c e9       	ldi	r24, 0x9C	; 156
    1ccc:	94 e0       	ldi	r25, 0x04	; 4
    1cce:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <_ZN14OneSheeldClass16exitingACallbackEv>
    1cd2:	07 c0       	rjmp	.+14     	; 0x1ce2 <_ZN12ShieldParent12processFrameEv+0x5c>
				enteringACallback();
				(*selectedCallBack)();
				exitingACallback();
		}
	}
	else processData();
    1cd4:	e8 81       	ld	r30, Y
    1cd6:	f9 81       	ldd	r31, Y+1	; 0x01
    1cd8:	02 80       	ldd	r0, Z+2	; 0x02
    1cda:	f3 81       	ldd	r31, Z+3	; 0x03
    1cdc:	e0 2d       	mov	r30, r0
    1cde:	ce 01       	movw	r24, r28
    1ce0:	09 95       	icall
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	08 95       	ret

00001cea <_ZN14TerminalShield11processDataEv>:
  return count;
}

//Terminal Incomming Data processing
void TerminalShield::processData()
{
    1cea:	6f 92       	push	r6
    1cec:	7f 92       	push	r7
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	7c 01       	movw	r14, r24
	byte functionID = getOneSheeldInstance().getFunctionId();
    1d08:	78 2e       	mov	r7, r24
    1d0a:	6f 2c       	mov	r6, r15
    1d0c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_ZN12ShieldParent20getOneSheeldInstanceEv>
    1d10:	0e 94 15 09 	call	0x122a	; 0x122a <_ZN14OneSheeldClass13getFunctionIdEv>
    1d14:	c8 2f       	mov	r28, r24
	byte dataLength = getOneSheeldInstance().getArgumentLength(0);
    1d16:	c7 01       	movw	r24, r14
    1d18:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_ZN12ShieldParent20getOneSheeldInstanceEv>
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	0e 94 18 09 	call	0x1230	; 0x1230 <_ZN14OneSheeldClass17getArgumentLengthEh>
	if(functionID == TERMINAL_READ)
    1d22:	c1 30       	cpi	r28, 0x01	; 1
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <_ZN14TerminalShield11processDataEv+0x3e>
    1d26:	46 c0       	rjmp	.+140    	; 0x1db4 <_ZN14TerminalShield11processDataEv+0xca>
	{
			for (int j=0; j<dataLength; j++)
    1d28:	c8 2e       	mov	r12, r24
    1d2a:	d1 2c       	mov	r13, r1
    1d2c:	1c 14       	cp	r1, r12
    1d2e:	1d 04       	cpc	r1, r13
    1d30:	0c f0       	brlt	.+2      	; 0x1d34 <_ZN14TerminalShield11processDataEv+0x4a>
    1d32:	40 c0       	rjmp	.+128    	; 0x1db4 <_ZN14TerminalShield11processDataEv+0xca>
    1d34:	81 2c       	mov	r8, r1
    1d36:	91 2c       	mov	r9, r1
public:
  CircularBuffer() :
    wp_(buf_), rp_(buf_), tail_(buf_+Size),  remain_(0) {}
  ~CircularBuffer() {}
  void push(T value) {
    if(remain_==Size)return;
    1d38:	e7 01       	movw	r28, r14
    1d3a:	c1 5b       	subi	r28, 0xB1	; 177
    1d3c:	df 4f       	sbci	r29, 0xFF	; 255
    *wp_++ = value;
    1d3e:	87 01       	movw	r16, r14
    1d40:	07 5b       	subi	r16, 0xB7	; 183
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    remain_++;
    if (wp_ == tail_) wp_ = buf_;
    1d44:	57 01       	movw	r10, r14
    1d46:	8d e4       	ldi	r24, 0x4D	; 77
    1d48:	a8 0e       	add	r10, r24
    1d4a:	b1 1c       	adc	r11, r1
    1d4c:	a9 e0       	ldi	r26, 0x09	; 9
    1d4e:	ea 0e       	add	r14, r26
    1d50:	f1 1c       	adc	r15, r1
			{
				buffer.push(getOneSheeldInstance().getArgumentData(0)[j]);
    1d52:	87 2d       	mov	r24, r7
    1d54:	96 2d       	mov	r25, r6
    1d56:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_ZN12ShieldParent20getOneSheeldInstanceEv>
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN14OneSheeldClass15getArgumentDataEh>
    1d60:	88 0d       	add	r24, r8
    1d62:	99 1d       	adc	r25, r9
    1d64:	fc 01       	movw	r30, r24
    1d66:	20 81       	ld	r18, Z
public:
  CircularBuffer() :
    wp_(buf_), rp_(buf_), tail_(buf_+Size),  remain_(0) {}
  ~CircularBuffer() {}
  void push(T value) {
    if(remain_==Size)return;
    1d68:	88 81       	ld	r24, Y
    1d6a:	99 81       	ldd	r25, Y+1	; 0x01
    1d6c:	80 34       	cpi	r24, 0x40	; 64
    1d6e:	91 05       	cpc	r25, r1
    1d70:	d9 f0       	breq	.+54     	; 0x1da8 <_ZN14TerminalShield11processDataEv+0xbe>
    *wp_++ = value;
    1d72:	d8 01       	movw	r26, r16
    1d74:	ed 91       	ld	r30, X+
    1d76:	fc 91       	ld	r31, X
    1d78:	11 97       	sbiw	r26, 0x01	; 1
    1d7a:	cf 01       	movw	r24, r30
    1d7c:	01 96       	adiw	r24, 0x01	; 1
    1d7e:	11 96       	adiw	r26, 0x01	; 1
    1d80:	9c 93       	st	X, r25
    1d82:	8e 93       	st	-X, r24
    1d84:	20 83       	st	Z, r18
    remain_++;
    1d86:	28 81       	ld	r18, Y
    1d88:	39 81       	ldd	r19, Y+1	; 0x01
    1d8a:	2f 5f       	subi	r18, 0xFF	; 255
    1d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8e:	39 83       	std	Y+1, r19	; 0x01
    1d90:	28 83       	st	Y, r18
    if (wp_ == tail_) wp_ = buf_;
    1d92:	2d 91       	ld	r18, X+
    1d94:	3c 91       	ld	r19, X
    1d96:	11 97       	sbiw	r26, 0x01	; 1
    1d98:	f5 01       	movw	r30, r10
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	28 17       	cp	r18, r24
    1da0:	39 07       	cpc	r19, r25
    1da2:	11 f4       	brne	.+4      	; 0x1da8 <_ZN14TerminalShield11processDataEv+0xbe>
    1da4:	ed 92       	st	X+, r14
    1da6:	fc 92       	st	X, r15
{
	byte functionID = getOneSheeldInstance().getFunctionId();
	byte dataLength = getOneSheeldInstance().getArgumentLength(0);
	if(functionID == TERMINAL_READ)
	{
			for (int j=0; j<dataLength; j++)
    1da8:	ff ef       	ldi	r31, 0xFF	; 255
    1daa:	8f 1a       	sub	r8, r31
    1dac:	9f 0a       	sbc	r9, r31
    1dae:	8c 14       	cp	r8, r12
    1db0:	9d 04       	cpc	r9, r13
    1db2:	79 f6       	brne	.-98     	; 0x1d52 <_ZN14TerminalShield11processDataEv+0x68>
			{
				buffer.push(getOneSheeldInstance().getArgumentData(0)[j]);
			}
	}
}
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	df 90       	pop	r13
    1dc2:	cf 90       	pop	r12
    1dc4:	bf 90       	pop	r11
    1dc6:	af 90       	pop	r10
    1dc8:	9f 90       	pop	r9
    1dca:	8f 90       	pop	r8
    1dcc:	7f 90       	pop	r7
    1dce:	6f 90       	pop	r6
    1dd0:	08 95       	ret

00001dd2 <_ZN14TerminalShieldC1Ev>:
#define FROM_ONESHEELD_LIBRARY
#include "OneSheeld.h"
#include "TerminalShield.h"

//Constructor
TerminalShield::TerminalShield():PrintlnClass(TERMINAL_ID,TERMINAL_WRITE,TERMINAL_PRINT),ShieldParent(TERMINAL_ID)
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	ec 01       	movw	r28, r24
    1dd8:	22 e0       	ldi	r18, 0x02	; 2
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	66 e2       	ldi	r22, 0x26	; 38
    1dde:	06 96       	adiw	r24, 0x06	; 6
    1de0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN12PrintlnClassC1Ehhh>
    1de4:	66 e2       	ldi	r22, 0x26	; 38
    1de6:	ce 01       	movw	r24, r28
    1de8:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12ShieldParentC1Eh>
    1dec:	80 ee       	ldi	r24, 0xE0	; 224
    1dee:	91 e0       	ldi	r25, 0x01	; 1
    1df0:	99 83       	std	Y+1, r25	; 0x01
    1df2:	88 83       	st	Y, r24

template <typename T, uint16_t Size>
class CircularBuffer {
public:
  CircularBuffer() :
    wp_(buf_), rp_(buf_), tail_(buf_+Size),  remain_(0) {}
    1df4:	ce 01       	movw	r24, r28
    1df6:	09 96       	adiw	r24, 0x09	; 9
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e7 5b       	subi	r30, 0xB7	; 183
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	de 01       	movw	r26, r28
    1e04:	a5 5b       	subi	r26, 0xB5	; 181
    1e06:	bf 4f       	sbci	r27, 0xFF	; 255
    1e08:	11 96       	adiw	r26, 0x01	; 1
    1e0a:	9c 93       	st	X, r25
    1e0c:	8e 93       	st	-X, r24
    1e0e:	12 96       	adiw	r26, 0x02	; 2
    1e10:	ed 93       	st	X+, r30
    1e12:	fc 93       	st	X, r31
    1e14:	c1 5b       	subi	r28, 0xB1	; 177
    1e16:	df 4f       	sbci	r29, 0xFF	; 255
    1e18:	19 82       	std	Y+1, r1	; 0x01
    1e1a:	18 82       	st	Y, r1
{}
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	08 95       	ret

00001e22 <_ZN11HttpRequest13sendInitFrameEPKc>:
		free (url);
	}
}

void HttpRequest::sendInitFrame(const char * _url)
{
    1e22:	cf 92       	push	r12
    1e24:	df 92       	push	r13
    1e26:	ef 92       	push	r14
    1e28:	ff 92       	push	r15
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
	//Check length of string 
	int _urlLength = strlen(_url);
    1e32:	fb 01       	movw	r30, r22
    1e34:	01 90       	ld	r0, Z+
    1e36:	00 20       	and	r0, r0
    1e38:	e9 f7       	brne	.-6      	; 0x1e34 <_ZN11HttpRequest13sendInitFrameEPKc+0x12>
    1e3a:	31 97       	sbiw	r30, 0x01	; 1
    1e3c:	ef 01       	movw	r28, r30
    1e3e:	c6 1b       	sub	r28, r22
    1e40:	d7 0b       	sbc	r29, r23
	if(!_urlLength) return;
    1e42:	f1 f1       	breq	.+124    	; 0x1ec0 <_ZN11HttpRequest13sendInitFrameEPKc+0x9e>
    1e44:	8b 01       	movw	r16, r22
    1e46:	7c 01       	movw	r14, r24
	OneSheeld.sendShieldFrame(INTERNET_ID,0,HTTP_REQUEST_URL,2,new FunctionArg(2,(byte*)localRequestId),
														  new FunctionArg(_urlLength,(byte*)_url));
    1e48:	84 e0       	ldi	r24, 0x04	; 4
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 8d 12 	call	0x251a	; 0x251a <_Znwj>
    1e50:	6c 01       	movw	r12, r24
	byte * data;
	bool saveData;
public:
	FunctionArg(int l ,byte * d, bool _saveData=false)
	{
		saveData=_saveData;
    1e52:	dc 01       	movw	r26, r24
    1e54:	13 96       	adiw	r26, 0x03	; 3
    1e56:	1c 92       	st	X, r1
		length=(l>0xff)?0xff:l;
    1e58:	fe 01       	movw	r30, r28
    1e5a:	cf 3f       	cpi	r28, 0xFF	; 255
    1e5c:	d1 05       	cpc	r29, r1
    1e5e:	19 f0       	breq	.+6      	; 0x1e66 <_ZN11HttpRequest13sendInitFrameEPKc+0x44>
    1e60:	14 f0       	brlt	.+4      	; 0x1e66 <_ZN11HttpRequest13sendInitFrameEPKc+0x44>
    1e62:	ef ef       	ldi	r30, 0xFF	; 255
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	d6 01       	movw	r26, r12
    1e68:	ec 93       	st	X, r30
			data=(byte *)malloc(sizeof(byte)*length);
			memcpy(data,d,length);
		}
		else
		{
			data=d;
    1e6a:	12 96       	adiw	r26, 0x02	; 2
    1e6c:	1c 93       	st	X, r17
    1e6e:	0e 93       	st	-X, r16
    1e70:	11 97       	sbiw	r26, 0x01	; 1
    1e72:	84 e0       	ldi	r24, 0x04	; 4
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	0e 94 8d 12 	call	0x251a	; 0x251a <_Znwj>
    1e7a:	fc 01       	movw	r30, r24
	byte * data;
	bool saveData;
public:
	FunctionArg(int l ,byte * d, bool _saveData=false)
	{
		saveData=_saveData;
    1e7c:	13 82       	std	Z+3, r1	; 0x03
		length=(l>0xff)?0xff:l;
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	80 83       	st	Z, r24
void HttpRequest::sendInitFrame(const char * _url)
{
	//Check length of string 
	int _urlLength = strlen(_url);
	if(!_urlLength) return;
	OneSheeld.sendShieldFrame(INTERNET_ID,0,HTTP_REQUEST_URL,2,new FunctionArg(2,(byte*)localRequestId),
    1e82:	97 01       	movw	r18, r14
    1e84:	2d 5f       	subi	r18, 0xFD	; 253
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
			data=(byte *)malloc(sizeof(byte)*length);
			memcpy(data,d,length);
		}
		else
		{
			data=d;
    1e88:	32 83       	std	Z+2, r19	; 0x02
    1e8a:	21 83       	std	Z+1, r18	; 0x01
														  new FunctionArg(_urlLength,(byte*)_url));
    1e8c:	df 92       	push	r13
    1e8e:	cf 92       	push	r12
    1e90:	ff 93       	push	r31
    1e92:	ef 93       	push	r30
    1e94:	8f 93       	push	r24
    1e96:	c1 e0       	ldi	r28, 0x01	; 1
    1e98:	cf 93       	push	r28
    1e9a:	1f 92       	push	r1
    1e9c:	89 e2       	ldi	r24, 0x29	; 41
    1e9e:	8f 93       	push	r24
    1ea0:	8c e9       	ldi	r24, 0x9C	; 156
    1ea2:	94 e0       	ldi	r25, 0x04	; 4
    1ea4:	9f 93       	push	r25
    1ea6:	8f 93       	push	r24
    1ea8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
	isInitFrameSent=true;
    1eac:	f7 01       	movw	r30, r14
    1eae:	c0 83       	st	Z, r28
    1eb0:	8d b7       	in	r24, 0x3d	; 61
    1eb2:	9e b7       	in	r25, 0x3e	; 62
    1eb4:	0a 96       	adiw	r24, 0x0a	; 10
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	9e bf       	out	0x3e, r25	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	8d bf       	out	0x3d, r24	; 61
}
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	08 95       	ret

00001ed2 <_ZN11HttpRequest13sendInitFrameEv>:
		sendInitFrame(_url);
	}
}
// #endif
void HttpRequest::sendInitFrame()
{
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
	if(!isInitFrameSent)
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	20 81       	ld	r18, Z
    1eda:	21 11       	cpse	r18, r1
    1edc:	09 c0       	rjmp	.+18     	; 0x1ef0 <_ZN11HttpRequest13sendInitFrameEv+0x1e>
    1ede:	ec 01       	movw	r28, r24
	{
		sendInitFrame(url);
    1ee0:	61 81       	ldd	r22, Z+1	; 0x01
    1ee2:	72 81       	ldd	r23, Z+2	; 0x02
    1ee4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_ZN11HttpRequest13sendInitFrameEPKc>
		free (url);
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <free>
	}
}
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	08 95       	ret

00001ef6 <_ZN10PrintClassC1Ehhh>:




//Constructor 
PrintClass::PrintClass(byte shid,byte writefnid, byte printfnid)
    1ef6:	fc 01       	movw	r30, r24
{
	shieldId=shid;
    1ef8:	62 83       	std	Z+2, r22	; 0x02
	print_fn_id=printfnid;
    1efa:	20 83       	st	Z, r18
	write_fn_id=writefnid;
    1efc:	41 83       	std	Z+1, r20	; 0x01
    1efe:	08 95       	ret

00001f00 <_ZN10PrintClass5printEPKc>:
	
	OneSheeld.sendShieldFrame(shieldId,0,print_fn_id,1,new FunctionArg(strlen(stringPointer),(byte *)stringPointer));	
}
//Print string
void PrintClass::print(const char * stringData)
{
    1f00:	ef 92       	push	r14
    1f02:	ff 92       	push	r15
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
	//Check length of string 
	int stringDataLength = strlen(stringData);
    1f0c:	fb 01       	movw	r30, r22
    1f0e:	01 90       	ld	r0, Z+
    1f10:	00 20       	and	r0, r0
    1f12:	e9 f7       	brne	.-6      	; 0x1f0e <_ZN10PrintClass5printEPKc+0xe>
    1f14:	31 97       	sbiw	r30, 0x01	; 1
    1f16:	ef 01       	movw	r28, r30
    1f18:	c6 1b       	sub	r28, r22
    1f1a:	d7 0b       	sbc	r29, r23
	if(!stringDataLength) return;
    1f1c:	71 f1       	breq	.+92     	; 0x1f7a <_ZN10PrintClass5printEPKc+0x7a>
    1f1e:	8b 01       	movw	r16, r22
    1f20:	7c 01       	movw	r14, r24
	OneSheeld.sendShieldFrame(shieldId,0,print_fn_id,1,new FunctionArg(stringDataLength,(byte*)stringData));	
    1f22:	84 e0       	ldi	r24, 0x04	; 4
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 8d 12 	call	0x251a	; 0x251a <_Znwj>
    1f2a:	dc 01       	movw	r26, r24
	byte * data;
	bool saveData;
public:
	FunctionArg(int l ,byte * d, bool _saveData=false)
	{
		saveData=_saveData;
    1f2c:	13 96       	adiw	r26, 0x03	; 3
    1f2e:	1c 92       	st	X, r1
    1f30:	13 97       	sbiw	r26, 0x03	; 3
		length=(l>0xff)?0xff:l;
    1f32:	fe 01       	movw	r30, r28
    1f34:	cf 3f       	cpi	r28, 0xFF	; 255
    1f36:	d1 05       	cpc	r29, r1
    1f38:	19 f0       	breq	.+6      	; 0x1f40 <_ZN10PrintClass5printEPKc+0x40>
    1f3a:	14 f0       	brlt	.+4      	; 0x1f40 <_ZN10PrintClass5printEPKc+0x40>
    1f3c:	ef ef       	ldi	r30, 0xFF	; 255
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	ec 93       	st	X, r30
			data=(byte *)malloc(sizeof(byte)*length);
			memcpy(data,d,length);
		}
		else
		{
			data=d;
    1f42:	12 96       	adiw	r26, 0x02	; 2
    1f44:	1c 93       	st	X, r17
    1f46:	0e 93       	st	-X, r16
    1f48:	11 97       	sbiw	r26, 0x01	; 1
    1f4a:	bf 93       	push	r27
    1f4c:	af 93       	push	r26
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	8f 93       	push	r24
    1f52:	f7 01       	movw	r30, r14
    1f54:	80 81       	ld	r24, Z
    1f56:	8f 93       	push	r24
    1f58:	1f 92       	push	r1
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	8f 93       	push	r24
    1f5e:	8c e9       	ldi	r24, 0x9C	; 156
    1f60:	94 e0       	ldi	r25, 0x04	; 4
    1f62:	9f 93       	push	r25
    1f64:	8f 93       	push	r24
    1f66:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN14OneSheeldClass15sendShieldFrameEhhhhz>
    1f6a:	8d b7       	in	r24, 0x3d	; 61
    1f6c:	9e b7       	in	r25, 0x3e	; 62
    1f6e:	08 96       	adiw	r24, 0x08	; 8
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	9e bf       	out	0x3e, r25	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	8d bf       	out	0x3d, r24	; 61
}
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	08 95       	ret

00001f88 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    1f88:	20 91 5f 05 	lds	r18, 0x055F
    1f8c:	30 91 60 05 	lds	r19, 0x0560
    1f90:	28 17       	cp	r18, r24
    1f92:	39 07       	cpc	r19, r25
    1f94:	f9 f4       	brne	.+62     	; 0x1fd4 <_ZN14SoftwareSerial4readEv+0x4c>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    1f96:	90 91 1d 05 	lds	r25, 0x051D
    1f9a:	80 91 1e 05 	lds	r24, 0x051E
    1f9e:	98 17       	cp	r25, r24
    1fa0:	e1 f0       	breq	.+56     	; 0x1fda <_ZN14SoftwareSerial4readEv+0x52>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
    1fa2:	e0 91 1d 05 	lds	r30, 0x051D
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	e1 5e       	subi	r30, 0xE1	; 225
    1faa:	fa 4f       	sbci	r31, 0xFA	; 250
    1fac:	80 81       	ld	r24, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
    1fae:	20 91 1d 05 	lds	r18, 0x051D
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	2f 5f       	subi	r18, 0xFF	; 255
    1fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb8:	2f 73       	andi	r18, 0x3F	; 63
    1fba:	30 78       	andi	r19, 0x80	; 128
    1fbc:	33 23       	and	r19, r19
    1fbe:	34 f4       	brge	.+12     	; 0x1fcc <_ZN14SoftwareSerial4readEv+0x44>
    1fc0:	21 50       	subi	r18, 0x01	; 1
    1fc2:	31 09       	sbc	r19, r1
    1fc4:	20 6c       	ori	r18, 0xC0	; 192
    1fc6:	3f 6f       	ori	r19, 0xFF	; 255
    1fc8:	2f 5f       	subi	r18, 0xFF	; 255
    1fca:	3f 4f       	sbci	r19, 0xFF	; 255
    1fcc:	20 93 1d 05 	sts	0x051D, r18
  return d;
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	08 95       	ret

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
    1fd4:	8f ef       	ldi	r24, 0xFF	; 255
    1fd6:	9f ef       	ldi	r25, 0xFF	; 255
    1fd8:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    1fda:	8f ef       	ldi	r24, 0xFF	; 255
    1fdc:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
    1fde:	08 95       	ret

00001fe0 <_ZN14SoftwareSerial9availableEv>:

int SoftwareSerial::available()
{
  if (!isListening())
    1fe0:	20 91 5f 05 	lds	r18, 0x055F
    1fe4:	30 91 60 05 	lds	r19, 0x0560
    1fe8:	28 17       	cp	r18, r24
    1fea:	39 07       	cpc	r19, r25
    1fec:	b1 f4       	brne	.+44     	; 0x201a <_ZN14SoftwareSerial9availableEv+0x3a>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
    1fee:	20 91 1e 05 	lds	r18, 0x051E
    1ff2:	80 91 1d 05 	lds	r24, 0x051D
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	20 5c       	subi	r18, 0xC0	; 192
    1ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffc:	28 1b       	sub	r18, r24
    1ffe:	31 09       	sbc	r19, r1
    2000:	2f 73       	andi	r18, 0x3F	; 63
    2002:	30 78       	andi	r19, 0x80	; 128
    2004:	33 23       	and	r19, r19
    2006:	34 f4       	brge	.+12     	; 0x2014 <_ZN14SoftwareSerial9availableEv+0x34>
    2008:	21 50       	subi	r18, 0x01	; 1
    200a:	31 09       	sbc	r19, r1
    200c:	20 6c       	ori	r18, 0xC0	; 192
    200e:	3f 6f       	ori	r19, 0xFF	; 255
    2010:	2f 5f       	subi	r18, 0xFF	; 255
    2012:	3f 4f       	sbci	r19, 0xFF	; 255
    2014:	82 2f       	mov	r24, r18
    2016:	93 2f       	mov	r25, r19
    2018:	08 95       	ret
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
    201e:	08 95       	ret

00002020 <_ZN14SoftwareSerial5writeEh>:

size_t SoftwareSerial::write(uint8_t b)
{
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	ec 01       	movw	r28, r24
  if (_tx_delay == 0) {
    2028:	4c 8d       	ldd	r20, Y+28	; 0x1c
    202a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    202c:	41 15       	cp	r20, r1
    202e:	51 05       	cpc	r21, r1
    2030:	29 f4       	brne	.+10     	; 0x203c <_ZN14SoftwareSerial5writeEh+0x1c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9b 83       	std	Y+3, r25	; 0x03
    2038:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
    203a:	39 c0       	rjmp	.+114    	; 0x20ae <_ZN14SoftwareSerial5writeEh+0x8e>

  // By declaring these as local variables, the compiler will put them
  // in registers _before_ disabling interrupts and entering the
  // critical timing sections below, which makes it a lot easier to
  // verify the cycle timings
  volatile uint8_t *reg = _transmitPortRegister;
    203c:	a9 89       	ldd	r26, Y+17	; 0x11
    203e:	ba 89       	ldd	r27, Y+18	; 0x12
  uint8_t reg_mask = _transmitBitMask;
    2040:	38 89       	ldd	r19, Y+16	; 0x10
  uint8_t inv_mask = ~_transmitBitMask;
    2042:	83 2f       	mov	r24, r19
    2044:	80 95       	com	r24
  uint8_t oldSREG = SREG;
    2046:	1f b7       	in	r17, 0x3f	; 63
  bool inv = _inverse_logic;
    2048:	9e 8d       	ldd	r25, Y+30	; 0x1e
  uint16_t delay = _tx_delay;

  if (inv)
    204a:	91 fb       	bst	r25, 1
    204c:	77 27       	eor	r23, r23
    204e:	70 f9       	bld	r23, 0
    2050:	91 fd       	sbrc	r25, 1
    b = ~b;
    2052:	60 95       	com	r22

  cli();  // turn off interrupts for a clean txmit
    2054:	f8 94       	cli

  // Write the start bit
  if (inv)
    2056:	77 23       	and	r23, r23
    2058:	21 f0       	breq	.+8      	; 0x2062 <_ZN14SoftwareSerial5writeEh+0x42>
    *reg |= reg_mask;
    205a:	9c 91       	ld	r25, X
    205c:	93 2b       	or	r25, r19
    205e:	9c 93       	st	X, r25
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <_ZN14SoftwareSerial5writeEh+0x48>
  else
    *reg &= inv_mask;
    2062:	9c 91       	ld	r25, X
    2064:	98 23       	and	r25, r24
    2066:	9c 93       	st	X, r25
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2068:	fa 01       	movw	r30, r20
    206a:	31 97       	sbiw	r30, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <_ZN14SoftwareSerial5writeEh+0x4a>
    206e:	98 e0       	ldi	r25, 0x08	; 8
  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
  {
    if (b & 1) // choose bit
    2070:	60 ff       	sbrs	r22, 0
    2072:	04 c0       	rjmp	.+8      	; 0x207c <_ZN14SoftwareSerial5writeEh+0x5c>
      *reg |= reg_mask; // send 1
    2074:	2c 91       	ld	r18, X
    2076:	23 2b       	or	r18, r19
    2078:	2c 93       	st	X, r18
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <_ZN14SoftwareSerial5writeEh+0x62>
    else
      *reg &= inv_mask; // send 0
    207c:	2c 91       	ld	r18, X
    207e:	28 23       	and	r18, r24
    2080:	2c 93       	st	X, r18
    2082:	fa 01       	movw	r30, r20
    2084:	31 97       	sbiw	r30, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <_ZN14SoftwareSerial5writeEh+0x64>

    tunedDelay(delay);
    b >>= 1;
    2088:	66 95       	lsr	r22
    208a:	91 50       	subi	r25, 0x01	; 1
    *reg &= inv_mask;

  tunedDelay(delay);

  // Write each of the 8 bits
  for (uint8_t i = 8; i > 0; --i)
    208c:	89 f7       	brne	.-30     	; 0x2070 <_ZN14SoftwareSerial5writeEh+0x50>
    tunedDelay(delay);
    b >>= 1;
  }

  // restore pin to natural state
  if (inv)
    208e:	77 23       	and	r23, r23
    2090:	21 f0       	breq	.+8      	; 0x209a <_ZN14SoftwareSerial5writeEh+0x7a>
    *reg &= inv_mask;
    2092:	9c 91       	ld	r25, X
    2094:	89 23       	and	r24, r25
    2096:	8c 93       	st	X, r24
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <_ZN14SoftwareSerial5writeEh+0x80>
  else
    *reg |= reg_mask;
    209a:	8c 91       	ld	r24, X
    209c:	38 2b       	or	r19, r24
    209e:	3c 93       	st	X, r19

  SREG = oldSREG; // turn interrupts back on
    20a0:	1f bf       	out	0x3f, r17	; 63
    20a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <_ZN14SoftwareSerial5writeEh+0x86>
  tunedDelay(_tx_delay);
  
  return 1;
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	50 e0       	ldi	r21, 0x00	; 0
}
    20ae:	ca 01       	movw	r24, r20
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	08 95       	ret

000020b8 <_ZN14SoftwareSerial5flushEv>:

void SoftwareSerial::flush()
{
  if (!isListening())
    20b8:	20 91 5f 05 	lds	r18, 0x055F
    20bc:	30 91 60 05 	lds	r19, 0x0560
    20c0:	28 17       	cp	r18, r24
    20c2:	39 07       	cpc	r19, r25
    20c4:	39 f4       	brne	.+14     	; 0x20d4 <_ZN14SoftwareSerial5flushEv+0x1c>
    return;

  uint8_t oldSREG = SREG;
    20c6:	8f b7       	in	r24, 0x3f	; 63
  cli();
    20c8:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
    20ca:	10 92 1e 05 	sts	0x051E, r1
    20ce:	10 92 1d 05 	sts	0x051D, r1
  SREG = oldSREG;
    20d2:	8f bf       	out	0x3f, r24	; 63
    20d4:	08 95       	ret

000020d6 <_ZN14SoftwareSerial4peekEv>:
}

int SoftwareSerial::peek()
{
  if (!isListening())
    20d6:	20 91 5f 05 	lds	r18, 0x055F
    20da:	30 91 60 05 	lds	r19, 0x0560
    20de:	28 17       	cp	r18, r24
    20e0:	39 07       	cpc	r19, r25
    20e2:	71 f4       	brne	.+28     	; 0x2100 <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    20e4:	90 91 1d 05 	lds	r25, 0x051D
    20e8:	80 91 1e 05 	lds	r24, 0x051E
    20ec:	98 17       	cp	r25, r24
    20ee:	59 f0       	breq	.+22     	; 0x2106 <_ZN14SoftwareSerial4peekEv+0x30>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
    20f0:	e0 91 1d 05 	lds	r30, 0x051D
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	e1 5e       	subi	r30, 0xE1	; 225
    20f8:	fa 4f       	sbci	r31, 0xFA	; 250
    20fa:	80 81       	ld	r24, Z
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	08 95       	ret
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	9f ef       	ldi	r25, 0xFF	; 255
    2104:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    2106:	8f ef       	ldi	r24, 0xFF	; 255
    2108:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
    210a:	08 95       	ret

0000210c <_ZN14SoftwareSerial13stopListeningEv>:
}

// Stop listening. Returns true if we were actually listening.
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
    210c:	e0 91 5f 05 	lds	r30, 0x055F
    2110:	f0 91 60 05 	lds	r31, 0x0560
    2114:	e8 17       	cp	r30, r24
    2116:	f9 07       	cpc	r31, r25
    2118:	69 f4       	brne	.+26     	; 0x2134 <_ZN14SoftwareSerial13stopListeningEv+0x28>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    211a:	a3 89       	ldd	r26, Z+19	; 0x13
    211c:	b4 89       	ldd	r27, Z+20	; 0x14
    211e:	9c 91       	ld	r25, X
    2120:	85 89       	ldd	r24, Z+21	; 0x15
    2122:	80 95       	com	r24
    2124:	89 23       	and	r24, r25
    2126:	8c 93       	st	X, r24
bool SoftwareSerial::stopListening()
{
  if (active_object == this)
  {
    setRxIntMsk(false);
    active_object = NULL;
    2128:	10 92 60 05 	sts	0x0560, r1
    212c:	10 92 5f 05 	sts	0x055F, r1
    return true;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	08 95       	ret
  }
  return false;
    2134:	80 e0       	ldi	r24, 0x00	; 0
}
    2136:	08 95       	ret

00002138 <_ZN14SoftwareSerial6listenEv>:
}

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	ec 01       	movw	r28, r24
  if (!_rx_delay_stopbit)
    213e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2140:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2142:	89 2b       	or	r24, r25
    2144:	f1 f0       	breq	.+60     	; 0x2182 <_ZN14SoftwareSerial6listenEv+0x4a>
    return false;

  if (active_object != this)
    2146:	80 91 5f 05 	lds	r24, 0x055F
    214a:	90 91 60 05 	lds	r25, 0x0560
    214e:	8c 17       	cp	r24, r28
    2150:	9d 07       	cpc	r25, r29
    2152:	c9 f0       	breq	.+50     	; 0x2186 <_ZN14SoftwareSerial6listenEv+0x4e>
  {
    if (active_object)
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	11 f0       	breq	.+4      	; 0x215c <_ZN14SoftwareSerial6listenEv+0x24>
      active_object->stopListening();
    2158:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN14SoftwareSerial13stopListeningEv>

    _buffer_overflow = false;
    215c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    215e:	8e 7f       	andi	r24, 0xFE	; 254
    2160:	8e 8f       	std	Y+30, r24	; 0x1e
    _receive_buffer_head = _receive_buffer_tail = 0;
    2162:	10 92 1e 05 	sts	0x051E, r1
    2166:	10 92 1d 05 	sts	0x051D, r1
    active_object = this;
    216a:	d0 93 60 05 	sts	0x0560, r29
    216e:	c0 93 5f 05 	sts	0x055F, r28
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    2172:	eb 89       	ldd	r30, Y+19	; 0x13
    2174:	fc 89       	ldd	r31, Y+20	; 0x14
    2176:	90 81       	ld	r25, Z
    2178:	8d 89       	ldd	r24, Y+21	; 0x15
    217a:	89 2b       	or	r24, r25
    217c:	80 83       	st	Z, r24
    _buffer_overflow = false;
    _receive_buffer_head = _receive_buffer_tail = 0;
    active_object = this;

    setRxIntMsk(true);
    return true;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	03 c0       	rjmp	.+6      	; 0x2188 <_ZN14SoftwareSerial6listenEv+0x50>
// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (!_rx_delay_stopbit)
    return false;
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <_ZN14SoftwareSerial6listenEv+0x50>

    setRxIntMsk(true);
    return true;
  }

  return false;
    2186:	80 e0       	ldi	r24, 0x00	; 0
}
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	08 95       	ret

0000218e <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    218e:	1f 92       	push	r1
    2190:	0f 92       	push	r0
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	0f 92       	push	r0
    2196:	11 24       	eor	r1, r1
    2198:	2f 93       	push	r18
    219a:	3f 93       	push	r19
    219c:	4f 93       	push	r20
    219e:	5f 93       	push	r21
    21a0:	6f 93       	push	r22
    21a2:	7f 93       	push	r23
    21a4:	8f 93       	push	r24
    21a6:	9f 93       	push	r25
    21a8:	af 93       	push	r26
    21aa:	bf 93       	push	r27
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	ef 93       	push	r30
    21b2:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    21b4:	a0 91 5f 05 	lds	r26, 0x055F
    21b8:	b0 91 60 05 	lds	r27, 0x0560
    21bc:	10 97       	sbiw	r26, 0x00	; 0
    21be:	09 f4       	brne	.+2      	; 0x21c2 <__vector_3+0x34>
    21c0:	81 c0       	rjmp	.+258    	; 0x22c4 <__vector_3+0x136>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    21c2:	5e 96       	adiw	r26, 0x1e	; 30
    21c4:	8c 91       	ld	r24, X
    21c6:	5e 97       	sbiw	r26, 0x1e	; 30
    21c8:	81 ff       	sbrs	r24, 1
    21ca:	0d c0       	rjmp	.+26     	; 0x21e6 <__vector_3+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    21cc:	1e 96       	adiw	r26, 0x0e	; 14
    21ce:	ed 91       	ld	r30, X+
    21d0:	fc 91       	ld	r31, X
    21d2:	1f 97       	sbiw	r26, 0x0f	; 15
    21d4:	90 81       	ld	r25, Z
    21d6:	1d 96       	adiw	r26, 0x0d	; 13
    21d8:	8c 91       	ld	r24, X
    21da:	1d 97       	sbiw	r26, 0x0d	; 13
    21dc:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	71 f4       	brne	.+28     	; 0x21fe <__vector_3+0x70>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	0c c0       	rjmp	.+24     	; 0x21fe <__vector_3+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    21e6:	1e 96       	adiw	r26, 0x0e	; 14
    21e8:	ed 91       	ld	r30, X+
    21ea:	fc 91       	ld	r31, X
    21ec:	1f 97       	sbiw	r26, 0x0f	; 15
    21ee:	90 81       	ld	r25, Z
    21f0:	1d 96       	adiw	r26, 0x0d	; 13
    21f2:	8c 91       	ld	r24, X
    21f4:	1d 97       	sbiw	r26, 0x0d	; 13
    21f6:	98 23       	and	r25, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	09 f0       	breq	.+2      	; 0x21fe <__vector_3+0x70>
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	88 23       	and	r24, r24
    2200:	09 f4       	brne	.+2      	; 0x2204 <__vector_3+0x76>
    2202:	60 c0       	rjmp	.+192    	; 0x22c4 <__vector_3+0x136>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    2204:	53 96       	adiw	r26, 0x13	; 19
    2206:	ed 91       	ld	r30, X+
    2208:	fc 91       	ld	r31, X
    220a:	54 97       	sbiw	r26, 0x14	; 20
    220c:	90 81       	ld	r25, Z
    220e:	55 96       	adiw	r26, 0x15	; 21
    2210:	8c 91       	ld	r24, X
    2212:	55 97       	sbiw	r26, 0x15	; 21
    2214:	80 95       	com	r24
    2216:	89 23       	and	r24, r25
    2218:	80 83       	st	Z, r24
    221a:	56 96       	adiw	r26, 0x16	; 22
    221c:	8d 91       	ld	r24, X+
    221e:	9c 91       	ld	r25, X
    2220:	57 97       	sbiw	r26, 0x17	; 23
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <__vector_3+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    2226:	58 96       	adiw	r26, 0x18	; 24
    2228:	6d 91       	ld	r22, X+
    222a:	7c 91       	ld	r23, X
    222c:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    222e:	1e 96       	adiw	r26, 0x0e	; 14
    2230:	cd 91       	ld	r28, X+
    2232:	dc 91       	ld	r29, X
    2234:	1f 97       	sbiw	r26, 0x0f	; 15
    2236:	1d 96       	adiw	r26, 0x0d	; 13
    2238:	5c 91       	ld	r21, X
    223a:	1d 97       	sbiw	r26, 0x0d	; 13
    223c:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	fb 01       	movw	r30, r22
    2242:	31 97       	sbiw	r30, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <__vector_3+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    2246:	84 2f       	mov	r24, r20
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	95 95       	asr	r25
    224c:	87 95       	ror	r24
    224e:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2250:	28 81       	ld	r18, Y
    2252:	25 23       	and	r18, r21
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    2254:	09 f0       	breq	.+2      	; 0x2258 <__vector_3+0xca>
        d |= 0x80;
    2256:	40 68       	ori	r20, 0x80	; 128
    2258:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    225a:	91 f7       	brne	.-28     	; 0x2240 <__vector_3+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    225c:	5e 96       	adiw	r26, 0x1e	; 30
    225e:	8c 91       	ld	r24, X
    2260:	5e 97       	sbiw	r26, 0x1e	; 30
    2262:	81 fd       	sbrc	r24, 1
      d = ~d;
    2264:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    2266:	80 91 1e 05 	lds	r24, 0x051E
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	01 96       	adiw	r24, 0x01	; 1
    226e:	8f 73       	andi	r24, 0x3F	; 63
    2270:	90 78       	andi	r25, 0x80	; 128
    2272:	99 23       	and	r25, r25
    2274:	24 f4       	brge	.+8      	; 0x227e <__vector_3+0xf0>
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	80 6c       	ori	r24, 0xC0	; 192
    227a:	9f 6f       	ori	r25, 0xFF	; 255
    227c:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
    227e:	20 91 1d 05 	lds	r18, 0x051D
    2282:	28 17       	cp	r18, r24
    2284:	49 f0       	breq	.+18     	; 0x2298 <__vector_3+0x10a>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    2286:	e0 91 1e 05 	lds	r30, 0x051E
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	e1 5e       	subi	r30, 0xE1	; 225
    228e:	fa 4f       	sbci	r31, 0xFA	; 250
    2290:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
    2292:	80 93 1e 05 	sts	0x051E, r24
    2296:	07 c0       	rjmp	.+14     	; 0x22a6 <__vector_3+0x118>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    2298:	5e 96       	adiw	r26, 0x1e	; 30
    229a:	8c 91       	ld	r24, X
    229c:	5e 97       	sbiw	r26, 0x1e	; 30
    229e:	81 60       	ori	r24, 0x01	; 1
    22a0:	5e 96       	adiw	r26, 0x1e	; 30
    22a2:	8c 93       	st	X, r24
    22a4:	5e 97       	sbiw	r26, 0x1e	; 30
    22a6:	5a 96       	adiw	r26, 0x1a	; 26
    22a8:	8d 91       	ld	r24, X+
    22aa:	9c 91       	ld	r25, X
    22ac:	5b 97       	sbiw	r26, 0x1b	; 27
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <__vector_3+0x120>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    22b2:	53 96       	adiw	r26, 0x13	; 19
    22b4:	ed 91       	ld	r30, X+
    22b6:	fc 91       	ld	r31, X
    22b8:	54 97       	sbiw	r26, 0x14	; 20
    22ba:	90 81       	ld	r25, Z
    22bc:	55 96       	adiw	r26, 0x15	; 21
    22be:	8c 91       	ld	r24, X
    22c0:	89 2b       	or	r24, r25
    22c2:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    22c4:	ff 91       	pop	r31
    22c6:	ef 91       	pop	r30
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	bf 91       	pop	r27
    22ce:	af 91       	pop	r26
    22d0:	9f 91       	pop	r25
    22d2:	8f 91       	pop	r24
    22d4:	7f 91       	pop	r23
    22d6:	6f 91       	pop	r22
    22d8:	5f 91       	pop	r21
    22da:	4f 91       	pop	r20
    22dc:	3f 91       	pop	r19
    22de:	2f 91       	pop	r18
    22e0:	0f 90       	pop	r0
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	0f 90       	pop	r0
    22e6:	1f 90       	pop	r1
    22e8:	18 95       	reti

000022ea <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    22ea:	28 ee       	ldi	r18, 0xE8	; 232
    22ec:	31 e0       	ldi	r19, 0x01	; 1
    22ee:	fc 01       	movw	r30, r24
    22f0:	31 83       	std	Z+1, r19	; 0x01
    22f2:	20 83       	st	Z, r18
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
    22f4:	0e 94 86 10 	call	0x210c	; 0x210c <_ZN14SoftwareSerial13stopListeningEv>
    22f8:	08 95       	ret

000022fa <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	ec 01       	movw	r28, r24
    2302:	16 2f       	mov	r17, r22
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output hihg. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    2304:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2306:	66 95       	lsr	r22
    2308:	61 70       	andi	r22, 0x01	; 1
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	68 27       	eor	r22, r24
    230e:	81 2f       	mov	r24, r17
    2310:	0e 94 01 13 	call	0x2602	; 0x2602 <digitalWrite>
  pinMode(tx, OUTPUT);
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	81 2f       	mov	r24, r17
    2318:	0e 94 c2 12 	call	0x2584	; 0x2584 <pinMode>
  _transmitBitMask = digitalPinToBitMask(tx);
    231c:	61 2f       	mov	r22, r17
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	fb 01       	movw	r30, r22
    2322:	e4 58       	subi	r30, 0x84	; 132
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	e4 91       	lpm	r30, Z
    2328:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
    232a:	fb 01       	movw	r30, r22
    232c:	e0 57       	subi	r30, 0x70	; 112
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	e2 55       	subi	r30, 0x52	; 82
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	85 91       	lpm	r24, Z+
    233e:	94 91       	lpm	r25, Z
    2340:	9a 8b       	std	Y+18, r25	; 0x12
    2342:	89 8b       	std	Y+17, r24	; 0x11
}
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	08 95       	ret

0000234c <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
    234c:	1f 93       	push	r17
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	ec 01       	movw	r28, r24
    2354:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
    2356:	60 e0       	ldi	r22, 0x00	; 0
    2358:	81 2f       	mov	r24, r17
    235a:	0e 94 c2 12 	call	0x2584	; 0x2584 <pinMode>
  if (!_inverse_logic)
    235e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2360:	81 fd       	sbrc	r24, 1
    2362:	04 c0       	rjmp	.+8      	; 0x236c <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	81 2f       	mov	r24, r17
    2368:	0e 94 01 13 	call	0x2602	; 0x2602 <digitalWrite>
  _receivePin = rx;
    236c:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
    236e:	61 2f       	mov	r22, r17
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	fb 01       	movw	r30, r22
    2374:	e4 58       	subi	r30, 0x84	; 132
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	e4 91       	lpm	r30, Z
    237a:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
    237c:	fb 01       	movw	r30, r22
    237e:	e0 57       	subi	r30, 0x70	; 112
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	ee 0f       	add	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	ec 55       	subi	r30, 0x5C	; 92
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	85 91       	lpm	r24, Z+
    2390:	94 91       	lpm	r25, Z
    2392:	9f 87       	std	Y+15, r25	; 0x0f
    2394:	8e 87       	std	Y+14, r24	; 0x0e
}
    2396:	df 91       	pop	r29
    2398:	cf 91       	pop	r28
    239a:	1f 91       	pop	r17
    239c:	08 95       	ret

0000239e <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    239e:	1f 93       	push	r17
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	ec 01       	movw	r28, r24
    23a6:	16 2f       	mov	r17, r22
  public:
    Print() : write_error(0) {}
    23a8:	1b 82       	std	Y+3, r1	; 0x03
    23aa:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    23ac:	88 ee       	ldi	r24, 0xE8	; 232
    23ae:	93 e0       	ldi	r25, 0x03	; 3
    23b0:	a0 e0       	ldi	r26, 0x00	; 0
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	8c 83       	std	Y+4, r24	; 0x04
    23b6:	9d 83       	std	Y+5, r25	; 0x05
    23b8:	ae 83       	std	Y+6, r26	; 0x06
    23ba:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
    23bc:	88 ee       	ldi	r24, 0xE8	; 232
    23be:	91 e0       	ldi	r25, 0x01	; 1
    23c0:	99 83       	std	Y+1, r25	; 0x01
    23c2:	88 83       	st	Y, r24
    23c4:	1f 8a       	std	Y+23, r1	; 0x17
    23c6:	1e 8a       	std	Y+22, r1	; 0x16
    23c8:	19 8e       	std	Y+25, r1	; 0x19
    23ca:	18 8e       	std	Y+24, r1	; 0x18
    23cc:	1b 8e       	std	Y+27, r1	; 0x1b
    23ce:	1a 8e       	std	Y+26, r1	; 0x1a
    23d0:	1d 8e       	std	Y+29, r1	; 0x1d
    23d2:	1c 8e       	std	Y+28, r1	; 0x1c
    23d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23d6:	8e 7f       	andi	r24, 0xFE	; 254
    23d8:	20 fb       	bst	r18, 0
    23da:	81 f9       	bld	r24, 1
    23dc:	8e 8f       	std	Y+30, r24	; 0x1e
{
  setTX(transmitPin);
    23de:	64 2f       	mov	r22, r20
    23e0:	ce 01       	movw	r24, r28
    23e2:	0e 94 7d 11 	call	0x22fa	; 0x22fa <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
    23e6:	61 2f       	mov	r22, r17
    23e8:	ce 01       	movw	r24, r28
    23ea:	0e 94 a6 11 	call	0x234c	; 0x234c <_ZN14SoftwareSerial5setRXEh>
}
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	1f 91       	pop	r17
    23f4:	08 95       	ret

000023f6 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	ec 01       	movw	r28, r24
    23fc:	9a 01       	movw	r18, r20
    23fe:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2400:	1b 8e       	std	Y+27, r1	; 0x1b
    2402:	1a 8e       	std	Y+26, r1	; 0x1a
    2404:	19 8e       	std	Y+25, r1	; 0x19
    2406:	18 8e       	std	Y+24, r1	; 0x18
    2408:	1f 8a       	std	Y+23, r1	; 0x17
    240a:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    240c:	60 e0       	ldi	r22, 0x00	; 0
    240e:	79 e0       	ldi	r23, 0x09	; 9
    2410:	8d e3       	ldi	r24, 0x3D	; 61
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	0e 94 54 13 	call	0x26a8	; 0x26a8 <__divmodsi4>
    2418:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    241a:	24 30       	cpi	r18, 0x04	; 4
    241c:	31 05       	cpc	r19, r1
    241e:	18 f0       	brcs	.+6      	; 0x2426 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    2420:	c9 01       	movw	r24, r18
    2422:	03 97       	sbiw	r24, 0x03	; 3
    2424:	02 c0       	rjmp	.+4      	; 0x242a <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    242a:	9d 8f       	std	Y+29, r25	; 0x1d
    242c:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    242e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2430:	86 31       	cpi	r24, 0x16	; 22
    2432:	08 f0       	brcs	.+2      	; 0x2436 <_ZN14SoftwareSerial5beginEl+0x40>
    2434:	41 c0       	rjmp	.+130    	; 0x24b8 <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2436:	b9 01       	movw	r22, r18
    2438:	76 95       	lsr	r23
    243a:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    243c:	64 31       	cpi	r22, 0x14	; 20
    243e:	71 05       	cpc	r23, r1
    2440:	18 f0       	brcs	.+6      	; 0x2448 <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
    2442:	63 51       	subi	r22, 0x13	; 19
    2444:	71 09       	sbc	r23, r1
    2446:	02 c0       	rjmp	.+4      	; 0x244c <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    244c:	7f 8b       	std	Y+23, r23	; 0x17
    244e:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2450:	36 97       	sbiw	r30, 0x06	; 6
    2452:	20 f0       	brcs	.+8      	; 0x245c <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
    2454:	b9 01       	movw	r22, r18
    2456:	65 50       	subi	r22, 0x05	; 5
    2458:	71 09       	sbc	r23, r1
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
    245c:	61 e0       	ldi	r22, 0x01	; 1
    245e:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2460:	79 8f       	std	Y+25, r23	; 0x19
    2462:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2464:	b9 01       	movw	r22, r18
    2466:	66 0f       	add	r22, r22
    2468:	77 1f       	adc	r23, r23
    246a:	26 0f       	add	r18, r22
    246c:	37 1f       	adc	r19, r23
    246e:	36 95       	lsr	r19
    2470:	27 95       	ror	r18
    2472:	36 95       	lsr	r19
    2474:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2476:	2d 30       	cpi	r18, 0x0D	; 13
    2478:	31 05       	cpc	r19, r1
    247a:	10 f1       	brcs	.+68     	; 0x24c0 <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
    247c:	2c 50       	subi	r18, 0x0C	; 12
    247e:	31 09       	sbc	r19, r1
    2480:	21 c0       	rjmp	.+66     	; 0x24c4 <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2482:	21 e0       	ldi	r18, 0x01	; 1
    2484:	8e 30       	cpi	r24, 0x0E	; 14
    2486:	08 f4       	brcc	.+2      	; 0x248a <_ZN14SoftwareSerial5beginEl+0x94>
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <_ZN14SoftwareSerial5beginEl+0x9a>
    248e:	88 0f       	add	r24, r24
    2490:	2a 95       	dec	r18
    2492:	ea f7       	brpl	.-6      	; 0x248e <_ZN14SoftwareSerial5beginEl+0x98>
    2494:	98 2b       	or	r25, r24
    2496:	90 93 68 00 	sts	0x0068, r25
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    249a:	9c 85       	ldd	r25, Y+12	; 0x0c
    249c:	98 30       	cpi	r25, 0x08	; 8
    249e:	d0 f0       	brcs	.+52     	; 0x24d4 <_ZN14SoftwareSerial5beginEl+0xde>
    24a0:	9e 30       	cpi	r25, 0x0E	; 14
    24a2:	10 f1       	brcs	.+68     	; 0x24e8 <_ZN14SoftwareSerial5beginEl+0xf2>
    24a4:	96 31       	cpi	r25, 0x16	; 22
    24a6:	58 f1       	brcs	.+86     	; 0x24fe <_ZN14SoftwareSerial5beginEl+0x108>
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	2a c0       	rjmp	.+84     	; 0x2502 <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    24ae:	8d 8b       	std	Y+21, r24	; 0x15
    24b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    24b8:	ce 01       	movw	r24, r28
    24ba:	0e 94 9c 10 	call	0x2138	; 0x2138 <_ZN14SoftwareSerial6listenEv>
    24be:	2a c0       	rjmp	.+84     	; 0x2514 <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    24c0:	21 e0       	ldi	r18, 0x01	; 1
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    24c4:	3b 8f       	std	Y+27, r19	; 0x1b
    24c6:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    24c8:	90 91 68 00 	lds	r25, 0x0068
    24cc:	88 30       	cpi	r24, 0x08	; 8
    24ce:	c8 f6       	brcc	.-78     	; 0x2482 <_ZN14SoftwareSerial5beginEl+0x8c>
    24d0:	84 e0       	ldi	r24, 0x04	; 4
    24d2:	e0 cf       	rjmp	.-64     	; 0x2494 <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    24d4:	2d e6       	ldi	r18, 0x6D	; 109
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	3c 8b       	std	Y+20, r19	; 0x14
    24da:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	01 c0       	rjmp	.+2      	; 0x24e2 <_ZN14SoftwareSerial5beginEl+0xec>
    24e0:	88 0f       	add	r24, r24
    24e2:	9a 95       	dec	r25
    24e4:	ea f7       	brpl	.-6      	; 0x24e0 <_ZN14SoftwareSerial5beginEl+0xea>
    24e6:	e3 cf       	rjmp	.-58     	; 0x24ae <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    24e8:	2b e6       	ldi	r18, 0x6B	; 107
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	3c 8b       	std	Y+20, r19	; 0x14
    24ee:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    24f0:	98 50       	subi	r25, 0x08	; 8
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <_ZN14SoftwareSerial5beginEl+0x102>
    24f6:	88 0f       	add	r24, r24
    24f8:	9a 95       	dec	r25
    24fa:	ea f7       	brpl	.-6      	; 0x24f6 <_ZN14SoftwareSerial5beginEl+0x100>
    24fc:	d8 cf       	rjmp	.-80     	; 0x24ae <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    24fe:	2c e6       	ldi	r18, 0x6C	; 108
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	3c 8b       	std	Y+20, r19	; 0x14
    2504:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2506:	9e 50       	subi	r25, 0x0E	; 14
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	01 c0       	rjmp	.+2      	; 0x250e <_ZN14SoftwareSerial5beginEl+0x118>
    250c:	88 0f       	add	r24, r24
    250e:	9a 95       	dec	r25
    2510:	ea f7       	brpl	.-6      	; 0x250c <_ZN14SoftwareSerial5beginEl+0x116>
    2512:	cd cf       	rjmp	.-102    	; 0x24ae <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	08 95       	ret

0000251a <_Znwj>:
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    251a:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <malloc>
}
    251e:	08 95       	ret

00002520 <_ZdlPv>:
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    2520:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <free>
    2524:	08 95       	ret

00002526 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2526:	83 30       	cpi	r24, 0x03	; 3
    2528:	69 f0       	breq	.+26     	; 0x2544 <turnOffPWM+0x1e>
    252a:	28 f4       	brcc	.+10     	; 0x2536 <turnOffPWM+0x10>
    252c:	81 30       	cpi	r24, 0x01	; 1
    252e:	b1 f0       	breq	.+44     	; 0x255c <turnOffPWM+0x36>
    2530:	82 30       	cpi	r24, 0x02	; 2
    2532:	c1 f0       	breq	.+48     	; 0x2564 <turnOffPWM+0x3e>
    2534:	08 95       	ret
    2536:	87 30       	cpi	r24, 0x07	; 7
    2538:	c9 f0       	breq	.+50     	; 0x256c <turnOffPWM+0x46>
    253a:	88 30       	cpi	r24, 0x08	; 8
    253c:	e9 f0       	breq	.+58     	; 0x2578 <turnOffPWM+0x52>
    253e:	84 30       	cpi	r24, 0x04	; 4
    2540:	01 f5       	brne	.+64     	; 0x2582 <turnOffPWM+0x5c>
    2542:	06 c0       	rjmp	.+12     	; 0x2550 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2544:	e0 e8       	ldi	r30, 0x80	; 128
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	8f 77       	andi	r24, 0x7F	; 127
    254c:	80 83       	st	Z, r24
    254e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2550:	e0 e8       	ldi	r30, 0x80	; 128
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8f 7d       	andi	r24, 0xDF	; 223
    2558:	80 83       	st	Z, r24
    255a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    255c:	84 b5       	in	r24, 0x24	; 36
    255e:	8f 77       	andi	r24, 0x7F	; 127
    2560:	84 bd       	out	0x24, r24	; 36
    2562:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2564:	84 b5       	in	r24, 0x24	; 36
    2566:	8f 7d       	andi	r24, 0xDF	; 223
    2568:	84 bd       	out	0x24, r24	; 36
    256a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    256c:	e0 eb       	ldi	r30, 0xB0	; 176
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8f 77       	andi	r24, 0x7F	; 127
    2574:	80 83       	st	Z, r24
    2576:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2578:	e0 eb       	ldi	r30, 0xB0	; 176
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	8f 7d       	andi	r24, 0xDF	; 223
    2580:	80 83       	st	Z, r24
    2582:	08 95       	ret

00002584 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	fc 01       	movw	r30, r24
    258c:	e4 58       	subi	r30, 0x84	; 132
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2592:	fc 01       	movw	r30, r24
    2594:	e0 57       	subi	r30, 0x70	; 112
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    259a:	88 23       	and	r24, r24
    259c:	79 f1       	breq	.+94     	; 0x25fc <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	fc 01       	movw	r30, r24
    25a6:	e8 54       	subi	r30, 0x48	; 72
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	a5 91       	lpm	r26, Z+
    25ac:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    25ae:	fc 01       	movw	r30, r24
    25b0:	e2 55       	subi	r30, 0x52	; 82
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	c5 91       	lpm	r28, Z+
    25b6:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    25b8:	61 11       	cpse	r22, r1
    25ba:	0c c0       	rjmp	.+24     	; 0x25d4 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    25bc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    25be:	f8 94       	cli
		*reg &= ~bit;
    25c0:	8c 91       	ld	r24, X
    25c2:	e2 2f       	mov	r30, r18
    25c4:	e0 95       	com	r30
    25c6:	8e 23       	and	r24, r30
    25c8:	8c 93       	st	X, r24
		*out &= ~bit;
    25ca:	28 81       	ld	r18, Y
    25cc:	e2 23       	and	r30, r18
    25ce:	e8 83       	st	Y, r30
		SREG = oldSREG;
    25d0:	9f bf       	out	0x3f, r25	; 63
    25d2:	14 c0       	rjmp	.+40     	; 0x25fc <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    25d4:	62 30       	cpi	r22, 0x02	; 2
    25d6:	61 f4       	brne	.+24     	; 0x25f0 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    25d8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    25da:	f8 94       	cli
		*reg &= ~bit;
    25dc:	3c 91       	ld	r19, X
    25de:	82 2f       	mov	r24, r18
    25e0:	80 95       	com	r24
    25e2:	83 23       	and	r24, r19
    25e4:	8c 93       	st	X, r24
		*out |= bit;
    25e6:	e8 81       	ld	r30, Y
    25e8:	e2 2b       	or	r30, r18
    25ea:	e8 83       	st	Y, r30
		SREG = oldSREG;
    25ec:	9f bf       	out	0x3f, r25	; 63
    25ee:	06 c0       	rjmp	.+12     	; 0x25fc <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    25f0:	8f b7       	in	r24, 0x3f	; 63
                cli();
    25f2:	f8 94       	cli
		*reg |= bit;
    25f4:	ec 91       	ld	r30, X
    25f6:	e2 2b       	or	r30, r18
    25f8:	ec 93       	st	X, r30
		SREG = oldSREG;
    25fa:	8f bf       	out	0x3f, r24	; 63
	}
}
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	08 95       	ret

00002602 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	f9 01       	movw	r30, r18
    260e:	e8 59       	subi	r30, 0x98	; 152
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2614:	f9 01       	movw	r30, r18
    2616:	e4 58       	subi	r30, 0x84	; 132
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    261c:	f9 01       	movw	r30, r18
    261e:	e0 57       	subi	r30, 0x70	; 112
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2624:	cc 23       	and	r28, r28
    2626:	d1 f0       	breq	.+52     	; 0x265c <digitalWrite+0x5a>
    2628:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    262a:	81 11       	cpse	r24, r1
    262c:	0e 94 93 12 	call	0x2526	; 0x2526 <turnOffPWM>

	out = portOutputRegister(port);
    2630:	ec 2f       	mov	r30, r28
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	ee 0f       	add	r30, r30
    2636:	ff 1f       	adc	r31, r31
    2638:	e2 55       	subi	r30, 0x52	; 82
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	a5 91       	lpm	r26, Z+
    263e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2640:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2642:	f8 94       	cli

	if (val == LOW) {
    2644:	d1 11       	cpse	r29, r1
    2646:	06 c0       	rjmp	.+12     	; 0x2654 <digitalWrite+0x52>
		*out &= ~bit;
    2648:	9c 91       	ld	r25, X
    264a:	e1 2f       	mov	r30, r17
    264c:	e0 95       	com	r30
    264e:	e9 23       	and	r30, r25
    2650:	ec 93       	st	X, r30
    2652:	03 c0       	rjmp	.+6      	; 0x265a <digitalWrite+0x58>
	} else {
		*out |= bit;
    2654:	ec 91       	ld	r30, X
    2656:	e1 2b       	or	r30, r17
    2658:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    265a:	8f bf       	out	0x3f, r24	; 63
}
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	1f 91       	pop	r17
    2662:	08 95       	ret

00002664 <__udivmodsi4>:
    2664:	a1 e2       	ldi	r26, 0x21	; 33
    2666:	1a 2e       	mov	r1, r26
    2668:	aa 1b       	sub	r26, r26
    266a:	bb 1b       	sub	r27, r27
    266c:	fd 01       	movw	r30, r26
    266e:	0d c0       	rjmp	.+26     	; 0x268a <__udivmodsi4_ep>

00002670 <__udivmodsi4_loop>:
    2670:	aa 1f       	adc	r26, r26
    2672:	bb 1f       	adc	r27, r27
    2674:	ee 1f       	adc	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	a2 17       	cp	r26, r18
    267a:	b3 07       	cpc	r27, r19
    267c:	e4 07       	cpc	r30, r20
    267e:	f5 07       	cpc	r31, r21
    2680:	20 f0       	brcs	.+8      	; 0x268a <__udivmodsi4_ep>
    2682:	a2 1b       	sub	r26, r18
    2684:	b3 0b       	sbc	r27, r19
    2686:	e4 0b       	sbc	r30, r20
    2688:	f5 0b       	sbc	r31, r21

0000268a <__udivmodsi4_ep>:
    268a:	66 1f       	adc	r22, r22
    268c:	77 1f       	adc	r23, r23
    268e:	88 1f       	adc	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	1a 94       	dec	r1
    2694:	69 f7       	brne	.-38     	; 0x2670 <__udivmodsi4_loop>
    2696:	60 95       	com	r22
    2698:	70 95       	com	r23
    269a:	80 95       	com	r24
    269c:	90 95       	com	r25
    269e:	9b 01       	movw	r18, r22
    26a0:	ac 01       	movw	r20, r24
    26a2:	bd 01       	movw	r22, r26
    26a4:	cf 01       	movw	r24, r30
    26a6:	08 95       	ret

000026a8 <__divmodsi4>:
    26a8:	05 2e       	mov	r0, r21
    26aa:	97 fb       	bst	r25, 7
    26ac:	1e f4       	brtc	.+6      	; 0x26b4 <__divmodsi4+0xc>
    26ae:	00 94       	com	r0
    26b0:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__negsi2>
    26b4:	57 fd       	sbrc	r21, 7
    26b6:	07 d0       	rcall	.+14     	; 0x26c6 <__divmodsi4_neg2>
    26b8:	0e 94 32 13 	call	0x2664	; 0x2664 <__udivmodsi4>
    26bc:	07 fc       	sbrc	r0, 7
    26be:	03 d0       	rcall	.+6      	; 0x26c6 <__divmodsi4_neg2>
    26c0:	4e f4       	brtc	.+18     	; 0x26d4 <__divmodsi4_exit>
    26c2:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__negsi2>

000026c6 <__divmodsi4_neg2>:
    26c6:	50 95       	com	r21
    26c8:	40 95       	com	r20
    26ca:	30 95       	com	r19
    26cc:	21 95       	neg	r18
    26ce:	3f 4f       	sbci	r19, 0xFF	; 255
    26d0:	4f 4f       	sbci	r20, 0xFF	; 255
    26d2:	5f 4f       	sbci	r21, 0xFF	; 255

000026d4 <__divmodsi4_exit>:
    26d4:	08 95       	ret

000026d6 <__negsi2>:
    26d6:	90 95       	com	r25
    26d8:	80 95       	com	r24
    26da:	70 95       	com	r23
    26dc:	61 95       	neg	r22
    26de:	7f 4f       	sbci	r23, 0xFF	; 255
    26e0:	8f 4f       	sbci	r24, 0xFF	; 255
    26e2:	9f 4f       	sbci	r25, 0xFF	; 255
    26e4:	08 95       	ret

000026e6 <__tablejump2__>:
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	05 90       	lpm	r0, Z+
    26ec:	f4 91       	lpm	r31, Z
    26ee:	e0 2d       	mov	r30, r0
    26f0:	09 94       	ijmp

000026f2 <__subsf3>:
    26f2:	50 58       	subi	r21, 0x80	; 128

000026f4 <__addsf3>:
    26f4:	bb 27       	eor	r27, r27
    26f6:	aa 27       	eor	r26, r26
    26f8:	0e 94 91 13 	call	0x2722	; 0x2722 <__addsf3x>
    26fc:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__fp_round>
    2700:	0e 94 ac 14 	call	0x2958	; 0x2958 <__fp_pscA>
    2704:	38 f0       	brcs	.+14     	; 0x2714 <__addsf3+0x20>
    2706:	0e 94 b3 14 	call	0x2966	; 0x2966 <__fp_pscB>
    270a:	20 f0       	brcs	.+8      	; 0x2714 <__addsf3+0x20>
    270c:	39 f4       	brne	.+14     	; 0x271c <__addsf3+0x28>
    270e:	9f 3f       	cpi	r25, 0xFF	; 255
    2710:	19 f4       	brne	.+6      	; 0x2718 <__addsf3+0x24>
    2712:	26 f4       	brtc	.+8      	; 0x271c <__addsf3+0x28>
    2714:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__fp_nan>
    2718:	0e f4       	brtc	.+2      	; 0x271c <__addsf3+0x28>
    271a:	e0 95       	com	r30
    271c:	e7 fb       	bst	r30, 7
    271e:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_inf>

00002722 <__addsf3x>:
    2722:	e9 2f       	mov	r30, r25
    2724:	0e 94 cb 14 	call	0x2996	; 0x2996 <__fp_split3>
    2728:	58 f3       	brcs	.-42     	; 0x2700 <__addsf3+0xc>
    272a:	ba 17       	cp	r27, r26
    272c:	62 07       	cpc	r22, r18
    272e:	73 07       	cpc	r23, r19
    2730:	84 07       	cpc	r24, r20
    2732:	95 07       	cpc	r25, r21
    2734:	20 f0       	brcs	.+8      	; 0x273e <__addsf3x+0x1c>
    2736:	79 f4       	brne	.+30     	; 0x2756 <__addsf3x+0x34>
    2738:	a6 f5       	brtc	.+104    	; 0x27a2 <__addsf3x+0x80>
    273a:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__fp_zero>
    273e:	0e f4       	brtc	.+2      	; 0x2742 <__addsf3x+0x20>
    2740:	e0 95       	com	r30
    2742:	0b 2e       	mov	r0, r27
    2744:	ba 2f       	mov	r27, r26
    2746:	a0 2d       	mov	r26, r0
    2748:	0b 01       	movw	r0, r22
    274a:	b9 01       	movw	r22, r18
    274c:	90 01       	movw	r18, r0
    274e:	0c 01       	movw	r0, r24
    2750:	ca 01       	movw	r24, r20
    2752:	a0 01       	movw	r20, r0
    2754:	11 24       	eor	r1, r1
    2756:	ff 27       	eor	r31, r31
    2758:	59 1b       	sub	r21, r25
    275a:	99 f0       	breq	.+38     	; 0x2782 <__addsf3x+0x60>
    275c:	59 3f       	cpi	r21, 0xF9	; 249
    275e:	50 f4       	brcc	.+20     	; 0x2774 <__addsf3x+0x52>
    2760:	50 3e       	cpi	r21, 0xE0	; 224
    2762:	68 f1       	brcs	.+90     	; 0x27be <__addsf3x+0x9c>
    2764:	1a 16       	cp	r1, r26
    2766:	f0 40       	sbci	r31, 0x00	; 0
    2768:	a2 2f       	mov	r26, r18
    276a:	23 2f       	mov	r18, r19
    276c:	34 2f       	mov	r19, r20
    276e:	44 27       	eor	r20, r20
    2770:	58 5f       	subi	r21, 0xF8	; 248
    2772:	f3 cf       	rjmp	.-26     	; 0x275a <__addsf3x+0x38>
    2774:	46 95       	lsr	r20
    2776:	37 95       	ror	r19
    2778:	27 95       	ror	r18
    277a:	a7 95       	ror	r26
    277c:	f0 40       	sbci	r31, 0x00	; 0
    277e:	53 95       	inc	r21
    2780:	c9 f7       	brne	.-14     	; 0x2774 <__addsf3x+0x52>
    2782:	7e f4       	brtc	.+30     	; 0x27a2 <__addsf3x+0x80>
    2784:	1f 16       	cp	r1, r31
    2786:	ba 0b       	sbc	r27, r26
    2788:	62 0b       	sbc	r22, r18
    278a:	73 0b       	sbc	r23, r19
    278c:	84 0b       	sbc	r24, r20
    278e:	ba f0       	brmi	.+46     	; 0x27be <__addsf3x+0x9c>
    2790:	91 50       	subi	r25, 0x01	; 1
    2792:	a1 f0       	breq	.+40     	; 0x27bc <__addsf3x+0x9a>
    2794:	ff 0f       	add	r31, r31
    2796:	bb 1f       	adc	r27, r27
    2798:	66 1f       	adc	r22, r22
    279a:	77 1f       	adc	r23, r23
    279c:	88 1f       	adc	r24, r24
    279e:	c2 f7       	brpl	.-16     	; 0x2790 <__addsf3x+0x6e>
    27a0:	0e c0       	rjmp	.+28     	; 0x27be <__addsf3x+0x9c>
    27a2:	ba 0f       	add	r27, r26
    27a4:	62 1f       	adc	r22, r18
    27a6:	73 1f       	adc	r23, r19
    27a8:	84 1f       	adc	r24, r20
    27aa:	48 f4       	brcc	.+18     	; 0x27be <__addsf3x+0x9c>
    27ac:	87 95       	ror	r24
    27ae:	77 95       	ror	r23
    27b0:	67 95       	ror	r22
    27b2:	b7 95       	ror	r27
    27b4:	f7 95       	ror	r31
    27b6:	9e 3f       	cpi	r25, 0xFE	; 254
    27b8:	08 f0       	brcs	.+2      	; 0x27bc <__addsf3x+0x9a>
    27ba:	b0 cf       	rjmp	.-160    	; 0x271c <__addsf3+0x28>
    27bc:	93 95       	inc	r25
    27be:	88 0f       	add	r24, r24
    27c0:	08 f0       	brcs	.+2      	; 0x27c4 <__addsf3x+0xa2>
    27c2:	99 27       	eor	r25, r25
    27c4:	ee 0f       	add	r30, r30
    27c6:	97 95       	ror	r25
    27c8:	87 95       	ror	r24
    27ca:	08 95       	ret

000027cc <__divsf3>:
    27cc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__divsf3x>
    27d0:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__fp_round>
    27d4:	0e 94 b3 14 	call	0x2966	; 0x2966 <__fp_pscB>
    27d8:	58 f0       	brcs	.+22     	; 0x27f0 <__divsf3+0x24>
    27da:	0e 94 ac 14 	call	0x2958	; 0x2958 <__fp_pscA>
    27de:	40 f0       	brcs	.+16     	; 0x27f0 <__divsf3+0x24>
    27e0:	29 f4       	brne	.+10     	; 0x27ec <__divsf3+0x20>
    27e2:	5f 3f       	cpi	r21, 0xFF	; 255
    27e4:	29 f0       	breq	.+10     	; 0x27f0 <__divsf3+0x24>
    27e6:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_inf>
    27ea:	51 11       	cpse	r21, r1
    27ec:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__fp_szero>
    27f0:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__fp_nan>

000027f4 <__divsf3x>:
    27f4:	0e 94 cb 14 	call	0x2996	; 0x2996 <__fp_split3>
    27f8:	68 f3       	brcs	.-38     	; 0x27d4 <__divsf3+0x8>

000027fa <__divsf3_pse>:
    27fa:	99 23       	and	r25, r25
    27fc:	b1 f3       	breq	.-20     	; 0x27ea <__divsf3+0x1e>
    27fe:	55 23       	and	r21, r21
    2800:	91 f3       	breq	.-28     	; 0x27e6 <__divsf3+0x1a>
    2802:	95 1b       	sub	r25, r21
    2804:	55 0b       	sbc	r21, r21
    2806:	bb 27       	eor	r27, r27
    2808:	aa 27       	eor	r26, r26
    280a:	62 17       	cp	r22, r18
    280c:	73 07       	cpc	r23, r19
    280e:	84 07       	cpc	r24, r20
    2810:	38 f0       	brcs	.+14     	; 0x2820 <__divsf3_pse+0x26>
    2812:	9f 5f       	subi	r25, 0xFF	; 255
    2814:	5f 4f       	sbci	r21, 0xFF	; 255
    2816:	22 0f       	add	r18, r18
    2818:	33 1f       	adc	r19, r19
    281a:	44 1f       	adc	r20, r20
    281c:	aa 1f       	adc	r26, r26
    281e:	a9 f3       	breq	.-22     	; 0x280a <__divsf3_pse+0x10>
    2820:	35 d0       	rcall	.+106    	; 0x288c <__divsf3_pse+0x92>
    2822:	0e 2e       	mov	r0, r30
    2824:	3a f0       	brmi	.+14     	; 0x2834 <__divsf3_pse+0x3a>
    2826:	e0 e8       	ldi	r30, 0x80	; 128
    2828:	32 d0       	rcall	.+100    	; 0x288e <__divsf3_pse+0x94>
    282a:	91 50       	subi	r25, 0x01	; 1
    282c:	50 40       	sbci	r21, 0x00	; 0
    282e:	e6 95       	lsr	r30
    2830:	00 1c       	adc	r0, r0
    2832:	ca f7       	brpl	.-14     	; 0x2826 <__divsf3_pse+0x2c>
    2834:	2b d0       	rcall	.+86     	; 0x288c <__divsf3_pse+0x92>
    2836:	fe 2f       	mov	r31, r30
    2838:	29 d0       	rcall	.+82     	; 0x288c <__divsf3_pse+0x92>
    283a:	66 0f       	add	r22, r22
    283c:	77 1f       	adc	r23, r23
    283e:	88 1f       	adc	r24, r24
    2840:	bb 1f       	adc	r27, r27
    2842:	26 17       	cp	r18, r22
    2844:	37 07       	cpc	r19, r23
    2846:	48 07       	cpc	r20, r24
    2848:	ab 07       	cpc	r26, r27
    284a:	b0 e8       	ldi	r27, 0x80	; 128
    284c:	09 f0       	breq	.+2      	; 0x2850 <__divsf3_pse+0x56>
    284e:	bb 0b       	sbc	r27, r27
    2850:	80 2d       	mov	r24, r0
    2852:	bf 01       	movw	r22, r30
    2854:	ff 27       	eor	r31, r31
    2856:	93 58       	subi	r25, 0x83	; 131
    2858:	5f 4f       	sbci	r21, 0xFF	; 255
    285a:	3a f0       	brmi	.+14     	; 0x286a <__divsf3_pse+0x70>
    285c:	9e 3f       	cpi	r25, 0xFE	; 254
    285e:	51 05       	cpc	r21, r1
    2860:	78 f0       	brcs	.+30     	; 0x2880 <__divsf3_pse+0x86>
    2862:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_inf>
    2866:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__fp_szero>
    286a:	5f 3f       	cpi	r21, 0xFF	; 255
    286c:	e4 f3       	brlt	.-8      	; 0x2866 <__divsf3_pse+0x6c>
    286e:	98 3e       	cpi	r25, 0xE8	; 232
    2870:	d4 f3       	brlt	.-12     	; 0x2866 <__divsf3_pse+0x6c>
    2872:	86 95       	lsr	r24
    2874:	77 95       	ror	r23
    2876:	67 95       	ror	r22
    2878:	b7 95       	ror	r27
    287a:	f7 95       	ror	r31
    287c:	9f 5f       	subi	r25, 0xFF	; 255
    287e:	c9 f7       	brne	.-14     	; 0x2872 <__divsf3_pse+0x78>
    2880:	88 0f       	add	r24, r24
    2882:	91 1d       	adc	r25, r1
    2884:	96 95       	lsr	r25
    2886:	87 95       	ror	r24
    2888:	97 f9       	bld	r25, 7
    288a:	08 95       	ret
    288c:	e1 e0       	ldi	r30, 0x01	; 1
    288e:	66 0f       	add	r22, r22
    2890:	77 1f       	adc	r23, r23
    2892:	88 1f       	adc	r24, r24
    2894:	bb 1f       	adc	r27, r27
    2896:	62 17       	cp	r22, r18
    2898:	73 07       	cpc	r23, r19
    289a:	84 07       	cpc	r24, r20
    289c:	ba 07       	cpc	r27, r26
    289e:	20 f0       	brcs	.+8      	; 0x28a8 <__divsf3_pse+0xae>
    28a0:	62 1b       	sub	r22, r18
    28a2:	73 0b       	sbc	r23, r19
    28a4:	84 0b       	sbc	r24, r20
    28a6:	ba 0b       	sbc	r27, r26
    28a8:	ee 1f       	adc	r30, r30
    28aa:	88 f7       	brcc	.-30     	; 0x288e <__divsf3_pse+0x94>
    28ac:	e0 95       	com	r30
    28ae:	08 95       	ret

000028b0 <__floatunsisf>:
    28b0:	e8 94       	clt
    28b2:	09 c0       	rjmp	.+18     	; 0x28c6 <__floatsisf+0x12>

000028b4 <__floatsisf>:
    28b4:	97 fb       	bst	r25, 7
    28b6:	3e f4       	brtc	.+14     	; 0x28c6 <__floatsisf+0x12>
    28b8:	90 95       	com	r25
    28ba:	80 95       	com	r24
    28bc:	70 95       	com	r23
    28be:	61 95       	neg	r22
    28c0:	7f 4f       	sbci	r23, 0xFF	; 255
    28c2:	8f 4f       	sbci	r24, 0xFF	; 255
    28c4:	9f 4f       	sbci	r25, 0xFF	; 255
    28c6:	99 23       	and	r25, r25
    28c8:	a9 f0       	breq	.+42     	; 0x28f4 <__floatsisf+0x40>
    28ca:	f9 2f       	mov	r31, r25
    28cc:	96 e9       	ldi	r25, 0x96	; 150
    28ce:	bb 27       	eor	r27, r27
    28d0:	93 95       	inc	r25
    28d2:	f6 95       	lsr	r31
    28d4:	87 95       	ror	r24
    28d6:	77 95       	ror	r23
    28d8:	67 95       	ror	r22
    28da:	b7 95       	ror	r27
    28dc:	f1 11       	cpse	r31, r1
    28de:	f8 cf       	rjmp	.-16     	; 0x28d0 <__floatsisf+0x1c>
    28e0:	fa f4       	brpl	.+62     	; 0x2920 <__floatsisf+0x6c>
    28e2:	bb 0f       	add	r27, r27
    28e4:	11 f4       	brne	.+4      	; 0x28ea <__floatsisf+0x36>
    28e6:	60 ff       	sbrs	r22, 0
    28e8:	1b c0       	rjmp	.+54     	; 0x2920 <__floatsisf+0x6c>
    28ea:	6f 5f       	subi	r22, 0xFF	; 255
    28ec:	7f 4f       	sbci	r23, 0xFF	; 255
    28ee:	8f 4f       	sbci	r24, 0xFF	; 255
    28f0:	9f 4f       	sbci	r25, 0xFF	; 255
    28f2:	16 c0       	rjmp	.+44     	; 0x2920 <__floatsisf+0x6c>
    28f4:	88 23       	and	r24, r24
    28f6:	11 f0       	breq	.+4      	; 0x28fc <__floatsisf+0x48>
    28f8:	96 e9       	ldi	r25, 0x96	; 150
    28fa:	11 c0       	rjmp	.+34     	; 0x291e <__floatsisf+0x6a>
    28fc:	77 23       	and	r23, r23
    28fe:	21 f0       	breq	.+8      	; 0x2908 <__floatsisf+0x54>
    2900:	9e e8       	ldi	r25, 0x8E	; 142
    2902:	87 2f       	mov	r24, r23
    2904:	76 2f       	mov	r23, r22
    2906:	05 c0       	rjmp	.+10     	; 0x2912 <__floatsisf+0x5e>
    2908:	66 23       	and	r22, r22
    290a:	71 f0       	breq	.+28     	; 0x2928 <__floatsisf+0x74>
    290c:	96 e8       	ldi	r25, 0x86	; 134
    290e:	86 2f       	mov	r24, r22
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	2a f0       	brmi	.+10     	; 0x2920 <__floatsisf+0x6c>
    2916:	9a 95       	dec	r25
    2918:	66 0f       	add	r22, r22
    291a:	77 1f       	adc	r23, r23
    291c:	88 1f       	adc	r24, r24
    291e:	da f7       	brpl	.-10     	; 0x2916 <__floatsisf+0x62>
    2920:	88 0f       	add	r24, r24
    2922:	96 95       	lsr	r25
    2924:	87 95       	ror	r24
    2926:	97 f9       	bld	r25, 7
    2928:	08 95       	ret

0000292a <__fp_inf>:
    292a:	97 f9       	bld	r25, 7
    292c:	9f 67       	ori	r25, 0x7F	; 127
    292e:	80 e8       	ldi	r24, 0x80	; 128
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	08 95       	ret

00002936 <__fp_mpack>:
    2936:	9f 3f       	cpi	r25, 0xFF	; 255
    2938:	31 f0       	breq	.+12     	; 0x2946 <__fp_mpack_finite+0xc>

0000293a <__fp_mpack_finite>:
    293a:	91 50       	subi	r25, 0x01	; 1
    293c:	20 f4       	brcc	.+8      	; 0x2946 <__fp_mpack_finite+0xc>
    293e:	87 95       	ror	r24
    2940:	77 95       	ror	r23
    2942:	67 95       	ror	r22
    2944:	b7 95       	ror	r27
    2946:	88 0f       	add	r24, r24
    2948:	91 1d       	adc	r25, r1
    294a:	96 95       	lsr	r25
    294c:	87 95       	ror	r24
    294e:	97 f9       	bld	r25, 7
    2950:	08 95       	ret

00002952 <__fp_nan>:
    2952:	9f ef       	ldi	r25, 0xFF	; 255
    2954:	80 ec       	ldi	r24, 0xC0	; 192
    2956:	08 95       	ret

00002958 <__fp_pscA>:
    2958:	00 24       	eor	r0, r0
    295a:	0a 94       	dec	r0
    295c:	16 16       	cp	r1, r22
    295e:	17 06       	cpc	r1, r23
    2960:	18 06       	cpc	r1, r24
    2962:	09 06       	cpc	r0, r25
    2964:	08 95       	ret

00002966 <__fp_pscB>:
    2966:	00 24       	eor	r0, r0
    2968:	0a 94       	dec	r0
    296a:	12 16       	cp	r1, r18
    296c:	13 06       	cpc	r1, r19
    296e:	14 06       	cpc	r1, r20
    2970:	05 06       	cpc	r0, r21
    2972:	08 95       	ret

00002974 <__fp_round>:
    2974:	09 2e       	mov	r0, r25
    2976:	03 94       	inc	r0
    2978:	00 0c       	add	r0, r0
    297a:	11 f4       	brne	.+4      	; 0x2980 <__fp_round+0xc>
    297c:	88 23       	and	r24, r24
    297e:	52 f0       	brmi	.+20     	; 0x2994 <__fp_round+0x20>
    2980:	bb 0f       	add	r27, r27
    2982:	40 f4       	brcc	.+16     	; 0x2994 <__fp_round+0x20>
    2984:	bf 2b       	or	r27, r31
    2986:	11 f4       	brne	.+4      	; 0x298c <__fp_round+0x18>
    2988:	60 ff       	sbrs	r22, 0
    298a:	04 c0       	rjmp	.+8      	; 0x2994 <__fp_round+0x20>
    298c:	6f 5f       	subi	r22, 0xFF	; 255
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
    2990:	8f 4f       	sbci	r24, 0xFF	; 255
    2992:	9f 4f       	sbci	r25, 0xFF	; 255
    2994:	08 95       	ret

00002996 <__fp_split3>:
    2996:	57 fd       	sbrc	r21, 7
    2998:	90 58       	subi	r25, 0x80	; 128
    299a:	44 0f       	add	r20, r20
    299c:	55 1f       	adc	r21, r21
    299e:	59 f0       	breq	.+22     	; 0x29b6 <__fp_splitA+0x10>
    29a0:	5f 3f       	cpi	r21, 0xFF	; 255
    29a2:	71 f0       	breq	.+28     	; 0x29c0 <__fp_splitA+0x1a>
    29a4:	47 95       	ror	r20

000029a6 <__fp_splitA>:
    29a6:	88 0f       	add	r24, r24
    29a8:	97 fb       	bst	r25, 7
    29aa:	99 1f       	adc	r25, r25
    29ac:	61 f0       	breq	.+24     	; 0x29c6 <__fp_splitA+0x20>
    29ae:	9f 3f       	cpi	r25, 0xFF	; 255
    29b0:	79 f0       	breq	.+30     	; 0x29d0 <__fp_splitA+0x2a>
    29b2:	87 95       	ror	r24
    29b4:	08 95       	ret
    29b6:	12 16       	cp	r1, r18
    29b8:	13 06       	cpc	r1, r19
    29ba:	14 06       	cpc	r1, r20
    29bc:	55 1f       	adc	r21, r21
    29be:	f2 cf       	rjmp	.-28     	; 0x29a4 <__fp_split3+0xe>
    29c0:	46 95       	lsr	r20
    29c2:	f1 df       	rcall	.-30     	; 0x29a6 <__fp_splitA>
    29c4:	08 c0       	rjmp	.+16     	; 0x29d6 <__fp_splitA+0x30>
    29c6:	16 16       	cp	r1, r22
    29c8:	17 06       	cpc	r1, r23
    29ca:	18 06       	cpc	r1, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	f1 cf       	rjmp	.-30     	; 0x29b2 <__fp_splitA+0xc>
    29d0:	86 95       	lsr	r24
    29d2:	71 05       	cpc	r23, r1
    29d4:	61 05       	cpc	r22, r1
    29d6:	08 94       	sec
    29d8:	08 95       	ret

000029da <__fp_zero>:
    29da:	e8 94       	clt

000029dc <__fp_szero>:
    29dc:	bb 27       	eor	r27, r27
    29de:	66 27       	eor	r22, r22
    29e0:	77 27       	eor	r23, r23
    29e2:	cb 01       	movw	r24, r22
    29e4:	97 f9       	bld	r25, 7
    29e6:	08 95       	ret

000029e8 <__mulsf3>:
    29e8:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__mulsf3x>
    29ec:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__fp_round>
    29f0:	0e 94 ac 14 	call	0x2958	; 0x2958 <__fp_pscA>
    29f4:	38 f0       	brcs	.+14     	; 0x2a04 <__mulsf3+0x1c>
    29f6:	0e 94 b3 14 	call	0x2966	; 0x2966 <__fp_pscB>
    29fa:	20 f0       	brcs	.+8      	; 0x2a04 <__mulsf3+0x1c>
    29fc:	95 23       	and	r25, r21
    29fe:	11 f0       	breq	.+4      	; 0x2a04 <__mulsf3+0x1c>
    2a00:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_inf>
    2a04:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__fp_nan>
    2a08:	11 24       	eor	r1, r1
    2a0a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__fp_szero>

00002a0e <__mulsf3x>:
    2a0e:	0e 94 cb 14 	call	0x2996	; 0x2996 <__fp_split3>
    2a12:	70 f3       	brcs	.-36     	; 0x29f0 <__mulsf3+0x8>

00002a14 <__mulsf3_pse>:
    2a14:	95 9f       	mul	r25, r21
    2a16:	c1 f3       	breq	.-16     	; 0x2a08 <__mulsf3+0x20>
    2a18:	95 0f       	add	r25, r21
    2a1a:	50 e0       	ldi	r21, 0x00	; 0
    2a1c:	55 1f       	adc	r21, r21
    2a1e:	62 9f       	mul	r22, r18
    2a20:	f0 01       	movw	r30, r0
    2a22:	72 9f       	mul	r23, r18
    2a24:	bb 27       	eor	r27, r27
    2a26:	f0 0d       	add	r31, r0
    2a28:	b1 1d       	adc	r27, r1
    2a2a:	63 9f       	mul	r22, r19
    2a2c:	aa 27       	eor	r26, r26
    2a2e:	f0 0d       	add	r31, r0
    2a30:	b1 1d       	adc	r27, r1
    2a32:	aa 1f       	adc	r26, r26
    2a34:	64 9f       	mul	r22, r20
    2a36:	66 27       	eor	r22, r22
    2a38:	b0 0d       	add	r27, r0
    2a3a:	a1 1d       	adc	r26, r1
    2a3c:	66 1f       	adc	r22, r22
    2a3e:	82 9f       	mul	r24, r18
    2a40:	22 27       	eor	r18, r18
    2a42:	b0 0d       	add	r27, r0
    2a44:	a1 1d       	adc	r26, r1
    2a46:	62 1f       	adc	r22, r18
    2a48:	73 9f       	mul	r23, r19
    2a4a:	b0 0d       	add	r27, r0
    2a4c:	a1 1d       	adc	r26, r1
    2a4e:	62 1f       	adc	r22, r18
    2a50:	83 9f       	mul	r24, r19
    2a52:	a0 0d       	add	r26, r0
    2a54:	61 1d       	adc	r22, r1
    2a56:	22 1f       	adc	r18, r18
    2a58:	74 9f       	mul	r23, r20
    2a5a:	33 27       	eor	r19, r19
    2a5c:	a0 0d       	add	r26, r0
    2a5e:	61 1d       	adc	r22, r1
    2a60:	23 1f       	adc	r18, r19
    2a62:	84 9f       	mul	r24, r20
    2a64:	60 0d       	add	r22, r0
    2a66:	21 1d       	adc	r18, r1
    2a68:	82 2f       	mov	r24, r18
    2a6a:	76 2f       	mov	r23, r22
    2a6c:	6a 2f       	mov	r22, r26
    2a6e:	11 24       	eor	r1, r1
    2a70:	9f 57       	subi	r25, 0x7F	; 127
    2a72:	50 40       	sbci	r21, 0x00	; 0
    2a74:	9a f0       	brmi	.+38     	; 0x2a9c <__mulsf3_pse+0x88>
    2a76:	f1 f0       	breq	.+60     	; 0x2ab4 <__mulsf3_pse+0xa0>
    2a78:	88 23       	and	r24, r24
    2a7a:	4a f0       	brmi	.+18     	; 0x2a8e <__mulsf3_pse+0x7a>
    2a7c:	ee 0f       	add	r30, r30
    2a7e:	ff 1f       	adc	r31, r31
    2a80:	bb 1f       	adc	r27, r27
    2a82:	66 1f       	adc	r22, r22
    2a84:	77 1f       	adc	r23, r23
    2a86:	88 1f       	adc	r24, r24
    2a88:	91 50       	subi	r25, 0x01	; 1
    2a8a:	50 40       	sbci	r21, 0x00	; 0
    2a8c:	a9 f7       	brne	.-22     	; 0x2a78 <__mulsf3_pse+0x64>
    2a8e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a90:	51 05       	cpc	r21, r1
    2a92:	80 f0       	brcs	.+32     	; 0x2ab4 <__mulsf3_pse+0xa0>
    2a94:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_inf>
    2a98:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__fp_szero>
    2a9c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a9e:	e4 f3       	brlt	.-8      	; 0x2a98 <__mulsf3_pse+0x84>
    2aa0:	98 3e       	cpi	r25, 0xE8	; 232
    2aa2:	d4 f3       	brlt	.-12     	; 0x2a98 <__mulsf3_pse+0x84>
    2aa4:	86 95       	lsr	r24
    2aa6:	77 95       	ror	r23
    2aa8:	67 95       	ror	r22
    2aaa:	b7 95       	ror	r27
    2aac:	f7 95       	ror	r31
    2aae:	e7 95       	ror	r30
    2ab0:	9f 5f       	subi	r25, 0xFF	; 255
    2ab2:	c1 f7       	brne	.-16     	; 0x2aa4 <__mulsf3_pse+0x90>
    2ab4:	fe 2b       	or	r31, r30
    2ab6:	88 0f       	add	r24, r24
    2ab8:	91 1d       	adc	r25, r1
    2aba:	96 95       	lsr	r25
    2abc:	87 95       	ror	r24
    2abe:	97 f9       	bld	r25, 7
    2ac0:	08 95       	ret
    2ac2:	19 f4       	brne	.+6      	; 0x2aca <__mulsf3_pse+0xb6>
    2ac4:	16 f4       	brtc	.+4      	; 0x2aca <__mulsf3_pse+0xb6>
    2ac6:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__fp_nan>
    2aca:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__fp_mpack>

00002ace <sqrt>:
    2ace:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__fp_splitA>
    2ad2:	b8 f3       	brcs	.-18     	; 0x2ac2 <__mulsf3_pse+0xae>
    2ad4:	99 23       	and	r25, r25
    2ad6:	c9 f3       	breq	.-14     	; 0x2aca <__mulsf3_pse+0xb6>
    2ad8:	b6 f3       	brts	.-20     	; 0x2ac6 <__mulsf3_pse+0xb2>
    2ada:	9f 57       	subi	r25, 0x7F	; 127
    2adc:	55 0b       	sbc	r21, r21
    2ade:	87 ff       	sbrs	r24, 7
    2ae0:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__fp_norm2>
    2ae4:	00 24       	eor	r0, r0
    2ae6:	a0 e6       	ldi	r26, 0x60	; 96
    2ae8:	40 ea       	ldi	r20, 0xA0	; 160
    2aea:	90 01       	movw	r18, r0
    2aec:	80 58       	subi	r24, 0x80	; 128
    2aee:	56 95       	lsr	r21
    2af0:	97 95       	ror	r25
    2af2:	28 f4       	brcc	.+10     	; 0x2afe <sqrt+0x30>
    2af4:	80 5c       	subi	r24, 0xC0	; 192
    2af6:	66 0f       	add	r22, r22
    2af8:	77 1f       	adc	r23, r23
    2afa:	88 1f       	adc	r24, r24
    2afc:	20 f0       	brcs	.+8      	; 0x2b06 <sqrt+0x38>
    2afe:	26 17       	cp	r18, r22
    2b00:	37 07       	cpc	r19, r23
    2b02:	48 07       	cpc	r20, r24
    2b04:	30 f4       	brcc	.+12     	; 0x2b12 <sqrt+0x44>
    2b06:	62 1b       	sub	r22, r18
    2b08:	73 0b       	sbc	r23, r19
    2b0a:	84 0b       	sbc	r24, r20
    2b0c:	20 29       	or	r18, r0
    2b0e:	31 29       	or	r19, r1
    2b10:	4a 2b       	or	r20, r26
    2b12:	a6 95       	lsr	r26
    2b14:	17 94       	ror	r1
    2b16:	07 94       	ror	r0
    2b18:	20 25       	eor	r18, r0
    2b1a:	31 25       	eor	r19, r1
    2b1c:	4a 27       	eor	r20, r26
    2b1e:	58 f7       	brcc	.-42     	; 0x2af6 <sqrt+0x28>
    2b20:	66 0f       	add	r22, r22
    2b22:	77 1f       	adc	r23, r23
    2b24:	88 1f       	adc	r24, r24
    2b26:	20 f0       	brcs	.+8      	; 0x2b30 <sqrt+0x62>
    2b28:	26 17       	cp	r18, r22
    2b2a:	37 07       	cpc	r19, r23
    2b2c:	48 07       	cpc	r20, r24
    2b2e:	30 f4       	brcc	.+12     	; 0x2b3c <sqrt+0x6e>
    2b30:	62 0b       	sbc	r22, r18
    2b32:	73 0b       	sbc	r23, r19
    2b34:	84 0b       	sbc	r24, r20
    2b36:	20 0d       	add	r18, r0
    2b38:	31 1d       	adc	r19, r1
    2b3a:	41 1d       	adc	r20, r1
    2b3c:	a0 95       	com	r26
    2b3e:	81 f7       	brne	.-32     	; 0x2b20 <sqrt+0x52>
    2b40:	b9 01       	movw	r22, r18
    2b42:	84 2f       	mov	r24, r20
    2b44:	91 58       	subi	r25, 0x81	; 129
    2b46:	88 0f       	add	r24, r24
    2b48:	96 95       	lsr	r25
    2b4a:	87 95       	ror	r24
    2b4c:	08 95       	ret

00002b4e <__fp_norm2>:
    2b4e:	91 50       	subi	r25, 0x01	; 1
    2b50:	50 40       	sbci	r21, 0x00	; 0
    2b52:	66 0f       	add	r22, r22
    2b54:	77 1f       	adc	r23, r23
    2b56:	88 1f       	adc	r24, r24
    2b58:	d2 f7       	brpl	.-12     	; 0x2b4e <__fp_norm2>
    2b5a:	08 95       	ret

00002b5c <dtostrf>:
    2b5c:	ef 92       	push	r14
    2b5e:	0f 93       	push	r16
    2b60:	1f 93       	push	r17
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	e8 01       	movw	r28, r16
    2b68:	47 fd       	sbrc	r20, 7
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <dtostrf+0x14>
    2b6c:	34 e0       	ldi	r19, 0x04	; 4
    2b6e:	01 c0       	rjmp	.+2      	; 0x2b72 <dtostrf+0x16>
    2b70:	34 e1       	ldi	r19, 0x14	; 20
    2b72:	e4 2f       	mov	r30, r20
    2b74:	44 0f       	add	r20, r20
    2b76:	ff 0b       	sbc	r31, r31
    2b78:	f7 ff       	sbrs	r31, 7
    2b7a:	03 c0       	rjmp	.+6      	; 0x2b82 <dtostrf+0x26>
    2b7c:	f1 95       	neg	r31
    2b7e:	e1 95       	neg	r30
    2b80:	f1 09       	sbc	r31, r1
    2b82:	e3 2e       	mov	r14, r19
    2b84:	02 2f       	mov	r16, r18
    2b86:	2e 2f       	mov	r18, r30
    2b88:	ae 01       	movw	r20, r28
    2b8a:	0e 94 41 1a 	call	0x3482	; 0x3482 <dtoa_prf>
    2b8e:	ce 01       	movw	r24, r28
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	1f 91       	pop	r17
    2b96:	0f 91       	pop	r16
    2b98:	ef 90       	pop	r14
    2b9a:	08 95       	ret

00002b9c <malloc>:
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	82 30       	cpi	r24, 0x02	; 2
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	10 f4       	brcc	.+4      	; 0x2baa <malloc+0xe>
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	e0 91 63 05 	lds	r30, 0x0563
    2bae:	f0 91 64 05 	lds	r31, 0x0564
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	c0 e0       	ldi	r28, 0x00	; 0
    2bb8:	d0 e0       	ldi	r29, 0x00	; 0
    2bba:	30 97       	sbiw	r30, 0x00	; 0
    2bbc:	11 f1       	breq	.+68     	; 0x2c02 <malloc+0x66>
    2bbe:	40 81       	ld	r20, Z
    2bc0:	51 81       	ldd	r21, Z+1	; 0x01
    2bc2:	48 17       	cp	r20, r24
    2bc4:	59 07       	cpc	r21, r25
    2bc6:	c0 f0       	brcs	.+48     	; 0x2bf8 <malloc+0x5c>
    2bc8:	48 17       	cp	r20, r24
    2bca:	59 07       	cpc	r21, r25
    2bcc:	61 f4       	brne	.+24     	; 0x2be6 <malloc+0x4a>
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	20 97       	sbiw	r28, 0x00	; 0
    2bd4:	19 f0       	breq	.+6      	; 0x2bdc <malloc+0x40>
    2bd6:	9b 83       	std	Y+3, r25	; 0x03
    2bd8:	8a 83       	std	Y+2, r24	; 0x02
    2bda:	2b c0       	rjmp	.+86     	; 0x2c32 <malloc+0x96>
    2bdc:	90 93 64 05 	sts	0x0564, r25
    2be0:	80 93 63 05 	sts	0x0563, r24
    2be4:	26 c0       	rjmp	.+76     	; 0x2c32 <malloc+0x96>
    2be6:	21 15       	cp	r18, r1
    2be8:	31 05       	cpc	r19, r1
    2bea:	19 f0       	breq	.+6      	; 0x2bf2 <malloc+0x56>
    2bec:	42 17       	cp	r20, r18
    2bee:	53 07       	cpc	r21, r19
    2bf0:	18 f4       	brcc	.+6      	; 0x2bf8 <malloc+0x5c>
    2bf2:	9a 01       	movw	r18, r20
    2bf4:	be 01       	movw	r22, r28
    2bf6:	df 01       	movw	r26, r30
    2bf8:	ef 01       	movw	r28, r30
    2bfa:	02 80       	ldd	r0, Z+2	; 0x02
    2bfc:	f3 81       	ldd	r31, Z+3	; 0x03
    2bfe:	e0 2d       	mov	r30, r0
    2c00:	dc cf       	rjmp	.-72     	; 0x2bba <malloc+0x1e>
    2c02:	21 15       	cp	r18, r1
    2c04:	31 05       	cpc	r19, r1
    2c06:	09 f1       	breq	.+66     	; 0x2c4a <malloc+0xae>
    2c08:	28 1b       	sub	r18, r24
    2c0a:	39 0b       	sbc	r19, r25
    2c0c:	24 30       	cpi	r18, 0x04	; 4
    2c0e:	31 05       	cpc	r19, r1
    2c10:	90 f4       	brcc	.+36     	; 0x2c36 <malloc+0x9a>
    2c12:	12 96       	adiw	r26, 0x02	; 2
    2c14:	8d 91       	ld	r24, X+
    2c16:	9c 91       	ld	r25, X
    2c18:	13 97       	sbiw	r26, 0x03	; 3
    2c1a:	61 15       	cp	r22, r1
    2c1c:	71 05       	cpc	r23, r1
    2c1e:	21 f0       	breq	.+8      	; 0x2c28 <malloc+0x8c>
    2c20:	fb 01       	movw	r30, r22
    2c22:	93 83       	std	Z+3, r25	; 0x03
    2c24:	82 83       	std	Z+2, r24	; 0x02
    2c26:	04 c0       	rjmp	.+8      	; 0x2c30 <malloc+0x94>
    2c28:	90 93 64 05 	sts	0x0564, r25
    2c2c:	80 93 63 05 	sts	0x0563, r24
    2c30:	fd 01       	movw	r30, r26
    2c32:	32 96       	adiw	r30, 0x02	; 2
    2c34:	44 c0       	rjmp	.+136    	; 0x2cbe <malloc+0x122>
    2c36:	fd 01       	movw	r30, r26
    2c38:	e2 0f       	add	r30, r18
    2c3a:	f3 1f       	adc	r31, r19
    2c3c:	81 93       	st	Z+, r24
    2c3e:	91 93       	st	Z+, r25
    2c40:	22 50       	subi	r18, 0x02	; 2
    2c42:	31 09       	sbc	r19, r1
    2c44:	2d 93       	st	X+, r18
    2c46:	3c 93       	st	X, r19
    2c48:	3a c0       	rjmp	.+116    	; 0x2cbe <malloc+0x122>
    2c4a:	20 91 61 05 	lds	r18, 0x0561
    2c4e:	30 91 62 05 	lds	r19, 0x0562
    2c52:	23 2b       	or	r18, r19
    2c54:	41 f4       	brne	.+16     	; 0x2c66 <malloc+0xca>
    2c56:	20 91 02 01 	lds	r18, 0x0102
    2c5a:	30 91 03 01 	lds	r19, 0x0103
    2c5e:	30 93 62 05 	sts	0x0562, r19
    2c62:	20 93 61 05 	sts	0x0561, r18
    2c66:	20 91 00 01 	lds	r18, 0x0100
    2c6a:	30 91 01 01 	lds	r19, 0x0101
    2c6e:	21 15       	cp	r18, r1
    2c70:	31 05       	cpc	r19, r1
    2c72:	41 f4       	brne	.+16     	; 0x2c84 <malloc+0xe8>
    2c74:	2d b7       	in	r18, 0x3d	; 61
    2c76:	3e b7       	in	r19, 0x3e	; 62
    2c78:	40 91 04 01 	lds	r20, 0x0104
    2c7c:	50 91 05 01 	lds	r21, 0x0105
    2c80:	24 1b       	sub	r18, r20
    2c82:	35 0b       	sbc	r19, r21
    2c84:	e0 91 61 05 	lds	r30, 0x0561
    2c88:	f0 91 62 05 	lds	r31, 0x0562
    2c8c:	e2 17       	cp	r30, r18
    2c8e:	f3 07       	cpc	r31, r19
    2c90:	a0 f4       	brcc	.+40     	; 0x2cba <malloc+0x11e>
    2c92:	2e 1b       	sub	r18, r30
    2c94:	3f 0b       	sbc	r19, r31
    2c96:	28 17       	cp	r18, r24
    2c98:	39 07       	cpc	r19, r25
    2c9a:	78 f0       	brcs	.+30     	; 0x2cba <malloc+0x11e>
    2c9c:	ac 01       	movw	r20, r24
    2c9e:	4e 5f       	subi	r20, 0xFE	; 254
    2ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca2:	24 17       	cp	r18, r20
    2ca4:	35 07       	cpc	r19, r21
    2ca6:	48 f0       	brcs	.+18     	; 0x2cba <malloc+0x11e>
    2ca8:	4e 0f       	add	r20, r30
    2caa:	5f 1f       	adc	r21, r31
    2cac:	50 93 62 05 	sts	0x0562, r21
    2cb0:	40 93 61 05 	sts	0x0561, r20
    2cb4:	81 93       	st	Z+, r24
    2cb6:	91 93       	st	Z+, r25
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <malloc+0x122>
    2cba:	e0 e0       	ldi	r30, 0x00	; 0
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	cf 01       	movw	r24, r30
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	08 95       	ret

00002cc6 <free>:
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <free+0xe>
    2cd2:	8c c0       	rjmp	.+280    	; 0x2dec <free+0x126>
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	32 97       	sbiw	r30, 0x02	; 2
    2cd8:	13 82       	std	Z+3, r1	; 0x03
    2cda:	12 82       	std	Z+2, r1	; 0x02
    2cdc:	00 91 63 05 	lds	r16, 0x0563
    2ce0:	10 91 64 05 	lds	r17, 0x0564
    2ce4:	01 15       	cp	r16, r1
    2ce6:	11 05       	cpc	r17, r1
    2ce8:	81 f4       	brne	.+32     	; 0x2d0a <free+0x44>
    2cea:	20 81       	ld	r18, Z
    2cec:	31 81       	ldd	r19, Z+1	; 0x01
    2cee:	82 0f       	add	r24, r18
    2cf0:	93 1f       	adc	r25, r19
    2cf2:	20 91 61 05 	lds	r18, 0x0561
    2cf6:	30 91 62 05 	lds	r19, 0x0562
    2cfa:	28 17       	cp	r18, r24
    2cfc:	39 07       	cpc	r19, r25
    2cfe:	79 f5       	brne	.+94     	; 0x2d5e <free+0x98>
    2d00:	f0 93 62 05 	sts	0x0562, r31
    2d04:	e0 93 61 05 	sts	0x0561, r30
    2d08:	71 c0       	rjmp	.+226    	; 0x2dec <free+0x126>
    2d0a:	d8 01       	movw	r26, r16
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	50 e0       	ldi	r21, 0x00	; 0
    2d10:	ae 17       	cp	r26, r30
    2d12:	bf 07       	cpc	r27, r31
    2d14:	50 f4       	brcc	.+20     	; 0x2d2a <free+0x64>
    2d16:	12 96       	adiw	r26, 0x02	; 2
    2d18:	2d 91       	ld	r18, X+
    2d1a:	3c 91       	ld	r19, X
    2d1c:	13 97       	sbiw	r26, 0x03	; 3
    2d1e:	ad 01       	movw	r20, r26
    2d20:	21 15       	cp	r18, r1
    2d22:	31 05       	cpc	r19, r1
    2d24:	09 f1       	breq	.+66     	; 0x2d68 <free+0xa2>
    2d26:	d9 01       	movw	r26, r18
    2d28:	f3 cf       	rjmp	.-26     	; 0x2d10 <free+0x4a>
    2d2a:	9d 01       	movw	r18, r26
    2d2c:	da 01       	movw	r26, r20
    2d2e:	33 83       	std	Z+3, r19	; 0x03
    2d30:	22 83       	std	Z+2, r18	; 0x02
    2d32:	60 81       	ld	r22, Z
    2d34:	71 81       	ldd	r23, Z+1	; 0x01
    2d36:	86 0f       	add	r24, r22
    2d38:	97 1f       	adc	r25, r23
    2d3a:	82 17       	cp	r24, r18
    2d3c:	93 07       	cpc	r25, r19
    2d3e:	69 f4       	brne	.+26     	; 0x2d5a <free+0x94>
    2d40:	ec 01       	movw	r28, r24
    2d42:	28 81       	ld	r18, Y
    2d44:	39 81       	ldd	r19, Y+1	; 0x01
    2d46:	26 0f       	add	r18, r22
    2d48:	37 1f       	adc	r19, r23
    2d4a:	2e 5f       	subi	r18, 0xFE	; 254
    2d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4e:	31 83       	std	Z+1, r19	; 0x01
    2d50:	20 83       	st	Z, r18
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	9b 81       	ldd	r25, Y+3	; 0x03
    2d56:	93 83       	std	Z+3, r25	; 0x03
    2d58:	82 83       	std	Z+2, r24	; 0x02
    2d5a:	45 2b       	or	r20, r21
    2d5c:	29 f4       	brne	.+10     	; 0x2d68 <free+0xa2>
    2d5e:	f0 93 64 05 	sts	0x0564, r31
    2d62:	e0 93 63 05 	sts	0x0563, r30
    2d66:	42 c0       	rjmp	.+132    	; 0x2dec <free+0x126>
    2d68:	13 96       	adiw	r26, 0x03	; 3
    2d6a:	fc 93       	st	X, r31
    2d6c:	ee 93       	st	-X, r30
    2d6e:	12 97       	sbiw	r26, 0x02	; 2
    2d70:	ed 01       	movw	r28, r26
    2d72:	49 91       	ld	r20, Y+
    2d74:	59 91       	ld	r21, Y+
    2d76:	9e 01       	movw	r18, r28
    2d78:	24 0f       	add	r18, r20
    2d7a:	35 1f       	adc	r19, r21
    2d7c:	e2 17       	cp	r30, r18
    2d7e:	f3 07       	cpc	r31, r19
    2d80:	71 f4       	brne	.+28     	; 0x2d9e <free+0xd8>
    2d82:	80 81       	ld	r24, Z
    2d84:	91 81       	ldd	r25, Z+1	; 0x01
    2d86:	84 0f       	add	r24, r20
    2d88:	95 1f       	adc	r25, r21
    2d8a:	02 96       	adiw	r24, 0x02	; 2
    2d8c:	11 96       	adiw	r26, 0x01	; 1
    2d8e:	9c 93       	st	X, r25
    2d90:	8e 93       	st	-X, r24
    2d92:	82 81       	ldd	r24, Z+2	; 0x02
    2d94:	93 81       	ldd	r25, Z+3	; 0x03
    2d96:	13 96       	adiw	r26, 0x03	; 3
    2d98:	9c 93       	st	X, r25
    2d9a:	8e 93       	st	-X, r24
    2d9c:	12 97       	sbiw	r26, 0x02	; 2
    2d9e:	e0 e0       	ldi	r30, 0x00	; 0
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	d8 01       	movw	r26, r16
    2da4:	12 96       	adiw	r26, 0x02	; 2
    2da6:	8d 91       	ld	r24, X+
    2da8:	9c 91       	ld	r25, X
    2daa:	13 97       	sbiw	r26, 0x03	; 3
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	19 f0       	breq	.+6      	; 0x2db6 <free+0xf0>
    2db0:	f8 01       	movw	r30, r16
    2db2:	8c 01       	movw	r16, r24
    2db4:	f6 cf       	rjmp	.-20     	; 0x2da2 <free+0xdc>
    2db6:	8d 91       	ld	r24, X+
    2db8:	9c 91       	ld	r25, X
    2dba:	98 01       	movw	r18, r16
    2dbc:	2e 5f       	subi	r18, 0xFE	; 254
    2dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc0:	82 0f       	add	r24, r18
    2dc2:	93 1f       	adc	r25, r19
    2dc4:	20 91 61 05 	lds	r18, 0x0561
    2dc8:	30 91 62 05 	lds	r19, 0x0562
    2dcc:	28 17       	cp	r18, r24
    2dce:	39 07       	cpc	r19, r25
    2dd0:	69 f4       	brne	.+26     	; 0x2dec <free+0x126>
    2dd2:	30 97       	sbiw	r30, 0x00	; 0
    2dd4:	29 f4       	brne	.+10     	; 0x2de0 <free+0x11a>
    2dd6:	10 92 64 05 	sts	0x0564, r1
    2dda:	10 92 63 05 	sts	0x0563, r1
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <free+0x11e>
    2de0:	13 82       	std	Z+3, r1	; 0x03
    2de2:	12 82       	std	Z+2, r1	; 0x02
    2de4:	10 93 62 05 	sts	0x0562, r17
    2de8:	00 93 61 05 	sts	0x0561, r16
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	08 95       	ret

00002df6 <strtol>:
    2df6:	a0 e0       	ldi	r26, 0x00	; 0
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e1 e0       	ldi	r30, 0x01	; 1
    2dfc:	f7 e1       	ldi	r31, 0x17	; 23
    2dfe:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__prologue_saves__>
    2e02:	5c 01       	movw	r10, r24
    2e04:	6b 01       	movw	r12, r22
    2e06:	7a 01       	movw	r14, r20
    2e08:	61 15       	cp	r22, r1
    2e0a:	71 05       	cpc	r23, r1
    2e0c:	19 f0       	breq	.+6      	; 0x2e14 <strtol+0x1e>
    2e0e:	fb 01       	movw	r30, r22
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	80 83       	st	Z, r24
    2e14:	e1 14       	cp	r14, r1
    2e16:	f1 04       	cpc	r15, r1
    2e18:	29 f0       	breq	.+10     	; 0x2e24 <strtol+0x2e>
    2e1a:	c7 01       	movw	r24, r14
    2e1c:	02 97       	sbiw	r24, 0x02	; 2
    2e1e:	83 97       	sbiw	r24, 0x23	; 35
    2e20:	08 f0       	brcs	.+2      	; 0x2e24 <strtol+0x2e>
    2e22:	f1 c0       	rjmp	.+482    	; 0x3006 <strtol+0x210>
    2e24:	e5 01       	movw	r28, r10
    2e26:	21 96       	adiw	r28, 0x01	; 1
    2e28:	f5 01       	movw	r30, r10
    2e2a:	10 81       	ld	r17, Z
    2e2c:	81 2f       	mov	r24, r17
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	0e 94 0c 18 	call	0x3018	; 0x3018 <isspace>
    2e34:	89 2b       	or	r24, r25
    2e36:	11 f0       	breq	.+4      	; 0x2e3c <strtol+0x46>
    2e38:	5e 01       	movw	r10, r28
    2e3a:	f4 cf       	rjmp	.-24     	; 0x2e24 <strtol+0x2e>
    2e3c:	1d 32       	cpi	r17, 0x2D	; 45
    2e3e:	29 f4       	brne	.+10     	; 0x2e4a <strtol+0x54>
    2e40:	21 96       	adiw	r28, 0x01	; 1
    2e42:	f5 01       	movw	r30, r10
    2e44:	11 81       	ldd	r17, Z+1	; 0x01
    2e46:	01 e0       	ldi	r16, 0x01	; 1
    2e48:	07 c0       	rjmp	.+14     	; 0x2e58 <strtol+0x62>
    2e4a:	1b 32       	cpi	r17, 0x2B	; 43
    2e4c:	21 f4       	brne	.+8      	; 0x2e56 <strtol+0x60>
    2e4e:	e5 01       	movw	r28, r10
    2e50:	22 96       	adiw	r28, 0x02	; 2
    2e52:	f5 01       	movw	r30, r10
    2e54:	11 81       	ldd	r17, Z+1	; 0x01
    2e56:	00 e0       	ldi	r16, 0x00	; 0
    2e58:	e1 14       	cp	r14, r1
    2e5a:	f1 04       	cpc	r15, r1
    2e5c:	59 f1       	breq	.+86     	; 0x2eb4 <strtol+0xbe>
    2e5e:	f0 e1       	ldi	r31, 0x10	; 16
    2e60:	ef 16       	cp	r14, r31
    2e62:	f1 04       	cpc	r15, r1
    2e64:	61 f4       	brne	.+24     	; 0x2e7e <strtol+0x88>
    2e66:	10 33       	cpi	r17, 0x30	; 48
    2e68:	e1 f4       	brne	.+56     	; 0x2ea2 <strtol+0xac>
    2e6a:	88 81       	ld	r24, Y
    2e6c:	8f 7d       	andi	r24, 0xDF	; 223
    2e6e:	88 35       	cpi	r24, 0x58	; 88
    2e70:	69 f5       	brne	.+90     	; 0x2ecc <strtol+0xd6>
    2e72:	19 81       	ldd	r17, Y+1	; 0x01
    2e74:	22 96       	adiw	r28, 0x02	; 2
    2e76:	02 60       	ori	r16, 0x02	; 2
    2e78:	70 e1       	ldi	r23, 0x10	; 16
    2e7a:	e7 2e       	mov	r14, r23
    2e7c:	f1 2c       	mov	r15, r1
    2e7e:	88 e0       	ldi	r24, 0x08	; 8
    2e80:	e8 16       	cp	r14, r24
    2e82:	f1 04       	cpc	r15, r1
    2e84:	39 f1       	breq	.+78     	; 0x2ed4 <strtol+0xde>
    2e86:	2c f4       	brge	.+10     	; 0x2e92 <strtol+0x9c>
    2e88:	f2 e0       	ldi	r31, 0x02	; 2
    2e8a:	ef 16       	cp	r14, r31
    2e8c:	f1 04       	cpc	r15, r1
    2e8e:	c9 f1       	breq	.+114    	; 0x2f02 <strtol+0x10c>
    2e90:	2a c0       	rjmp	.+84     	; 0x2ee6 <strtol+0xf0>
    2e92:	8a e0       	ldi	r24, 0x0A	; 10
    2e94:	e8 16       	cp	r14, r24
    2e96:	f1 04       	cpc	r15, r1
    2e98:	79 f0       	breq	.+30     	; 0x2eb8 <strtol+0xc2>
    2e9a:	e0 e1       	ldi	r30, 0x10	; 16
    2e9c:	ee 16       	cp	r14, r30
    2e9e:	f1 04       	cpc	r15, r1
    2ea0:	11 f5       	brne	.+68     	; 0x2ee6 <strtol+0xf0>
    2ea2:	50 e1       	ldi	r21, 0x10	; 16
    2ea4:	e5 2e       	mov	r14, r21
    2ea6:	f1 2c       	mov	r15, r1
    2ea8:	81 2c       	mov	r8, r1
    2eaa:	91 2c       	mov	r9, r1
    2eac:	a1 2c       	mov	r10, r1
    2eae:	68 e0       	ldi	r22, 0x08	; 8
    2eb0:	b6 2e       	mov	r11, r22
    2eb2:	2c c0       	rjmp	.+88     	; 0x2f0c <strtol+0x116>
    2eb4:	10 33       	cpi	r17, 0x30	; 48
    2eb6:	c9 f2       	breq	.-78     	; 0x2e6a <strtol+0x74>
    2eb8:	3a e0       	ldi	r19, 0x0A	; 10
    2eba:	e3 2e       	mov	r14, r19
    2ebc:	f1 2c       	mov	r15, r1
    2ebe:	4c ec       	ldi	r20, 0xCC	; 204
    2ec0:	84 2e       	mov	r8, r20
    2ec2:	98 2c       	mov	r9, r8
    2ec4:	a8 2c       	mov	r10, r8
    2ec6:	4c e0       	ldi	r20, 0x0C	; 12
    2ec8:	b4 2e       	mov	r11, r20
    2eca:	20 c0       	rjmp	.+64     	; 0x2f0c <strtol+0x116>
    2ecc:	10 e3       	ldi	r17, 0x30	; 48
    2ece:	e1 14       	cp	r14, r1
    2ed0:	f1 04       	cpc	r15, r1
    2ed2:	a9 f6       	brne	.-86     	; 0x2e7e <strtol+0x88>
    2ed4:	98 e0       	ldi	r25, 0x08	; 8
    2ed6:	e9 2e       	mov	r14, r25
    2ed8:	f1 2c       	mov	r15, r1
    2eda:	81 2c       	mov	r8, r1
    2edc:	91 2c       	mov	r9, r1
    2ede:	a1 2c       	mov	r10, r1
    2ee0:	20 e1       	ldi	r18, 0x10	; 16
    2ee2:	b2 2e       	mov	r11, r18
    2ee4:	13 c0       	rjmp	.+38     	; 0x2f0c <strtol+0x116>
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	70 e0       	ldi	r23, 0x00	; 0
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e8       	ldi	r25, 0x80	; 128
    2eee:	97 01       	movw	r18, r14
    2ef0:	0f 2c       	mov	r0, r15
    2ef2:	00 0c       	add	r0, r0
    2ef4:	44 0b       	sbc	r20, r20
    2ef6:	55 0b       	sbc	r21, r21
    2ef8:	0e 94 32 13 	call	0x2664	; 0x2664 <__udivmodsi4>
    2efc:	49 01       	movw	r8, r18
    2efe:	5a 01       	movw	r10, r20
    2f00:	05 c0       	rjmp	.+10     	; 0x2f0c <strtol+0x116>
    2f02:	81 2c       	mov	r8, r1
    2f04:	91 2c       	mov	r9, r1
    2f06:	a1 2c       	mov	r10, r1
    2f08:	80 e4       	ldi	r24, 0x40	; 64
    2f0a:	b8 2e       	mov	r11, r24
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	a9 01       	movw	r20, r18
    2f14:	27 01       	movw	r4, r14
    2f16:	0f 2c       	mov	r0, r15
    2f18:	00 0c       	add	r0, r0
    2f1a:	66 08       	sbc	r6, r6
    2f1c:	77 08       	sbc	r7, r7
    2f1e:	1e 01       	movw	r2, r28
    2f20:	e0 ed       	ldi	r30, 0xD0	; 208
    2f22:	e1 0f       	add	r30, r17
    2f24:	ea 30       	cpi	r30, 0x0A	; 10
    2f26:	60 f0       	brcs	.+24     	; 0x2f40 <strtol+0x14a>
    2f28:	8f eb       	ldi	r24, 0xBF	; 191
    2f2a:	81 0f       	add	r24, r17
    2f2c:	8a 31       	cpi	r24, 0x1A	; 26
    2f2e:	10 f4       	brcc	.+4      	; 0x2f34 <strtol+0x13e>
    2f30:	e9 ec       	ldi	r30, 0xC9	; 201
    2f32:	05 c0       	rjmp	.+10     	; 0x2f3e <strtol+0x148>
    2f34:	8f e9       	ldi	r24, 0x9F	; 159
    2f36:	81 0f       	add	r24, r17
    2f38:	8a 31       	cpi	r24, 0x1A	; 26
    2f3a:	28 f5       	brcc	.+74     	; 0x2f86 <strtol+0x190>
    2f3c:	e9 ea       	ldi	r30, 0xA9	; 169
    2f3e:	e1 0f       	add	r30, r17
    2f40:	8e 2f       	mov	r24, r30
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	8e 15       	cp	r24, r14
    2f46:	9f 05       	cpc	r25, r15
    2f48:	f4 f4       	brge	.+60     	; 0x2f86 <strtol+0x190>
    2f4a:	67 fd       	sbrc	r22, 7
    2f4c:	18 c0       	rjmp	.+48     	; 0x2f7e <strtol+0x188>
    2f4e:	82 16       	cp	r8, r18
    2f50:	93 06       	cpc	r9, r19
    2f52:	a4 06       	cpc	r10, r20
    2f54:	b5 06       	cpc	r11, r21
    2f56:	90 f0       	brcs	.+36     	; 0x2f7c <strtol+0x186>
    2f58:	c3 01       	movw	r24, r6
    2f5a:	b2 01       	movw	r22, r4
    2f5c:	0e 94 56 1d 	call	0x3aac	; 0x3aac <__mulsi3>
    2f60:	9b 01       	movw	r18, r22
    2f62:	ac 01       	movw	r20, r24
    2f64:	2e 0f       	add	r18, r30
    2f66:	31 1d       	adc	r19, r1
    2f68:	41 1d       	adc	r20, r1
    2f6a:	51 1d       	adc	r21, r1
    2f6c:	21 30       	cpi	r18, 0x01	; 1
    2f6e:	31 05       	cpc	r19, r1
    2f70:	41 05       	cpc	r20, r1
    2f72:	f0 e8       	ldi	r31, 0x80	; 128
    2f74:	5f 07       	cpc	r21, r31
    2f76:	10 f4       	brcc	.+4      	; 0x2f7c <strtol+0x186>
    2f78:	61 e0       	ldi	r22, 0x01	; 1
    2f7a:	01 c0       	rjmp	.+2      	; 0x2f7e <strtol+0x188>
    2f7c:	6f ef       	ldi	r22, 0xFF	; 255
    2f7e:	21 96       	adiw	r28, 0x01	; 1
    2f80:	f1 01       	movw	r30, r2
    2f82:	10 81       	ld	r17, Z
    2f84:	cc cf       	rjmp	.-104    	; 0x2f1e <strtol+0x128>
    2f86:	80 2f       	mov	r24, r16
    2f88:	81 70       	andi	r24, 0x01	; 1
    2f8a:	c1 14       	cp	r12, r1
    2f8c:	d1 04       	cpc	r13, r1
    2f8e:	71 f0       	breq	.+28     	; 0x2fac <strtol+0x1b6>
    2f90:	66 23       	and	r22, r22
    2f92:	29 f0       	breq	.+10     	; 0x2f9e <strtol+0x1a8>
    2f94:	21 97       	sbiw	r28, 0x01	; 1
    2f96:	f6 01       	movw	r30, r12
    2f98:	d1 83       	std	Z+1, r29	; 0x01
    2f9a:	c0 83       	st	Z, r28
    2f9c:	07 c0       	rjmp	.+14     	; 0x2fac <strtol+0x1b6>
    2f9e:	01 ff       	sbrs	r16, 1
    2fa0:	19 c0       	rjmp	.+50     	; 0x2fd4 <strtol+0x1de>
    2fa2:	22 97       	sbiw	r28, 0x02	; 2
    2fa4:	f6 01       	movw	r30, r12
    2fa6:	d1 83       	std	Z+1, r29	; 0x01
    2fa8:	c0 83       	st	Z, r28
    2faa:	14 c0       	rjmp	.+40     	; 0x2fd4 <strtol+0x1de>
    2fac:	67 ff       	sbrs	r22, 7
    2fae:	12 c0       	rjmp	.+36     	; 0x2fd4 <strtol+0x1de>
    2fb0:	81 11       	cpse	r24, r1
    2fb2:	05 c0       	rjmp	.+10     	; 0x2fbe <strtol+0x1c8>
    2fb4:	2f ef       	ldi	r18, 0xFF	; 255
    2fb6:	3f ef       	ldi	r19, 0xFF	; 255
    2fb8:	4f ef       	ldi	r20, 0xFF	; 255
    2fba:	5f e7       	ldi	r21, 0x7F	; 127
    2fbc:	04 c0       	rjmp	.+8      	; 0x2fc6 <strtol+0x1d0>
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	50 e8       	ldi	r21, 0x80	; 128
    2fc6:	82 e2       	ldi	r24, 0x22	; 34
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	90 93 66 05 	sts	0x0566, r25
    2fce:	80 93 65 05 	sts	0x0565, r24
    2fd2:	16 c0       	rjmp	.+44     	; 0x3000 <strtol+0x20a>
    2fd4:	88 23       	and	r24, r24
    2fd6:	41 f0       	breq	.+16     	; 0x2fe8 <strtol+0x1f2>
    2fd8:	50 95       	com	r21
    2fda:	40 95       	com	r20
    2fdc:	30 95       	com	r19
    2fde:	21 95       	neg	r18
    2fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe2:	4f 4f       	sbci	r20, 0xFF	; 255
    2fe4:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe6:	0c c0       	rjmp	.+24     	; 0x3000 <strtol+0x20a>
    2fe8:	57 ff       	sbrs	r21, 7
    2fea:	0a c0       	rjmp	.+20     	; 0x3000 <strtol+0x20a>
    2fec:	82 e2       	ldi	r24, 0x22	; 34
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	90 93 66 05 	sts	0x0566, r25
    2ff4:	80 93 65 05 	sts	0x0565, r24
    2ff8:	2f ef       	ldi	r18, 0xFF	; 255
    2ffa:	3f ef       	ldi	r19, 0xFF	; 255
    2ffc:	4f ef       	ldi	r20, 0xFF	; 255
    2ffe:	5f e7       	ldi	r21, 0x7F	; 127
    3000:	b9 01       	movw	r22, r18
    3002:	ca 01       	movw	r24, r20
    3004:	04 c0       	rjmp	.+8      	; 0x300e <strtol+0x218>
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	e2 e1       	ldi	r30, 0x12	; 18
    3014:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__epilogue_restores__>

00003018 <isspace>:
    3018:	91 11       	cpse	r25, r1
    301a:	0c 94 a7 1c 	jmp	0x394e	; 0x394e <__ctype_isfalse>
    301e:	80 32       	cpi	r24, 0x20	; 32
    3020:	19 f0       	breq	.+6      	; 0x3028 <isspace+0x10>
    3022:	89 50       	subi	r24, 0x09	; 9
    3024:	85 50       	subi	r24, 0x05	; 5
    3026:	c8 f7       	brcc	.-14     	; 0x301a <isspace+0x2>
    3028:	08 95       	ret

0000302a <strtok>:
    302a:	44 ef       	ldi	r20, 0xF4	; 244
    302c:	51 e0       	ldi	r21, 0x01	; 1
    302e:	0e 94 25 18 	call	0x304a	; 0x304a <strtok_r>
    3032:	08 95       	ret

00003034 <strcat>:
    3034:	fb 01       	movw	r30, r22
    3036:	dc 01       	movw	r26, r24
    3038:	0d 90       	ld	r0, X+
    303a:	00 20       	and	r0, r0
    303c:	e9 f7       	brne	.-6      	; 0x3038 <strcat+0x4>
    303e:	11 97       	sbiw	r26, 0x01	; 1
    3040:	01 90       	ld	r0, Z+
    3042:	0d 92       	st	X+, r0
    3044:	00 20       	and	r0, r0
    3046:	e1 f7       	brne	.-8      	; 0x3040 <strcat+0xc>
    3048:	08 95       	ret

0000304a <strtok_r>:
    304a:	fa 01       	movw	r30, r20
    304c:	a1 91       	ld	r26, Z+
    304e:	b0 81       	ld	r27, Z
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	19 f4       	brne	.+6      	; 0x305a <strtok_r+0x10>
    3054:	10 97       	sbiw	r26, 0x00	; 0
    3056:	e1 f0       	breq	.+56     	; 0x3090 <strtok_r+0x46>
    3058:	cd 01       	movw	r24, r26
    305a:	dc 01       	movw	r26, r24
    305c:	cd 01       	movw	r24, r26
    305e:	0d 90       	ld	r0, X+
    3060:	00 20       	and	r0, r0
    3062:	11 f4       	brne	.+4      	; 0x3068 <strtok_r+0x1e>
    3064:	c0 01       	movw	r24, r0
    3066:	13 c0       	rjmp	.+38     	; 0x308e <strtok_r+0x44>
    3068:	fb 01       	movw	r30, r22
    306a:	21 91       	ld	r18, Z+
    306c:	22 23       	and	r18, r18
    306e:	19 f0       	breq	.+6      	; 0x3076 <strtok_r+0x2c>
    3070:	20 15       	cp	r18, r0
    3072:	d9 f7       	brne	.-10     	; 0x306a <strtok_r+0x20>
    3074:	f3 cf       	rjmp	.-26     	; 0x305c <strtok_r+0x12>
    3076:	fb 01       	movw	r30, r22
    3078:	21 91       	ld	r18, Z+
    307a:	20 15       	cp	r18, r0
    307c:	19 f4       	brne	.+6      	; 0x3084 <strtok_r+0x3a>
    307e:	1e 92       	st	-X, r1
    3080:	11 96       	adiw	r26, 0x01	; 1
    3082:	06 c0       	rjmp	.+12     	; 0x3090 <strtok_r+0x46>
    3084:	22 23       	and	r18, r18
    3086:	c1 f7       	brne	.-16     	; 0x3078 <strtok_r+0x2e>
    3088:	0d 90       	ld	r0, X+
    308a:	00 20       	and	r0, r0
    308c:	a1 f7       	brne	.-24     	; 0x3076 <strtok_r+0x2c>
    308e:	d0 01       	movw	r26, r0
    3090:	fa 01       	movw	r30, r20
    3092:	a1 93       	st	Z+, r26
    3094:	b0 83       	st	Z, r27
    3096:	08 95       	ret

00003098 <sprintf>:
    3098:	ae e0       	ldi	r26, 0x0E	; 14
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	e2 e5       	ldi	r30, 0x52	; 82
    309e:	f8 e1       	ldi	r31, 0x18	; 24
    30a0:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__prologue_saves__+0x1c>
    30a4:	0d 89       	ldd	r16, Y+21	; 0x15
    30a6:	1e 89       	ldd	r17, Y+22	; 0x16
    30a8:	86 e0       	ldi	r24, 0x06	; 6
    30aa:	8c 83       	std	Y+4, r24	; 0x04
    30ac:	1a 83       	std	Y+2, r17	; 0x02
    30ae:	09 83       	std	Y+1, r16	; 0x01
    30b0:	8f ef       	ldi	r24, 0xFF	; 255
    30b2:	9f e7       	ldi	r25, 0x7F	; 127
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	ae 01       	movw	r20, r28
    30ba:	47 5e       	subi	r20, 0xE7	; 231
    30bc:	5f 4f       	sbci	r21, 0xFF	; 255
    30be:	6f 89       	ldd	r22, Y+23	; 0x17
    30c0:	78 8d       	ldd	r23, Y+24	; 0x18
    30c2:	ce 01       	movw	r24, r28
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	0e 94 6f 18 	call	0x30de	; 0x30de <vfprintf>
    30ca:	2f 81       	ldd	r18, Y+7	; 0x07
    30cc:	38 85       	ldd	r19, Y+8	; 0x08
    30ce:	f8 01       	movw	r30, r16
    30d0:	e2 0f       	add	r30, r18
    30d2:	f3 1f       	adc	r31, r19
    30d4:	10 82       	st	Z, r1
    30d6:	2e 96       	adiw	r28, 0x0e	; 14
    30d8:	e4 e0       	ldi	r30, 0x04	; 4
    30da:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <__epilogue_restores__+0x1c>

000030de <vfprintf>:
    30de:	ac e0       	ldi	r26, 0x0C	; 12
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e5 e7       	ldi	r30, 0x75	; 117
    30e4:	f8 e1       	ldi	r31, 0x18	; 24
    30e6:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__prologue_saves__>
    30ea:	7c 01       	movw	r14, r24
    30ec:	6b 01       	movw	r12, r22
    30ee:	8a 01       	movw	r16, r20
    30f0:	fc 01       	movw	r30, r24
    30f2:	17 82       	std	Z+7, r1	; 0x07
    30f4:	16 82       	std	Z+6, r1	; 0x06
    30f6:	83 81       	ldd	r24, Z+3	; 0x03
    30f8:	81 ff       	sbrs	r24, 1
    30fa:	bd c1       	rjmp	.+890    	; 0x3476 <vfprintf+0x398>
    30fc:	ce 01       	movw	r24, r28
    30fe:	01 96       	adiw	r24, 0x01	; 1
    3100:	4c 01       	movw	r8, r24
    3102:	f7 01       	movw	r30, r14
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	f6 01       	movw	r30, r12
    3108:	93 fd       	sbrc	r25, 3
    310a:	85 91       	lpm	r24, Z+
    310c:	93 ff       	sbrs	r25, 3
    310e:	81 91       	ld	r24, Z+
    3110:	6f 01       	movw	r12, r30
    3112:	88 23       	and	r24, r24
    3114:	09 f4       	brne	.+2      	; 0x3118 <vfprintf+0x3a>
    3116:	ab c1       	rjmp	.+854    	; 0x346e <vfprintf+0x390>
    3118:	85 32       	cpi	r24, 0x25	; 37
    311a:	39 f4       	brne	.+14     	; 0x312a <vfprintf+0x4c>
    311c:	93 fd       	sbrc	r25, 3
    311e:	85 91       	lpm	r24, Z+
    3120:	93 ff       	sbrs	r25, 3
    3122:	81 91       	ld	r24, Z+
    3124:	6f 01       	movw	r12, r30
    3126:	85 32       	cpi	r24, 0x25	; 37
    3128:	29 f4       	brne	.+10     	; 0x3134 <vfprintf+0x56>
    312a:	b7 01       	movw	r22, r14
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	0e 94 c0 1c 	call	0x3980	; 0x3980 <fputc>
    3132:	e7 cf       	rjmp	.-50     	; 0x3102 <vfprintf+0x24>
    3134:	51 2c       	mov	r5, r1
    3136:	31 2c       	mov	r3, r1
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	20 32       	cpi	r18, 0x20	; 32
    313c:	a0 f4       	brcc	.+40     	; 0x3166 <vfprintf+0x88>
    313e:	8b 32       	cpi	r24, 0x2B	; 43
    3140:	69 f0       	breq	.+26     	; 0x315c <vfprintf+0x7e>
    3142:	30 f4       	brcc	.+12     	; 0x3150 <vfprintf+0x72>
    3144:	80 32       	cpi	r24, 0x20	; 32
    3146:	59 f0       	breq	.+22     	; 0x315e <vfprintf+0x80>
    3148:	83 32       	cpi	r24, 0x23	; 35
    314a:	69 f4       	brne	.+26     	; 0x3166 <vfprintf+0x88>
    314c:	20 61       	ori	r18, 0x10	; 16
    314e:	2c c0       	rjmp	.+88     	; 0x31a8 <vfprintf+0xca>
    3150:	8d 32       	cpi	r24, 0x2D	; 45
    3152:	39 f0       	breq	.+14     	; 0x3162 <vfprintf+0x84>
    3154:	80 33       	cpi	r24, 0x30	; 48
    3156:	39 f4       	brne	.+14     	; 0x3166 <vfprintf+0x88>
    3158:	21 60       	ori	r18, 0x01	; 1
    315a:	26 c0       	rjmp	.+76     	; 0x31a8 <vfprintf+0xca>
    315c:	22 60       	ori	r18, 0x02	; 2
    315e:	24 60       	ori	r18, 0x04	; 4
    3160:	23 c0       	rjmp	.+70     	; 0x31a8 <vfprintf+0xca>
    3162:	28 60       	ori	r18, 0x08	; 8
    3164:	21 c0       	rjmp	.+66     	; 0x31a8 <vfprintf+0xca>
    3166:	27 fd       	sbrc	r18, 7
    3168:	27 c0       	rjmp	.+78     	; 0x31b8 <vfprintf+0xda>
    316a:	30 ed       	ldi	r19, 0xD0	; 208
    316c:	38 0f       	add	r19, r24
    316e:	3a 30       	cpi	r19, 0x0A	; 10
    3170:	78 f4       	brcc	.+30     	; 0x3190 <vfprintf+0xb2>
    3172:	26 ff       	sbrs	r18, 6
    3174:	06 c0       	rjmp	.+12     	; 0x3182 <vfprintf+0xa4>
    3176:	fa e0       	ldi	r31, 0x0A	; 10
    3178:	5f 9e       	mul	r5, r31
    317a:	30 0d       	add	r19, r0
    317c:	11 24       	eor	r1, r1
    317e:	53 2e       	mov	r5, r19
    3180:	13 c0       	rjmp	.+38     	; 0x31a8 <vfprintf+0xca>
    3182:	8a e0       	ldi	r24, 0x0A	; 10
    3184:	38 9e       	mul	r3, r24
    3186:	30 0d       	add	r19, r0
    3188:	11 24       	eor	r1, r1
    318a:	33 2e       	mov	r3, r19
    318c:	20 62       	ori	r18, 0x20	; 32
    318e:	0c c0       	rjmp	.+24     	; 0x31a8 <vfprintf+0xca>
    3190:	8e 32       	cpi	r24, 0x2E	; 46
    3192:	21 f4       	brne	.+8      	; 0x319c <vfprintf+0xbe>
    3194:	26 fd       	sbrc	r18, 6
    3196:	6b c1       	rjmp	.+726    	; 0x346e <vfprintf+0x390>
    3198:	20 64       	ori	r18, 0x40	; 64
    319a:	06 c0       	rjmp	.+12     	; 0x31a8 <vfprintf+0xca>
    319c:	8c 36       	cpi	r24, 0x6C	; 108
    319e:	11 f4       	brne	.+4      	; 0x31a4 <vfprintf+0xc6>
    31a0:	20 68       	ori	r18, 0x80	; 128
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <vfprintf+0xca>
    31a4:	88 36       	cpi	r24, 0x68	; 104
    31a6:	41 f4       	brne	.+16     	; 0x31b8 <vfprintf+0xda>
    31a8:	f6 01       	movw	r30, r12
    31aa:	93 fd       	sbrc	r25, 3
    31ac:	85 91       	lpm	r24, Z+
    31ae:	93 ff       	sbrs	r25, 3
    31b0:	81 91       	ld	r24, Z+
    31b2:	6f 01       	movw	r12, r30
    31b4:	81 11       	cpse	r24, r1
    31b6:	c1 cf       	rjmp	.-126    	; 0x313a <vfprintf+0x5c>
    31b8:	98 2f       	mov	r25, r24
    31ba:	9f 7d       	andi	r25, 0xDF	; 223
    31bc:	95 54       	subi	r25, 0x45	; 69
    31be:	93 30       	cpi	r25, 0x03	; 3
    31c0:	28 f4       	brcc	.+10     	; 0x31cc <vfprintf+0xee>
    31c2:	0c 5f       	subi	r16, 0xFC	; 252
    31c4:	1f 4f       	sbci	r17, 0xFF	; 255
    31c6:	ff e3       	ldi	r31, 0x3F	; 63
    31c8:	f9 83       	std	Y+1, r31	; 0x01
    31ca:	0d c0       	rjmp	.+26     	; 0x31e6 <vfprintf+0x108>
    31cc:	83 36       	cpi	r24, 0x63	; 99
    31ce:	31 f0       	breq	.+12     	; 0x31dc <vfprintf+0xfe>
    31d0:	83 37       	cpi	r24, 0x73	; 115
    31d2:	71 f0       	breq	.+28     	; 0x31f0 <vfprintf+0x112>
    31d4:	83 35       	cpi	r24, 0x53	; 83
    31d6:	09 f0       	breq	.+2      	; 0x31da <vfprintf+0xfc>
    31d8:	5b c0       	rjmp	.+182    	; 0x3290 <vfprintf+0x1b2>
    31da:	22 c0       	rjmp	.+68     	; 0x3220 <vfprintf+0x142>
    31dc:	f8 01       	movw	r30, r16
    31de:	80 81       	ld	r24, Z
    31e0:	89 83       	std	Y+1, r24	; 0x01
    31e2:	0e 5f       	subi	r16, 0xFE	; 254
    31e4:	1f 4f       	sbci	r17, 0xFF	; 255
    31e6:	44 24       	eor	r4, r4
    31e8:	43 94       	inc	r4
    31ea:	51 2c       	mov	r5, r1
    31ec:	54 01       	movw	r10, r8
    31ee:	15 c0       	rjmp	.+42     	; 0x321a <vfprintf+0x13c>
    31f0:	38 01       	movw	r6, r16
    31f2:	f2 e0       	ldi	r31, 0x02	; 2
    31f4:	6f 0e       	add	r6, r31
    31f6:	71 1c       	adc	r7, r1
    31f8:	f8 01       	movw	r30, r16
    31fa:	a0 80       	ld	r10, Z
    31fc:	b1 80       	ldd	r11, Z+1	; 0x01
    31fe:	26 ff       	sbrs	r18, 6
    3200:	03 c0       	rjmp	.+6      	; 0x3208 <vfprintf+0x12a>
    3202:	65 2d       	mov	r22, r5
    3204:	70 e0       	ldi	r23, 0x00	; 0
    3206:	02 c0       	rjmp	.+4      	; 0x320c <vfprintf+0x12e>
    3208:	6f ef       	ldi	r22, 0xFF	; 255
    320a:	7f ef       	ldi	r23, 0xFF	; 255
    320c:	c5 01       	movw	r24, r10
    320e:	2c 87       	std	Y+12, r18	; 0x0c
    3210:	0e 94 b5 1c 	call	0x396a	; 0x396a <strnlen>
    3214:	2c 01       	movw	r4, r24
    3216:	83 01       	movw	r16, r6
    3218:	2c 85       	ldd	r18, Y+12	; 0x0c
    321a:	2f 77       	andi	r18, 0x7F	; 127
    321c:	22 2e       	mov	r2, r18
    321e:	17 c0       	rjmp	.+46     	; 0x324e <vfprintf+0x170>
    3220:	38 01       	movw	r6, r16
    3222:	f2 e0       	ldi	r31, 0x02	; 2
    3224:	6f 0e       	add	r6, r31
    3226:	71 1c       	adc	r7, r1
    3228:	f8 01       	movw	r30, r16
    322a:	a0 80       	ld	r10, Z
    322c:	b1 80       	ldd	r11, Z+1	; 0x01
    322e:	26 ff       	sbrs	r18, 6
    3230:	03 c0       	rjmp	.+6      	; 0x3238 <vfprintf+0x15a>
    3232:	65 2d       	mov	r22, r5
    3234:	70 e0       	ldi	r23, 0x00	; 0
    3236:	02 c0       	rjmp	.+4      	; 0x323c <vfprintf+0x15e>
    3238:	6f ef       	ldi	r22, 0xFF	; 255
    323a:	7f ef       	ldi	r23, 0xFF	; 255
    323c:	c5 01       	movw	r24, r10
    323e:	2c 87       	std	Y+12, r18	; 0x0c
    3240:	0e 94 aa 1c 	call	0x3954	; 0x3954 <strnlen_P>
    3244:	2c 01       	movw	r4, r24
    3246:	2c 85       	ldd	r18, Y+12	; 0x0c
    3248:	20 68       	ori	r18, 0x80	; 128
    324a:	22 2e       	mov	r2, r18
    324c:	83 01       	movw	r16, r6
    324e:	23 fc       	sbrc	r2, 3
    3250:	1b c0       	rjmp	.+54     	; 0x3288 <vfprintf+0x1aa>
    3252:	83 2d       	mov	r24, r3
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	48 16       	cp	r4, r24
    3258:	59 06       	cpc	r5, r25
    325a:	b0 f4       	brcc	.+44     	; 0x3288 <vfprintf+0x1aa>
    325c:	b7 01       	movw	r22, r14
    325e:	80 e2       	ldi	r24, 0x20	; 32
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 c0 1c 	call	0x3980	; 0x3980 <fputc>
    3266:	3a 94       	dec	r3
    3268:	f4 cf       	rjmp	.-24     	; 0x3252 <vfprintf+0x174>
    326a:	f5 01       	movw	r30, r10
    326c:	27 fc       	sbrc	r2, 7
    326e:	85 91       	lpm	r24, Z+
    3270:	27 fe       	sbrs	r2, 7
    3272:	81 91       	ld	r24, Z+
    3274:	5f 01       	movw	r10, r30
    3276:	b7 01       	movw	r22, r14
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	0e 94 c0 1c 	call	0x3980	; 0x3980 <fputc>
    327e:	31 10       	cpse	r3, r1
    3280:	3a 94       	dec	r3
    3282:	f1 e0       	ldi	r31, 0x01	; 1
    3284:	4f 1a       	sub	r4, r31
    3286:	51 08       	sbc	r5, r1
    3288:	41 14       	cp	r4, r1
    328a:	51 04       	cpc	r5, r1
    328c:	71 f7       	brne	.-36     	; 0x326a <vfprintf+0x18c>
    328e:	e5 c0       	rjmp	.+458    	; 0x345a <vfprintf+0x37c>
    3290:	84 36       	cpi	r24, 0x64	; 100
    3292:	11 f0       	breq	.+4      	; 0x3298 <vfprintf+0x1ba>
    3294:	89 36       	cpi	r24, 0x69	; 105
    3296:	39 f5       	brne	.+78     	; 0x32e6 <vfprintf+0x208>
    3298:	f8 01       	movw	r30, r16
    329a:	27 ff       	sbrs	r18, 7
    329c:	07 c0       	rjmp	.+14     	; 0x32ac <vfprintf+0x1ce>
    329e:	60 81       	ld	r22, Z
    32a0:	71 81       	ldd	r23, Z+1	; 0x01
    32a2:	82 81       	ldd	r24, Z+2	; 0x02
    32a4:	93 81       	ldd	r25, Z+3	; 0x03
    32a6:	0c 5f       	subi	r16, 0xFC	; 252
    32a8:	1f 4f       	sbci	r17, 0xFF	; 255
    32aa:	08 c0       	rjmp	.+16     	; 0x32bc <vfprintf+0x1de>
    32ac:	60 81       	ld	r22, Z
    32ae:	71 81       	ldd	r23, Z+1	; 0x01
    32b0:	07 2e       	mov	r0, r23
    32b2:	00 0c       	add	r0, r0
    32b4:	88 0b       	sbc	r24, r24
    32b6:	99 0b       	sbc	r25, r25
    32b8:	0e 5f       	subi	r16, 0xFE	; 254
    32ba:	1f 4f       	sbci	r17, 0xFF	; 255
    32bc:	2f 76       	andi	r18, 0x6F	; 111
    32be:	72 2e       	mov	r7, r18
    32c0:	97 ff       	sbrs	r25, 7
    32c2:	09 c0       	rjmp	.+18     	; 0x32d6 <vfprintf+0x1f8>
    32c4:	90 95       	com	r25
    32c6:	80 95       	com	r24
    32c8:	70 95       	com	r23
    32ca:	61 95       	neg	r22
    32cc:	7f 4f       	sbci	r23, 0xFF	; 255
    32ce:	8f 4f       	sbci	r24, 0xFF	; 255
    32d0:	9f 4f       	sbci	r25, 0xFF	; 255
    32d2:	20 68       	ori	r18, 0x80	; 128
    32d4:	72 2e       	mov	r7, r18
    32d6:	2a e0       	ldi	r18, 0x0A	; 10
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	a4 01       	movw	r20, r8
    32dc:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__ultoa_invert>
    32e0:	a8 2e       	mov	r10, r24
    32e2:	a8 18       	sub	r10, r8
    32e4:	44 c0       	rjmp	.+136    	; 0x336e <vfprintf+0x290>
    32e6:	85 37       	cpi	r24, 0x75	; 117
    32e8:	29 f4       	brne	.+10     	; 0x32f4 <vfprintf+0x216>
    32ea:	2f 7e       	andi	r18, 0xEF	; 239
    32ec:	b2 2e       	mov	r11, r18
    32ee:	2a e0       	ldi	r18, 0x0A	; 10
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	25 c0       	rjmp	.+74     	; 0x333e <vfprintf+0x260>
    32f4:	f2 2f       	mov	r31, r18
    32f6:	f9 7f       	andi	r31, 0xF9	; 249
    32f8:	bf 2e       	mov	r11, r31
    32fa:	8f 36       	cpi	r24, 0x6F	; 111
    32fc:	c1 f0       	breq	.+48     	; 0x332e <vfprintf+0x250>
    32fe:	18 f4       	brcc	.+6      	; 0x3306 <vfprintf+0x228>
    3300:	88 35       	cpi	r24, 0x58	; 88
    3302:	79 f0       	breq	.+30     	; 0x3322 <vfprintf+0x244>
    3304:	b4 c0       	rjmp	.+360    	; 0x346e <vfprintf+0x390>
    3306:	80 37       	cpi	r24, 0x70	; 112
    3308:	19 f0       	breq	.+6      	; 0x3310 <vfprintf+0x232>
    330a:	88 37       	cpi	r24, 0x78	; 120
    330c:	21 f0       	breq	.+8      	; 0x3316 <vfprintf+0x238>
    330e:	af c0       	rjmp	.+350    	; 0x346e <vfprintf+0x390>
    3310:	2f 2f       	mov	r18, r31
    3312:	20 61       	ori	r18, 0x10	; 16
    3314:	b2 2e       	mov	r11, r18
    3316:	b4 fe       	sbrs	r11, 4
    3318:	0d c0       	rjmp	.+26     	; 0x3334 <vfprintf+0x256>
    331a:	8b 2d       	mov	r24, r11
    331c:	84 60       	ori	r24, 0x04	; 4
    331e:	b8 2e       	mov	r11, r24
    3320:	09 c0       	rjmp	.+18     	; 0x3334 <vfprintf+0x256>
    3322:	24 ff       	sbrs	r18, 4
    3324:	0a c0       	rjmp	.+20     	; 0x333a <vfprintf+0x25c>
    3326:	9f 2f       	mov	r25, r31
    3328:	96 60       	ori	r25, 0x06	; 6
    332a:	b9 2e       	mov	r11, r25
    332c:	06 c0       	rjmp	.+12     	; 0x333a <vfprintf+0x25c>
    332e:	28 e0       	ldi	r18, 0x08	; 8
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	05 c0       	rjmp	.+10     	; 0x333e <vfprintf+0x260>
    3334:	20 e1       	ldi	r18, 0x10	; 16
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	02 c0       	rjmp	.+4      	; 0x333e <vfprintf+0x260>
    333a:	20 e1       	ldi	r18, 0x10	; 16
    333c:	32 e0       	ldi	r19, 0x02	; 2
    333e:	f8 01       	movw	r30, r16
    3340:	b7 fe       	sbrs	r11, 7
    3342:	07 c0       	rjmp	.+14     	; 0x3352 <vfprintf+0x274>
    3344:	60 81       	ld	r22, Z
    3346:	71 81       	ldd	r23, Z+1	; 0x01
    3348:	82 81       	ldd	r24, Z+2	; 0x02
    334a:	93 81       	ldd	r25, Z+3	; 0x03
    334c:	0c 5f       	subi	r16, 0xFC	; 252
    334e:	1f 4f       	sbci	r17, 0xFF	; 255
    3350:	06 c0       	rjmp	.+12     	; 0x335e <vfprintf+0x280>
    3352:	60 81       	ld	r22, Z
    3354:	71 81       	ldd	r23, Z+1	; 0x01
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	0e 5f       	subi	r16, 0xFE	; 254
    335c:	1f 4f       	sbci	r17, 0xFF	; 255
    335e:	a4 01       	movw	r20, r8
    3360:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__ultoa_invert>
    3364:	a8 2e       	mov	r10, r24
    3366:	a8 18       	sub	r10, r8
    3368:	fb 2d       	mov	r31, r11
    336a:	ff 77       	andi	r31, 0x7F	; 127
    336c:	7f 2e       	mov	r7, r31
    336e:	76 fe       	sbrs	r7, 6
    3370:	0b c0       	rjmp	.+22     	; 0x3388 <vfprintf+0x2aa>
    3372:	37 2d       	mov	r19, r7
    3374:	3e 7f       	andi	r19, 0xFE	; 254
    3376:	a5 14       	cp	r10, r5
    3378:	50 f4       	brcc	.+20     	; 0x338e <vfprintf+0x2b0>
    337a:	74 fe       	sbrs	r7, 4
    337c:	0a c0       	rjmp	.+20     	; 0x3392 <vfprintf+0x2b4>
    337e:	72 fc       	sbrc	r7, 2
    3380:	08 c0       	rjmp	.+16     	; 0x3392 <vfprintf+0x2b4>
    3382:	37 2d       	mov	r19, r7
    3384:	3e 7e       	andi	r19, 0xEE	; 238
    3386:	05 c0       	rjmp	.+10     	; 0x3392 <vfprintf+0x2b4>
    3388:	ba 2c       	mov	r11, r10
    338a:	37 2d       	mov	r19, r7
    338c:	03 c0       	rjmp	.+6      	; 0x3394 <vfprintf+0x2b6>
    338e:	ba 2c       	mov	r11, r10
    3390:	01 c0       	rjmp	.+2      	; 0x3394 <vfprintf+0x2b6>
    3392:	b5 2c       	mov	r11, r5
    3394:	34 ff       	sbrs	r19, 4
    3396:	0d c0       	rjmp	.+26     	; 0x33b2 <vfprintf+0x2d4>
    3398:	fe 01       	movw	r30, r28
    339a:	ea 0d       	add	r30, r10
    339c:	f1 1d       	adc	r31, r1
    339e:	80 81       	ld	r24, Z
    33a0:	80 33       	cpi	r24, 0x30	; 48
    33a2:	11 f4       	brne	.+4      	; 0x33a8 <vfprintf+0x2ca>
    33a4:	39 7e       	andi	r19, 0xE9	; 233
    33a6:	09 c0       	rjmp	.+18     	; 0x33ba <vfprintf+0x2dc>
    33a8:	32 ff       	sbrs	r19, 2
    33aa:	06 c0       	rjmp	.+12     	; 0x33b8 <vfprintf+0x2da>
    33ac:	b3 94       	inc	r11
    33ae:	b3 94       	inc	r11
    33b0:	04 c0       	rjmp	.+8      	; 0x33ba <vfprintf+0x2dc>
    33b2:	83 2f       	mov	r24, r19
    33b4:	86 78       	andi	r24, 0x86	; 134
    33b6:	09 f0       	breq	.+2      	; 0x33ba <vfprintf+0x2dc>
    33b8:	b3 94       	inc	r11
    33ba:	33 fd       	sbrc	r19, 3
    33bc:	13 c0       	rjmp	.+38     	; 0x33e4 <vfprintf+0x306>
    33be:	30 ff       	sbrs	r19, 0
    33c0:	06 c0       	rjmp	.+12     	; 0x33ce <vfprintf+0x2f0>
    33c2:	5a 2c       	mov	r5, r10
    33c4:	b3 14       	cp	r11, r3
    33c6:	18 f4       	brcc	.+6      	; 0x33ce <vfprintf+0x2f0>
    33c8:	53 0c       	add	r5, r3
    33ca:	5b 18       	sub	r5, r11
    33cc:	b3 2c       	mov	r11, r3
    33ce:	b3 14       	cp	r11, r3
    33d0:	68 f4       	brcc	.+26     	; 0x33ec <vfprintf+0x30e>
    33d2:	b7 01       	movw	r22, r14
    33d4:	80 e2       	ldi	r24, 0x20	; 32
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	3c 87       	std	Y+12, r19	; 0x0c
    33da:	0e 94 c0 1c 	call	0x3980	; 0x3980 <fputc>
    33de:	b3 94       	inc	r11
    33e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    33e2:	f5 cf       	rjmp	.-22     	; 0x33ce <vfprintf+0x2f0>
    33e4:	b3 14       	cp	r11, r3
    33e6:	10 f4       	brcc	.+4      	; 0x33ec <vfprintf+0x30e>
    33e8:	3b 18       	sub	r3, r11
    33ea:	01 c0       	rjmp	.+2      	; 0x33ee <vfprintf+0x310>
    33ec:	31 2c       	mov	r3, r1
    33ee:	34 ff       	sbrs	r19, 4
    33f0:	12 c0       	rjmp	.+36     	; 0x3416 <vfprintf+0x338>
    33f2:	b7 01       	movw	r22, r14
    33f4:	80 e3       	ldi	r24, 0x30	; 48
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	3c 87       	std	Y+12, r19	; 0x0c
    33fa:	0e 94 c0 1c 	call	0x3980	; 0x3980 <fputc>
    33fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    3400:	32 ff       	sbrs	r19, 2
    3402:	17 c0       	rjmp	.+46     	; 0x3432 <vfprintf+0x354>
    3404:	31 fd       	sbrc	r19, 1
    3406:	03 c0       	rjmp	.+6      	; 0x340e <vfprintf+0x330>
    3408:	88 e7       	ldi	r24, 0x78	; 120
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	02 c0       	rjmp	.+4      	; 0x3412 <vfprintf+0x334>
    340e:	88 e5       	ldi	r24, 0x58	; 88
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	b7 01       	movw	r22, r14
    3414:	0c c0       	rjmp	.+24     	; 0x342e <vfprintf+0x350>
    3416:	83 2f       	mov	r24, r19
    3418:	86 78       	andi	r24, 0x86	; 134
    341a:	59 f0       	breq	.+22     	; 0x3432 <vfprintf+0x354>
    341c:	31 ff       	sbrs	r19, 1
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <vfprintf+0x346>
    3420:	8b e2       	ldi	r24, 0x2B	; 43
    3422:	01 c0       	rjmp	.+2      	; 0x3426 <vfprintf+0x348>
    3424:	80 e2       	ldi	r24, 0x20	; 32
    3426:	37 fd       	sbrc	r19, 7
    3428:	8d e2       	ldi	r24, 0x2D	; 45
    342a:	b7 01       	movw	r22, r14
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	0e 94 c0 1c 	call	0x3980	; 0x3980 <fputc>
    3432:	a5 14       	cp	r10, r5
    3434:	38 f4       	brcc	.+14     	; 0x3444 <vfprintf+0x366>
    3436:	b7 01       	movw	r22, r14
    3438:	80 e3       	ldi	r24, 0x30	; 48
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <fputc>
    3440:	5a 94       	dec	r5
    3442:	f7 cf       	rjmp	.-18     	; 0x3432 <vfprintf+0x354>
    3444:	aa 94       	dec	r10
    3446:	f4 01       	movw	r30, r8
    3448:	ea 0d       	add	r30, r10
    344a:	f1 1d       	adc	r31, r1
    344c:	80 81       	ld	r24, Z
    344e:	b7 01       	movw	r22, r14
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	0e 94 c0 1c 	call	0x3980	; 0x3980 <fputc>
    3456:	a1 10       	cpse	r10, r1
    3458:	f5 cf       	rjmp	.-22     	; 0x3444 <vfprintf+0x366>
    345a:	33 20       	and	r3, r3
    345c:	09 f4       	brne	.+2      	; 0x3460 <vfprintf+0x382>
    345e:	51 ce       	rjmp	.-862    	; 0x3102 <vfprintf+0x24>
    3460:	b7 01       	movw	r22, r14
    3462:	80 e2       	ldi	r24, 0x20	; 32
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 c0 1c 	call	0x3980	; 0x3980 <fputc>
    346a:	3a 94       	dec	r3
    346c:	f6 cf       	rjmp	.-20     	; 0x345a <vfprintf+0x37c>
    346e:	f7 01       	movw	r30, r14
    3470:	86 81       	ldd	r24, Z+6	; 0x06
    3472:	97 81       	ldd	r25, Z+7	; 0x07
    3474:	02 c0       	rjmp	.+4      	; 0x347a <vfprintf+0x39c>
    3476:	8f ef       	ldi	r24, 0xFF	; 255
    3478:	9f ef       	ldi	r25, 0xFF	; 255
    347a:	2c 96       	adiw	r28, 0x0c	; 12
    347c:	e2 e1       	ldi	r30, 0x12	; 18
    347e:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__epilogue_restores__>

00003482 <dtoa_prf>:
    3482:	4f 92       	push	r4
    3484:	5f 92       	push	r5
    3486:	6f 92       	push	r6
    3488:	7f 92       	push	r7
    348a:	9f 92       	push	r9
    348c:	af 92       	push	r10
    348e:	bf 92       	push	r11
    3490:	cf 92       	push	r12
    3492:	df 92       	push	r13
    3494:	ef 92       	push	r14
    3496:	ff 92       	push	r15
    3498:	0f 93       	push	r16
    349a:	1f 93       	push	r17
    349c:	cf 93       	push	r28
    349e:	df 93       	push	r29
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	29 97       	sbiw	r28, 0x09	; 9
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	f8 94       	cli
    34aa:	de bf       	out	0x3e, r29	; 62
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	6a 01       	movw	r12, r20
    34b2:	12 2f       	mov	r17, r18
    34b4:	b0 2e       	mov	r11, r16
    34b6:	2b e3       	ldi	r18, 0x3B	; 59
    34b8:	20 17       	cp	r18, r16
    34ba:	20 f0       	brcs	.+8      	; 0x34c4 <dtoa_prf+0x42>
    34bc:	ff 24       	eor	r15, r15
    34be:	f3 94       	inc	r15
    34c0:	f0 0e       	add	r15, r16
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <dtoa_prf+0x46>
    34c4:	bc e3       	ldi	r27, 0x3C	; 60
    34c6:	fb 2e       	mov	r15, r27
    34c8:	0f 2d       	mov	r16, r15
    34ca:	27 e0       	ldi	r18, 0x07	; 7
    34cc:	ae 01       	movw	r20, r28
    34ce:	4f 5f       	subi	r20, 0xFF	; 255
    34d0:	5f 4f       	sbci	r21, 0xFF	; 255
    34d2:	0e 94 cf 1b 	call	0x379e	; 0x379e <__ftoa_engine>
    34d6:	ac 01       	movw	r20, r24
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	98 2f       	mov	r25, r24
    34dc:	99 70       	andi	r25, 0x09	; 9
    34de:	91 30       	cpi	r25, 0x01	; 1
    34e0:	31 f0       	breq	.+12     	; 0x34ee <dtoa_prf+0x6c>
    34e2:	e1 fc       	sbrc	r14, 1
    34e4:	06 c0       	rjmp	.+12     	; 0x34f2 <dtoa_prf+0x70>
    34e6:	e0 fe       	sbrs	r14, 0
    34e8:	06 c0       	rjmp	.+12     	; 0x34f6 <dtoa_prf+0x74>
    34ea:	90 e2       	ldi	r25, 0x20	; 32
    34ec:	05 c0       	rjmp	.+10     	; 0x34f8 <dtoa_prf+0x76>
    34ee:	9d e2       	ldi	r25, 0x2D	; 45
    34f0:	03 c0       	rjmp	.+6      	; 0x34f8 <dtoa_prf+0x76>
    34f2:	9b e2       	ldi	r25, 0x2B	; 43
    34f4:	01 c0       	rjmp	.+2      	; 0x34f8 <dtoa_prf+0x76>
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	ee 2d       	mov	r30, r14
    34fa:	e0 71       	andi	r30, 0x10	; 16
    34fc:	83 ff       	sbrs	r24, 3
    34fe:	3c c0       	rjmp	.+120    	; 0x3578 <dtoa_prf+0xf6>
    3500:	91 11       	cpse	r25, r1
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <dtoa_prf+0x86>
    3504:	83 e0       	ldi	r24, 0x03	; 3
    3506:	01 c0       	rjmp	.+2      	; 0x350a <dtoa_prf+0x88>
    3508:	84 e0       	ldi	r24, 0x04	; 4
    350a:	81 17       	cp	r24, r17
    350c:	18 f4       	brcc	.+6      	; 0x3514 <dtoa_prf+0x92>
    350e:	21 2f       	mov	r18, r17
    3510:	28 1b       	sub	r18, r24
    3512:	01 c0       	rjmp	.+2      	; 0x3516 <dtoa_prf+0x94>
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	e1 11       	cpse	r30, r1
    3518:	0b c0       	rjmp	.+22     	; 0x3530 <dtoa_prf+0xae>
    351a:	f6 01       	movw	r30, r12
    351c:	82 2f       	mov	r24, r18
    351e:	30 e2       	ldi	r19, 0x20	; 32
    3520:	88 23       	and	r24, r24
    3522:	19 f0       	breq	.+6      	; 0x352a <dtoa_prf+0xa8>
    3524:	31 93       	st	Z+, r19
    3526:	81 50       	subi	r24, 0x01	; 1
    3528:	fb cf       	rjmp	.-10     	; 0x3520 <dtoa_prf+0x9e>
    352a:	c2 0e       	add	r12, r18
    352c:	d1 1c       	adc	r13, r1
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	99 23       	and	r25, r25
    3532:	29 f0       	breq	.+10     	; 0x353e <dtoa_prf+0xbc>
    3534:	d6 01       	movw	r26, r12
    3536:	9c 93       	st	X, r25
    3538:	f6 01       	movw	r30, r12
    353a:	31 96       	adiw	r30, 0x01	; 1
    353c:	6f 01       	movw	r12, r30
    353e:	c6 01       	movw	r24, r12
    3540:	03 96       	adiw	r24, 0x03	; 3
    3542:	e2 fe       	sbrs	r14, 2
    3544:	0a c0       	rjmp	.+20     	; 0x355a <dtoa_prf+0xd8>
    3546:	3e e4       	ldi	r19, 0x4E	; 78
    3548:	d6 01       	movw	r26, r12
    354a:	3c 93       	st	X, r19
    354c:	41 e4       	ldi	r20, 0x41	; 65
    354e:	11 96       	adiw	r26, 0x01	; 1
    3550:	4c 93       	st	X, r20
    3552:	11 97       	sbiw	r26, 0x01	; 1
    3554:	12 96       	adiw	r26, 0x02	; 2
    3556:	3c 93       	st	X, r19
    3558:	06 c0       	rjmp	.+12     	; 0x3566 <dtoa_prf+0xe4>
    355a:	3e e6       	ldi	r19, 0x6E	; 110
    355c:	f6 01       	movw	r30, r12
    355e:	30 83       	st	Z, r19
    3560:	41 e6       	ldi	r20, 0x61	; 97
    3562:	41 83       	std	Z+1, r20	; 0x01
    3564:	32 83       	std	Z+2, r19	; 0x02
    3566:	fc 01       	movw	r30, r24
    3568:	32 2f       	mov	r19, r18
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	33 23       	and	r19, r19
    356e:	09 f4       	brne	.+2      	; 0x3572 <dtoa_prf+0xf0>
    3570:	42 c0       	rjmp	.+132    	; 0x35f6 <dtoa_prf+0x174>
    3572:	41 93       	st	Z+, r20
    3574:	31 50       	subi	r19, 0x01	; 1
    3576:	fa cf       	rjmp	.-12     	; 0x356c <dtoa_prf+0xea>
    3578:	82 ff       	sbrs	r24, 2
    357a:	44 c0       	rjmp	.+136    	; 0x3604 <dtoa_prf+0x182>
    357c:	91 11       	cpse	r25, r1
    357e:	02 c0       	rjmp	.+4      	; 0x3584 <dtoa_prf+0x102>
    3580:	83 e0       	ldi	r24, 0x03	; 3
    3582:	01 c0       	rjmp	.+2      	; 0x3586 <dtoa_prf+0x104>
    3584:	84 e0       	ldi	r24, 0x04	; 4
    3586:	81 17       	cp	r24, r17
    3588:	18 f4       	brcc	.+6      	; 0x3590 <dtoa_prf+0x10e>
    358a:	21 2f       	mov	r18, r17
    358c:	28 1b       	sub	r18, r24
    358e:	01 c0       	rjmp	.+2      	; 0x3592 <dtoa_prf+0x110>
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	e1 11       	cpse	r30, r1
    3594:	0b c0       	rjmp	.+22     	; 0x35ac <dtoa_prf+0x12a>
    3596:	f6 01       	movw	r30, r12
    3598:	82 2f       	mov	r24, r18
    359a:	30 e2       	ldi	r19, 0x20	; 32
    359c:	88 23       	and	r24, r24
    359e:	19 f0       	breq	.+6      	; 0x35a6 <dtoa_prf+0x124>
    35a0:	31 93       	st	Z+, r19
    35a2:	81 50       	subi	r24, 0x01	; 1
    35a4:	fb cf       	rjmp	.-10     	; 0x359c <dtoa_prf+0x11a>
    35a6:	c2 0e       	add	r12, r18
    35a8:	d1 1c       	adc	r13, r1
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	99 23       	and	r25, r25
    35ae:	29 f0       	breq	.+10     	; 0x35ba <dtoa_prf+0x138>
    35b0:	d6 01       	movw	r26, r12
    35b2:	9c 93       	st	X, r25
    35b4:	f6 01       	movw	r30, r12
    35b6:	31 96       	adiw	r30, 0x01	; 1
    35b8:	6f 01       	movw	r12, r30
    35ba:	c6 01       	movw	r24, r12
    35bc:	03 96       	adiw	r24, 0x03	; 3
    35be:	e2 fe       	sbrs	r14, 2
    35c0:	0b c0       	rjmp	.+22     	; 0x35d8 <dtoa_prf+0x156>
    35c2:	39 e4       	ldi	r19, 0x49	; 73
    35c4:	d6 01       	movw	r26, r12
    35c6:	3c 93       	st	X, r19
    35c8:	3e e4       	ldi	r19, 0x4E	; 78
    35ca:	11 96       	adiw	r26, 0x01	; 1
    35cc:	3c 93       	st	X, r19
    35ce:	11 97       	sbiw	r26, 0x01	; 1
    35d0:	36 e4       	ldi	r19, 0x46	; 70
    35d2:	12 96       	adiw	r26, 0x02	; 2
    35d4:	3c 93       	st	X, r19
    35d6:	07 c0       	rjmp	.+14     	; 0x35e6 <dtoa_prf+0x164>
    35d8:	39 e6       	ldi	r19, 0x69	; 105
    35da:	f6 01       	movw	r30, r12
    35dc:	30 83       	st	Z, r19
    35de:	3e e6       	ldi	r19, 0x6E	; 110
    35e0:	31 83       	std	Z+1, r19	; 0x01
    35e2:	36 e6       	ldi	r19, 0x66	; 102
    35e4:	32 83       	std	Z+2, r19	; 0x02
    35e6:	fc 01       	movw	r30, r24
    35e8:	32 2f       	mov	r19, r18
    35ea:	40 e2       	ldi	r20, 0x20	; 32
    35ec:	33 23       	and	r19, r19
    35ee:	19 f0       	breq	.+6      	; 0x35f6 <dtoa_prf+0x174>
    35f0:	41 93       	st	Z+, r20
    35f2:	31 50       	subi	r19, 0x01	; 1
    35f4:	fb cf       	rjmp	.-10     	; 0x35ec <dtoa_prf+0x16a>
    35f6:	fc 01       	movw	r30, r24
    35f8:	e2 0f       	add	r30, r18
    35fa:	f1 1d       	adc	r31, r1
    35fc:	10 82       	st	Z, r1
    35fe:	8e ef       	ldi	r24, 0xFE	; 254
    3600:	9f ef       	ldi	r25, 0xFF	; 255
    3602:	b7 c0       	rjmp	.+366    	; 0x3772 <dtoa_prf+0x2f0>
    3604:	f1 e0       	ldi	r31, 0x01	; 1
    3606:	91 11       	cpse	r25, r1
    3608:	01 c0       	rjmp	.+2      	; 0x360c <dtoa_prf+0x18a>
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	6f 2f       	mov	r22, r31
    360e:	70 e0       	ldi	r23, 0x00	; 0
    3610:	14 16       	cp	r1, r20
    3612:	15 06       	cpc	r1, r21
    3614:	24 f4       	brge	.+8      	; 0x361e <dtoa_prf+0x19c>
    3616:	9a 01       	movw	r18, r20
    3618:	2f 5f       	subi	r18, 0xFF	; 255
    361a:	3f 4f       	sbci	r19, 0xFF	; 255
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <dtoa_prf+0x1a0>
    361e:	21 e0       	ldi	r18, 0x01	; 1
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	26 0f       	add	r18, r22
    3624:	37 1f       	adc	r19, r23
    3626:	bb 20       	and	r11, r11
    3628:	29 f0       	breq	.+10     	; 0x3634 <dtoa_prf+0x1b2>
    362a:	6b 2d       	mov	r22, r11
    362c:	70 e0       	ldi	r23, 0x00	; 0
    362e:	6f 5f       	subi	r22, 0xFF	; 255
    3630:	7f 4f       	sbci	r23, 0xFF	; 255
    3632:	02 c0       	rjmp	.+4      	; 0x3638 <dtoa_prf+0x1b6>
    3634:	60 e0       	ldi	r22, 0x00	; 0
    3636:	70 e0       	ldi	r23, 0x00	; 0
    3638:	26 0f       	add	r18, r22
    363a:	37 1f       	adc	r19, r23
    363c:	61 2f       	mov	r22, r17
    363e:	70 e0       	ldi	r23, 0x00	; 0
    3640:	26 17       	cp	r18, r22
    3642:	37 07       	cpc	r19, r23
    3644:	1c f4       	brge	.+6      	; 0x364c <dtoa_prf+0x1ca>
    3646:	12 1b       	sub	r17, r18
    3648:	21 2f       	mov	r18, r17
    364a:	01 c0       	rjmp	.+2      	; 0x364e <dtoa_prf+0x1cc>
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	3e 2d       	mov	r19, r14
    3650:	38 71       	andi	r19, 0x18	; 24
    3652:	59 f4       	brne	.+22     	; 0x366a <dtoa_prf+0x1e8>
    3654:	d6 01       	movw	r26, r12
    3656:	32 2f       	mov	r19, r18
    3658:	60 e2       	ldi	r22, 0x20	; 32
    365a:	33 23       	and	r19, r19
    365c:	19 f0       	breq	.+6      	; 0x3664 <dtoa_prf+0x1e2>
    365e:	6d 93       	st	X+, r22
    3660:	31 50       	subi	r19, 0x01	; 1
    3662:	fb cf       	rjmp	.-10     	; 0x365a <dtoa_prf+0x1d8>
    3664:	c2 0e       	add	r12, r18
    3666:	d1 1c       	adc	r13, r1
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	ff 23       	and	r31, r31
    366c:	31 f0       	breq	.+12     	; 0x367a <dtoa_prf+0x1f8>
    366e:	d6 01       	movw	r26, r12
    3670:	9c 93       	st	X, r25
    3672:	b6 01       	movw	r22, r12
    3674:	6f 5f       	subi	r22, 0xFF	; 255
    3676:	7f 4f       	sbci	r23, 0xFF	; 255
    3678:	6b 01       	movw	r12, r22
    367a:	e1 11       	cpse	r30, r1
    367c:	0b c0       	rjmp	.+22     	; 0x3694 <dtoa_prf+0x212>
    367e:	f6 01       	movw	r30, r12
    3680:	92 2f       	mov	r25, r18
    3682:	30 e3       	ldi	r19, 0x30	; 48
    3684:	99 23       	and	r25, r25
    3686:	19 f0       	breq	.+6      	; 0x368e <dtoa_prf+0x20c>
    3688:	31 93       	st	Z+, r19
    368a:	91 50       	subi	r25, 0x01	; 1
    368c:	fb cf       	rjmp	.-10     	; 0x3684 <dtoa_prf+0x202>
    368e:	c2 0e       	add	r12, r18
    3690:	d1 1c       	adc	r13, r1
    3692:	20 e0       	ldi	r18, 0x00	; 0
    3694:	9f 2d       	mov	r25, r15
    3696:	94 0f       	add	r25, r20
    3698:	3a 81       	ldd	r19, Y+2	; 0x02
    369a:	78 2f       	mov	r23, r24
    369c:	70 71       	andi	r23, 0x10	; 16
    369e:	a7 2e       	mov	r10, r23
    36a0:	84 ff       	sbrs	r24, 4
    36a2:	03 c0       	rjmp	.+6      	; 0x36aa <dtoa_prf+0x228>
    36a4:	31 33       	cpi	r19, 0x31	; 49
    36a6:	09 f4       	brne	.+2      	; 0x36aa <dtoa_prf+0x228>
    36a8:	91 50       	subi	r25, 0x01	; 1
    36aa:	19 16       	cp	r1, r25
    36ac:	24 f4       	brge	.+8      	; 0x36b6 <dtoa_prf+0x234>
    36ae:	99 30       	cpi	r25, 0x09	; 9
    36b0:	18 f0       	brcs	.+6      	; 0x36b8 <dtoa_prf+0x236>
    36b2:	98 e0       	ldi	r25, 0x08	; 8
    36b4:	01 c0       	rjmp	.+2      	; 0x36b8 <dtoa_prf+0x236>
    36b6:	91 e0       	ldi	r25, 0x01	; 1
    36b8:	e4 2f       	mov	r30, r20
    36ba:	85 2f       	mov	r24, r21
    36bc:	57 ff       	sbrs	r21, 7
    36be:	02 c0       	rjmp	.+4      	; 0x36c4 <dtoa_prf+0x242>
    36c0:	e0 e0       	ldi	r30, 0x00	; 0
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	6e 2f       	mov	r22, r30
    36c6:	78 2f       	mov	r23, r24
    36c8:	e0 e0       	ldi	r30, 0x00	; 0
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	ae e2       	ldi	r26, 0x2E	; 46
    36ce:	9a 2e       	mov	r9, r26
    36d0:	3a 01       	movw	r6, r20
    36d2:	69 1a       	sub	r6, r25
    36d4:	71 08       	sbc	r7, r1
    36d6:	2a 01       	movw	r4, r20
    36d8:	46 1a       	sub	r4, r22
    36da:	57 0a       	sbc	r5, r23
    36dc:	0b 2d       	mov	r16, r11
    36de:	10 e0       	ldi	r17, 0x00	; 0
    36e0:	11 95       	neg	r17
    36e2:	01 95       	neg	r16
    36e4:	11 09       	sbc	r17, r1
    36e6:	6f 3f       	cpi	r22, 0xFF	; 255
    36e8:	8f ef       	ldi	r24, 0xFF	; 255
    36ea:	78 07       	cpc	r23, r24
    36ec:	29 f4       	brne	.+10     	; 0x36f8 <dtoa_prf+0x276>
    36ee:	d6 01       	movw	r26, r12
    36f0:	9c 92       	st	X, r9
    36f2:	c6 01       	movw	r24, r12
    36f4:	01 96       	adiw	r24, 0x01	; 1
    36f6:	6c 01       	movw	r12, r24
    36f8:	46 17       	cp	r20, r22
    36fa:	57 07       	cpc	r21, r23
    36fc:	84 f0       	brlt	.+32     	; 0x371e <dtoa_prf+0x29c>
    36fe:	66 16       	cp	r6, r22
    3700:	77 06       	cpc	r7, r23
    3702:	6c f4       	brge	.+26     	; 0x371e <dtoa_prf+0x29c>
    3704:	7f 01       	movw	r14, r30
    3706:	e4 0c       	add	r14, r4
    3708:	f5 1c       	adc	r15, r5
    370a:	a1 e0       	ldi	r26, 0x01	; 1
    370c:	b0 e0       	ldi	r27, 0x00	; 0
    370e:	ac 0f       	add	r26, r28
    3710:	bd 1f       	adc	r27, r29
    3712:	ea 0e       	add	r14, r26
    3714:	fb 1e       	adc	r15, r27
    3716:	d7 01       	movw	r26, r14
    3718:	11 96       	adiw	r26, 0x01	; 1
    371a:	bc 90       	ld	r11, X
    371c:	02 c0       	rjmp	.+4      	; 0x3722 <dtoa_prf+0x2a0>
    371e:	90 e3       	ldi	r25, 0x30	; 48
    3720:	b9 2e       	mov	r11, r25
    3722:	61 50       	subi	r22, 0x01	; 1
    3724:	71 09       	sbc	r23, r1
    3726:	31 96       	adiw	r30, 0x01	; 1
    3728:	c6 01       	movw	r24, r12
    372a:	01 96       	adiw	r24, 0x01	; 1
    372c:	7c 01       	movw	r14, r24
    372e:	60 17       	cp	r22, r16
    3730:	71 07       	cpc	r23, r17
    3732:	24 f0       	brlt	.+8      	; 0x373c <dtoa_prf+0x2ba>
    3734:	d6 01       	movw	r26, r12
    3736:	bc 92       	st	X, r11
    3738:	6c 01       	movw	r12, r24
    373a:	d5 cf       	rjmp	.-86     	; 0x36e6 <dtoa_prf+0x264>
    373c:	64 17       	cp	r22, r20
    373e:	75 07       	cpc	r23, r21
    3740:	41 f4       	brne	.+16     	; 0x3752 <dtoa_prf+0x2d0>
    3742:	36 33       	cpi	r19, 0x36	; 54
    3744:	20 f4       	brcc	.+8      	; 0x374e <dtoa_prf+0x2cc>
    3746:	35 33       	cpi	r19, 0x35	; 53
    3748:	21 f4       	brne	.+8      	; 0x3752 <dtoa_prf+0x2d0>
    374a:	a1 10       	cpse	r10, r1
    374c:	02 c0       	rjmp	.+4      	; 0x3752 <dtoa_prf+0x2d0>
    374e:	81 e3       	ldi	r24, 0x31	; 49
    3750:	b8 2e       	mov	r11, r24
    3752:	f6 01       	movw	r30, r12
    3754:	b0 82       	st	Z, r11
    3756:	f7 01       	movw	r30, r14
    3758:	82 2f       	mov	r24, r18
    375a:	90 e2       	ldi	r25, 0x20	; 32
    375c:	88 23       	and	r24, r24
    375e:	19 f0       	breq	.+6      	; 0x3766 <dtoa_prf+0x2e4>
    3760:	91 93       	st	Z+, r25
    3762:	81 50       	subi	r24, 0x01	; 1
    3764:	fb cf       	rjmp	.-10     	; 0x375c <dtoa_prf+0x2da>
    3766:	f7 01       	movw	r30, r14
    3768:	e2 0f       	add	r30, r18
    376a:	f1 1d       	adc	r31, r1
    376c:	10 82       	st	Z, r1
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	29 96       	adiw	r28, 0x09	; 9
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
    377e:	df 91       	pop	r29
    3780:	cf 91       	pop	r28
    3782:	1f 91       	pop	r17
    3784:	0f 91       	pop	r16
    3786:	ff 90       	pop	r15
    3788:	ef 90       	pop	r14
    378a:	df 90       	pop	r13
    378c:	cf 90       	pop	r12
    378e:	bf 90       	pop	r11
    3790:	af 90       	pop	r10
    3792:	9f 90       	pop	r9
    3794:	7f 90       	pop	r7
    3796:	6f 90       	pop	r6
    3798:	5f 90       	pop	r5
    379a:	4f 90       	pop	r4
    379c:	08 95       	ret

0000379e <__ftoa_engine>:
    379e:	28 30       	cpi	r18, 0x08	; 8
    37a0:	08 f0       	brcs	.+2      	; 0x37a4 <__ftoa_engine+0x6>
    37a2:	27 e0       	ldi	r18, 0x07	; 7
    37a4:	33 27       	eor	r19, r19
    37a6:	da 01       	movw	r26, r20
    37a8:	99 0f       	add	r25, r25
    37aa:	31 1d       	adc	r19, r1
    37ac:	87 fd       	sbrc	r24, 7
    37ae:	91 60       	ori	r25, 0x01	; 1
    37b0:	00 96       	adiw	r24, 0x00	; 0
    37b2:	61 05       	cpc	r22, r1
    37b4:	71 05       	cpc	r23, r1
    37b6:	39 f4       	brne	.+14     	; 0x37c6 <__ftoa_engine+0x28>
    37b8:	32 60       	ori	r19, 0x02	; 2
    37ba:	2e 5f       	subi	r18, 0xFE	; 254
    37bc:	3d 93       	st	X+, r19
    37be:	30 e3       	ldi	r19, 0x30	; 48
    37c0:	2a 95       	dec	r18
    37c2:	e1 f7       	brne	.-8      	; 0x37bc <__ftoa_engine+0x1e>
    37c4:	08 95       	ret
    37c6:	9f 3f       	cpi	r25, 0xFF	; 255
    37c8:	30 f0       	brcs	.+12     	; 0x37d6 <__ftoa_engine+0x38>
    37ca:	80 38       	cpi	r24, 0x80	; 128
    37cc:	71 05       	cpc	r23, r1
    37ce:	61 05       	cpc	r22, r1
    37d0:	09 f0       	breq	.+2      	; 0x37d4 <__ftoa_engine+0x36>
    37d2:	3c 5f       	subi	r19, 0xFC	; 252
    37d4:	3c 5f       	subi	r19, 0xFC	; 252
    37d6:	3d 93       	st	X+, r19
    37d8:	91 30       	cpi	r25, 0x01	; 1
    37da:	08 f0       	brcs	.+2      	; 0x37de <__ftoa_engine+0x40>
    37dc:	80 68       	ori	r24, 0x80	; 128
    37de:	91 1d       	adc	r25, r1
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	1f 93       	push	r17
    37e6:	0f 93       	push	r16
    37e8:	ff 92       	push	r15
    37ea:	ef 92       	push	r14
    37ec:	19 2f       	mov	r17, r25
    37ee:	98 7f       	andi	r25, 0xF8	; 248
    37f0:	96 95       	lsr	r25
    37f2:	e9 2f       	mov	r30, r25
    37f4:	96 95       	lsr	r25
    37f6:	96 95       	lsr	r25
    37f8:	e9 0f       	add	r30, r25
    37fa:	ff 27       	eor	r31, r31
    37fc:	e4 5e       	subi	r30, 0xE4	; 228
    37fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3800:	99 27       	eor	r25, r25
    3802:	33 27       	eor	r19, r19
    3804:	ee 24       	eor	r14, r14
    3806:	ff 24       	eor	r15, r15
    3808:	a7 01       	movw	r20, r14
    380a:	e7 01       	movw	r28, r14
    380c:	05 90       	lpm	r0, Z+
    380e:	08 94       	sec
    3810:	07 94       	ror	r0
    3812:	28 f4       	brcc	.+10     	; 0x381e <__ftoa_engine+0x80>
    3814:	36 0f       	add	r19, r22
    3816:	e7 1e       	adc	r14, r23
    3818:	f8 1e       	adc	r15, r24
    381a:	49 1f       	adc	r20, r25
    381c:	51 1d       	adc	r21, r1
    381e:	66 0f       	add	r22, r22
    3820:	77 1f       	adc	r23, r23
    3822:	88 1f       	adc	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	06 94       	lsr	r0
    3828:	a1 f7       	brne	.-24     	; 0x3812 <__ftoa_engine+0x74>
    382a:	05 90       	lpm	r0, Z+
    382c:	07 94       	ror	r0
    382e:	28 f4       	brcc	.+10     	; 0x383a <__ftoa_engine+0x9c>
    3830:	e7 0e       	add	r14, r23
    3832:	f8 1e       	adc	r15, r24
    3834:	49 1f       	adc	r20, r25
    3836:	56 1f       	adc	r21, r22
    3838:	c1 1d       	adc	r28, r1
    383a:	77 0f       	add	r23, r23
    383c:	88 1f       	adc	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	66 1f       	adc	r22, r22
    3842:	06 94       	lsr	r0
    3844:	a1 f7       	brne	.-24     	; 0x382e <__ftoa_engine+0x90>
    3846:	05 90       	lpm	r0, Z+
    3848:	07 94       	ror	r0
    384a:	28 f4       	brcc	.+10     	; 0x3856 <__ftoa_engine+0xb8>
    384c:	f8 0e       	add	r15, r24
    384e:	49 1f       	adc	r20, r25
    3850:	56 1f       	adc	r21, r22
    3852:	c7 1f       	adc	r28, r23
    3854:	d1 1d       	adc	r29, r1
    3856:	88 0f       	add	r24, r24
    3858:	99 1f       	adc	r25, r25
    385a:	66 1f       	adc	r22, r22
    385c:	77 1f       	adc	r23, r23
    385e:	06 94       	lsr	r0
    3860:	a1 f7       	brne	.-24     	; 0x384a <__ftoa_engine+0xac>
    3862:	05 90       	lpm	r0, Z+
    3864:	07 94       	ror	r0
    3866:	20 f4       	brcc	.+8      	; 0x3870 <__ftoa_engine+0xd2>
    3868:	49 0f       	add	r20, r25
    386a:	56 1f       	adc	r21, r22
    386c:	c7 1f       	adc	r28, r23
    386e:	d8 1f       	adc	r29, r24
    3870:	99 0f       	add	r25, r25
    3872:	66 1f       	adc	r22, r22
    3874:	77 1f       	adc	r23, r23
    3876:	88 1f       	adc	r24, r24
    3878:	06 94       	lsr	r0
    387a:	a9 f7       	brne	.-22     	; 0x3866 <__ftoa_engine+0xc8>
    387c:	84 91       	lpm	r24, Z
    387e:	10 95       	com	r17
    3880:	17 70       	andi	r17, 0x07	; 7
    3882:	41 f0       	breq	.+16     	; 0x3894 <__ftoa_engine+0xf6>
    3884:	d6 95       	lsr	r29
    3886:	c7 95       	ror	r28
    3888:	57 95       	ror	r21
    388a:	47 95       	ror	r20
    388c:	f7 94       	ror	r15
    388e:	e7 94       	ror	r14
    3890:	1a 95       	dec	r17
    3892:	c1 f7       	brne	.-16     	; 0x3884 <__ftoa_engine+0xe6>
    3894:	e2 ec       	ldi	r30, 0xC2	; 194
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	68 94       	set
    389a:	15 90       	lpm	r1, Z+
    389c:	15 91       	lpm	r17, Z+
    389e:	35 91       	lpm	r19, Z+
    38a0:	65 91       	lpm	r22, Z+
    38a2:	95 91       	lpm	r25, Z+
    38a4:	05 90       	lpm	r0, Z+
    38a6:	7f e2       	ldi	r23, 0x2F	; 47
    38a8:	73 95       	inc	r23
    38aa:	e1 18       	sub	r14, r1
    38ac:	f1 0a       	sbc	r15, r17
    38ae:	43 0b       	sbc	r20, r19
    38b0:	56 0b       	sbc	r21, r22
    38b2:	c9 0b       	sbc	r28, r25
    38b4:	d0 09       	sbc	r29, r0
    38b6:	c0 f7       	brcc	.-16     	; 0x38a8 <__ftoa_engine+0x10a>
    38b8:	e1 0c       	add	r14, r1
    38ba:	f1 1e       	adc	r15, r17
    38bc:	43 1f       	adc	r20, r19
    38be:	56 1f       	adc	r21, r22
    38c0:	c9 1f       	adc	r28, r25
    38c2:	d0 1d       	adc	r29, r0
    38c4:	7e f4       	brtc	.+30     	; 0x38e4 <__ftoa_engine+0x146>
    38c6:	70 33       	cpi	r23, 0x30	; 48
    38c8:	11 f4       	brne	.+4      	; 0x38ce <__ftoa_engine+0x130>
    38ca:	8a 95       	dec	r24
    38cc:	e6 cf       	rjmp	.-52     	; 0x389a <__ftoa_engine+0xfc>
    38ce:	e8 94       	clt
    38d0:	01 50       	subi	r16, 0x01	; 1
    38d2:	30 f0       	brcs	.+12     	; 0x38e0 <__ftoa_engine+0x142>
    38d4:	08 0f       	add	r16, r24
    38d6:	0a f4       	brpl	.+2      	; 0x38da <__ftoa_engine+0x13c>
    38d8:	00 27       	eor	r16, r16
    38da:	02 17       	cp	r16, r18
    38dc:	08 f4       	brcc	.+2      	; 0x38e0 <__ftoa_engine+0x142>
    38de:	20 2f       	mov	r18, r16
    38e0:	23 95       	inc	r18
    38e2:	02 2f       	mov	r16, r18
    38e4:	7a 33       	cpi	r23, 0x3A	; 58
    38e6:	28 f0       	brcs	.+10     	; 0x38f2 <__ftoa_engine+0x154>
    38e8:	79 e3       	ldi	r23, 0x39	; 57
    38ea:	7d 93       	st	X+, r23
    38ec:	2a 95       	dec	r18
    38ee:	e9 f7       	brne	.-6      	; 0x38ea <__ftoa_engine+0x14c>
    38f0:	10 c0       	rjmp	.+32     	; 0x3912 <__ftoa_engine+0x174>
    38f2:	7d 93       	st	X+, r23
    38f4:	2a 95       	dec	r18
    38f6:	89 f6       	brne	.-94     	; 0x389a <__ftoa_engine+0xfc>
    38f8:	06 94       	lsr	r0
    38fa:	97 95       	ror	r25
    38fc:	67 95       	ror	r22
    38fe:	37 95       	ror	r19
    3900:	17 95       	ror	r17
    3902:	17 94       	ror	r1
    3904:	e1 18       	sub	r14, r1
    3906:	f1 0a       	sbc	r15, r17
    3908:	43 0b       	sbc	r20, r19
    390a:	56 0b       	sbc	r21, r22
    390c:	c9 0b       	sbc	r28, r25
    390e:	d0 09       	sbc	r29, r0
    3910:	98 f0       	brcs	.+38     	; 0x3938 <__ftoa_engine+0x19a>
    3912:	23 95       	inc	r18
    3914:	7e 91       	ld	r23, -X
    3916:	73 95       	inc	r23
    3918:	7a 33       	cpi	r23, 0x3A	; 58
    391a:	08 f0       	brcs	.+2      	; 0x391e <__ftoa_engine+0x180>
    391c:	70 e3       	ldi	r23, 0x30	; 48
    391e:	7c 93       	st	X, r23
    3920:	20 13       	cpse	r18, r16
    3922:	b8 f7       	brcc	.-18     	; 0x3912 <__ftoa_engine+0x174>
    3924:	7e 91       	ld	r23, -X
    3926:	70 61       	ori	r23, 0x10	; 16
    3928:	7d 93       	st	X+, r23
    392a:	30 f0       	brcs	.+12     	; 0x3938 <__ftoa_engine+0x19a>
    392c:	83 95       	inc	r24
    392e:	71 e3       	ldi	r23, 0x31	; 49
    3930:	7d 93       	st	X+, r23
    3932:	70 e3       	ldi	r23, 0x30	; 48
    3934:	2a 95       	dec	r18
    3936:	e1 f7       	brne	.-8      	; 0x3930 <__ftoa_engine+0x192>
    3938:	11 24       	eor	r1, r1
    393a:	ef 90       	pop	r14
    393c:	ff 90       	pop	r15
    393e:	0f 91       	pop	r16
    3940:	1f 91       	pop	r17
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	99 27       	eor	r25, r25
    3948:	87 fd       	sbrc	r24, 7
    394a:	90 95       	com	r25
    394c:	08 95       	ret

0000394e <__ctype_isfalse>:
    394e:	99 27       	eor	r25, r25
    3950:	88 27       	eor	r24, r24

00003952 <__ctype_istrue>:
    3952:	08 95       	ret

00003954 <strnlen_P>:
    3954:	fc 01       	movw	r30, r24
    3956:	05 90       	lpm	r0, Z+
    3958:	61 50       	subi	r22, 0x01	; 1
    395a:	70 40       	sbci	r23, 0x00	; 0
    395c:	01 10       	cpse	r0, r1
    395e:	d8 f7       	brcc	.-10     	; 0x3956 <strnlen_P+0x2>
    3960:	80 95       	com	r24
    3962:	90 95       	com	r25
    3964:	8e 0f       	add	r24, r30
    3966:	9f 1f       	adc	r25, r31
    3968:	08 95       	ret

0000396a <strnlen>:
    396a:	fc 01       	movw	r30, r24
    396c:	61 50       	subi	r22, 0x01	; 1
    396e:	70 40       	sbci	r23, 0x00	; 0
    3970:	01 90       	ld	r0, Z+
    3972:	01 10       	cpse	r0, r1
    3974:	d8 f7       	brcc	.-10     	; 0x396c <strnlen+0x2>
    3976:	80 95       	com	r24
    3978:	90 95       	com	r25
    397a:	8e 0f       	add	r24, r30
    397c:	9f 1f       	adc	r25, r31
    397e:	08 95       	ret

00003980 <fputc>:
    3980:	0f 93       	push	r16
    3982:	1f 93       	push	r17
    3984:	cf 93       	push	r28
    3986:	df 93       	push	r29
    3988:	fb 01       	movw	r30, r22
    398a:	23 81       	ldd	r18, Z+3	; 0x03
    398c:	21 fd       	sbrc	r18, 1
    398e:	03 c0       	rjmp	.+6      	; 0x3996 <fputc+0x16>
    3990:	8f ef       	ldi	r24, 0xFF	; 255
    3992:	9f ef       	ldi	r25, 0xFF	; 255
    3994:	28 c0       	rjmp	.+80     	; 0x39e6 <fputc+0x66>
    3996:	22 ff       	sbrs	r18, 2
    3998:	16 c0       	rjmp	.+44     	; 0x39c6 <fputc+0x46>
    399a:	46 81       	ldd	r20, Z+6	; 0x06
    399c:	57 81       	ldd	r21, Z+7	; 0x07
    399e:	24 81       	ldd	r18, Z+4	; 0x04
    39a0:	35 81       	ldd	r19, Z+5	; 0x05
    39a2:	42 17       	cp	r20, r18
    39a4:	53 07       	cpc	r21, r19
    39a6:	44 f4       	brge	.+16     	; 0x39b8 <fputc+0x38>
    39a8:	a0 81       	ld	r26, Z
    39aa:	b1 81       	ldd	r27, Z+1	; 0x01
    39ac:	9d 01       	movw	r18, r26
    39ae:	2f 5f       	subi	r18, 0xFF	; 255
    39b0:	3f 4f       	sbci	r19, 0xFF	; 255
    39b2:	31 83       	std	Z+1, r19	; 0x01
    39b4:	20 83       	st	Z, r18
    39b6:	8c 93       	st	X, r24
    39b8:	26 81       	ldd	r18, Z+6	; 0x06
    39ba:	37 81       	ldd	r19, Z+7	; 0x07
    39bc:	2f 5f       	subi	r18, 0xFF	; 255
    39be:	3f 4f       	sbci	r19, 0xFF	; 255
    39c0:	37 83       	std	Z+7, r19	; 0x07
    39c2:	26 83       	std	Z+6, r18	; 0x06
    39c4:	10 c0       	rjmp	.+32     	; 0x39e6 <fputc+0x66>
    39c6:	eb 01       	movw	r28, r22
    39c8:	09 2f       	mov	r16, r25
    39ca:	18 2f       	mov	r17, r24
    39cc:	00 84       	ldd	r0, Z+8	; 0x08
    39ce:	f1 85       	ldd	r31, Z+9	; 0x09
    39d0:	e0 2d       	mov	r30, r0
    39d2:	09 95       	icall
    39d4:	89 2b       	or	r24, r25
    39d6:	e1 f6       	brne	.-72     	; 0x3990 <fputc+0x10>
    39d8:	8e 81       	ldd	r24, Y+6	; 0x06
    39da:	9f 81       	ldd	r25, Y+7	; 0x07
    39dc:	01 96       	adiw	r24, 0x01	; 1
    39de:	9f 83       	std	Y+7, r25	; 0x07
    39e0:	8e 83       	std	Y+6, r24	; 0x06
    39e2:	81 2f       	mov	r24, r17
    39e4:	90 2f       	mov	r25, r16
    39e6:	df 91       	pop	r29
    39e8:	cf 91       	pop	r28
    39ea:	1f 91       	pop	r17
    39ec:	0f 91       	pop	r16
    39ee:	08 95       	ret

000039f0 <__ultoa_invert>:
    39f0:	fa 01       	movw	r30, r20
    39f2:	aa 27       	eor	r26, r26
    39f4:	28 30       	cpi	r18, 0x08	; 8
    39f6:	51 f1       	breq	.+84     	; 0x3a4c <__ultoa_invert+0x5c>
    39f8:	20 31       	cpi	r18, 0x10	; 16
    39fa:	81 f1       	breq	.+96     	; 0x3a5c <__ultoa_invert+0x6c>
    39fc:	e8 94       	clt
    39fe:	6f 93       	push	r22
    3a00:	6e 7f       	andi	r22, 0xFE	; 254
    3a02:	6e 5f       	subi	r22, 0xFE	; 254
    3a04:	7f 4f       	sbci	r23, 0xFF	; 255
    3a06:	8f 4f       	sbci	r24, 0xFF	; 255
    3a08:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0a:	af 4f       	sbci	r26, 0xFF	; 255
    3a0c:	b1 e0       	ldi	r27, 0x01	; 1
    3a0e:	3e d0       	rcall	.+124    	; 0x3a8c <__ultoa_invert+0x9c>
    3a10:	b4 e0       	ldi	r27, 0x04	; 4
    3a12:	3c d0       	rcall	.+120    	; 0x3a8c <__ultoa_invert+0x9c>
    3a14:	67 0f       	add	r22, r23
    3a16:	78 1f       	adc	r23, r24
    3a18:	89 1f       	adc	r24, r25
    3a1a:	9a 1f       	adc	r25, r26
    3a1c:	a1 1d       	adc	r26, r1
    3a1e:	68 0f       	add	r22, r24
    3a20:	79 1f       	adc	r23, r25
    3a22:	8a 1f       	adc	r24, r26
    3a24:	91 1d       	adc	r25, r1
    3a26:	a1 1d       	adc	r26, r1
    3a28:	6a 0f       	add	r22, r26
    3a2a:	71 1d       	adc	r23, r1
    3a2c:	81 1d       	adc	r24, r1
    3a2e:	91 1d       	adc	r25, r1
    3a30:	a1 1d       	adc	r26, r1
    3a32:	20 d0       	rcall	.+64     	; 0x3a74 <__ultoa_invert+0x84>
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <__ultoa_invert+0x48>
    3a36:	68 94       	set
    3a38:	3f 91       	pop	r19
    3a3a:	2a e0       	ldi	r18, 0x0A	; 10
    3a3c:	26 9f       	mul	r18, r22
    3a3e:	11 24       	eor	r1, r1
    3a40:	30 19       	sub	r19, r0
    3a42:	30 5d       	subi	r19, 0xD0	; 208
    3a44:	31 93       	st	Z+, r19
    3a46:	de f6       	brtc	.-74     	; 0x39fe <__ultoa_invert+0xe>
    3a48:	cf 01       	movw	r24, r30
    3a4a:	08 95       	ret
    3a4c:	46 2f       	mov	r20, r22
    3a4e:	47 70       	andi	r20, 0x07	; 7
    3a50:	40 5d       	subi	r20, 0xD0	; 208
    3a52:	41 93       	st	Z+, r20
    3a54:	b3 e0       	ldi	r27, 0x03	; 3
    3a56:	0f d0       	rcall	.+30     	; 0x3a76 <__ultoa_invert+0x86>
    3a58:	c9 f7       	brne	.-14     	; 0x3a4c <__ultoa_invert+0x5c>
    3a5a:	f6 cf       	rjmp	.-20     	; 0x3a48 <__ultoa_invert+0x58>
    3a5c:	46 2f       	mov	r20, r22
    3a5e:	4f 70       	andi	r20, 0x0F	; 15
    3a60:	40 5d       	subi	r20, 0xD0	; 208
    3a62:	4a 33       	cpi	r20, 0x3A	; 58
    3a64:	18 f0       	brcs	.+6      	; 0x3a6c <__ultoa_invert+0x7c>
    3a66:	49 5d       	subi	r20, 0xD9	; 217
    3a68:	31 fd       	sbrc	r19, 1
    3a6a:	40 52       	subi	r20, 0x20	; 32
    3a6c:	41 93       	st	Z+, r20
    3a6e:	02 d0       	rcall	.+4      	; 0x3a74 <__ultoa_invert+0x84>
    3a70:	a9 f7       	brne	.-22     	; 0x3a5c <__ultoa_invert+0x6c>
    3a72:	ea cf       	rjmp	.-44     	; 0x3a48 <__ultoa_invert+0x58>
    3a74:	b4 e0       	ldi	r27, 0x04	; 4
    3a76:	a6 95       	lsr	r26
    3a78:	97 95       	ror	r25
    3a7a:	87 95       	ror	r24
    3a7c:	77 95       	ror	r23
    3a7e:	67 95       	ror	r22
    3a80:	ba 95       	dec	r27
    3a82:	c9 f7       	brne	.-14     	; 0x3a76 <__ultoa_invert+0x86>
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	61 05       	cpc	r22, r1
    3a88:	71 05       	cpc	r23, r1
    3a8a:	08 95       	ret
    3a8c:	9b 01       	movw	r18, r22
    3a8e:	ac 01       	movw	r20, r24
    3a90:	0a 2e       	mov	r0, r26
    3a92:	06 94       	lsr	r0
    3a94:	57 95       	ror	r21
    3a96:	47 95       	ror	r20
    3a98:	37 95       	ror	r19
    3a9a:	27 95       	ror	r18
    3a9c:	ba 95       	dec	r27
    3a9e:	c9 f7       	brne	.-14     	; 0x3a92 <__ultoa_invert+0xa2>
    3aa0:	62 0f       	add	r22, r18
    3aa2:	73 1f       	adc	r23, r19
    3aa4:	84 1f       	adc	r24, r20
    3aa6:	95 1f       	adc	r25, r21
    3aa8:	a0 1d       	adc	r26, r0
    3aaa:	08 95       	ret

00003aac <__mulsi3>:
    3aac:	db 01       	movw	r26, r22
    3aae:	8f 93       	push	r24
    3ab0:	9f 93       	push	r25
    3ab2:	0e 94 66 1d 	call	0x3acc	; 0x3acc <__muluhisi3>
    3ab6:	bf 91       	pop	r27
    3ab8:	af 91       	pop	r26
    3aba:	a2 9f       	mul	r26, r18
    3abc:	80 0d       	add	r24, r0
    3abe:	91 1d       	adc	r25, r1
    3ac0:	a3 9f       	mul	r26, r19
    3ac2:	90 0d       	add	r25, r0
    3ac4:	b2 9f       	mul	r27, r18
    3ac6:	90 0d       	add	r25, r0
    3ac8:	11 24       	eor	r1, r1
    3aca:	08 95       	ret

00003acc <__muluhisi3>:
    3acc:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <__umulhisi3>
    3ad0:	a5 9f       	mul	r26, r21
    3ad2:	90 0d       	add	r25, r0
    3ad4:	b4 9f       	mul	r27, r20
    3ad6:	90 0d       	add	r25, r0
    3ad8:	a4 9f       	mul	r26, r20
    3ada:	80 0d       	add	r24, r0
    3adc:	91 1d       	adc	r25, r1
    3ade:	11 24       	eor	r1, r1
    3ae0:	08 95       	ret

00003ae2 <__prologue_saves__>:
    3ae2:	2f 92       	push	r2
    3ae4:	3f 92       	push	r3
    3ae6:	4f 92       	push	r4
    3ae8:	5f 92       	push	r5
    3aea:	6f 92       	push	r6
    3aec:	7f 92       	push	r7
    3aee:	8f 92       	push	r8
    3af0:	9f 92       	push	r9
    3af2:	af 92       	push	r10
    3af4:	bf 92       	push	r11
    3af6:	cf 92       	push	r12
    3af8:	df 92       	push	r13
    3afa:	ef 92       	push	r14
    3afc:	ff 92       	push	r15
    3afe:	0f 93       	push	r16
    3b00:	1f 93       	push	r17
    3b02:	cf 93       	push	r28
    3b04:	df 93       	push	r29
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	ca 1b       	sub	r28, r26
    3b0c:	db 0b       	sbc	r29, r27
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	09 94       	ijmp

00003b1a <__epilogue_restores__>:
    3b1a:	2a 88       	ldd	r2, Y+18	; 0x12
    3b1c:	39 88       	ldd	r3, Y+17	; 0x11
    3b1e:	48 88       	ldd	r4, Y+16	; 0x10
    3b20:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b22:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b24:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b26:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b28:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b2c:	b9 84       	ldd	r11, Y+9	; 0x09
    3b2e:	c8 84       	ldd	r12, Y+8	; 0x08
    3b30:	df 80       	ldd	r13, Y+7	; 0x07
    3b32:	ee 80       	ldd	r14, Y+6	; 0x06
    3b34:	fd 80       	ldd	r15, Y+5	; 0x05
    3b36:	0c 81       	ldd	r16, Y+4	; 0x04
    3b38:	1b 81       	ldd	r17, Y+3	; 0x03
    3b3a:	aa 81       	ldd	r26, Y+2	; 0x02
    3b3c:	b9 81       	ldd	r27, Y+1	; 0x01
    3b3e:	ce 0f       	add	r28, r30
    3b40:	d1 1d       	adc	r29, r1
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	f8 94       	cli
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	ed 01       	movw	r28, r26
    3b4e:	08 95       	ret

00003b50 <__umulhisi3>:
    3b50:	a2 9f       	mul	r26, r18
    3b52:	b0 01       	movw	r22, r0
    3b54:	b3 9f       	mul	r27, r19
    3b56:	c0 01       	movw	r24, r0
    3b58:	a3 9f       	mul	r26, r19
    3b5a:	70 0d       	add	r23, r0
    3b5c:	81 1d       	adc	r24, r1
    3b5e:	11 24       	eor	r1, r1
    3b60:	91 1d       	adc	r25, r1
    3b62:	b2 9f       	mul	r27, r18
    3b64:	70 0d       	add	r23, r0
    3b66:	81 1d       	adc	r24, r1
    3b68:	11 24       	eor	r1, r1
    3b6a:	91 1d       	adc	r25, r1
    3b6c:	08 95       	ret

00003b6e <__do_global_dtors>:
    3b6e:	10 e0       	ldi	r17, 0x00	; 0
    3b70:	c1 ee       	ldi	r28, 0xE1	; 225
    3b72:	d0 e0       	ldi	r29, 0x00	; 0
    3b74:	04 c0       	rjmp	.+8      	; 0x3b7e <__do_global_dtors+0x10>
    3b76:	fe 01       	movw	r30, r28
    3b78:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__tablejump2__>
    3b7c:	21 96       	adiw	r28, 0x01	; 1
    3b7e:	c2 3e       	cpi	r28, 0xE2	; 226
    3b80:	d1 07       	cpc	r29, r17
    3b82:	c9 f7       	brne	.-14     	; 0x3b76 <__do_global_dtors+0x8>
    3b84:	f8 94       	cli

00003b86 <__stop_program>:
    3b86:	ff cf       	rjmp	.-2      	; 0x3b86 <__stop_program>
